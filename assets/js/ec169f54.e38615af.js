"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[3726],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||l;return a?n.createElement(f,i(i({ref:t},c),{},{components:a})):n.createElement(f,i({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(7462),r=a(7294),l=a(6010),i=a(2466),o=a(6550),u=a(1980),s=a(7392),c=a(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function d(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,u._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=d(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[u,s]=f({queryString:a,groupId:n}),[p,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,c.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),b=(()=>{const e=u??p;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),h(e)}),[s,h,l]),tabValues:l}}var b=a(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:a,selectedValue:o,selectValue:u,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,a=c.indexOf(t),n=s[a].value;n!==o&&(p(t),u(n))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},s.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},i,{className:(0,l.Z)("tabs__item",k.tabItem,i?.className,{"tabs__item--active":o===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=h(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},r.createElement(g,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function v(e){const t=(0,b.Z)();return r.createElement(w,(0,n.Z)({key:String(t)},e))}},7304:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905)),l=a(4866),i=a(5162);const o={id:"build-pipeline",title:"Configure Polywrap build pipeline"},u=void 0,s={unversionedId:"tutorials/build-and-deploy-wasm-wrappers/build-pipeline",id:"tutorials/build-and-deploy-wasm-wrappers/build-pipeline",title:"Configure Polywrap build pipeline",description:"In this section, we'll explore the Polywrap's build pipeline and how to configure it.",source:"@site/docs/tutorials/build-and-deploy-wasm-wrappers/build-pipeline.md",sourceDirName:"tutorials/build-and-deploy-wasm-wrappers",slug:"/tutorials/build-and-deploy-wasm-wrappers/build-pipeline",permalink:"/tutorials/build-and-deploy-wasm-wrappers/build-pipeline",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/build-and-deploy-wasm-wrappers/build-pipeline.md",tags:[],version:"current",frontMatter:{id:"build-pipeline",title:"Configure Polywrap build pipeline"},sidebar:"docs",previous:{title:"Configure Polywrap infrastructure pipeline",permalink:"/tutorials/testing-wrappers/infra-pipeline"},next:{title:"Deploy to IPFS",permalink:"/tutorials/build-and-deploy-wasm-wrappers/deploy-to-ipfs"}},c={},p=[{value:"Build pipeline",id:"build-pipeline",level:2},{value:"Build Manifest",id:"build-manifest",level:2},{value:"Declaration",id:"declaration",level:3},{value:"Content",id:"content",level:3},{value:"Customizing the Dockerfile",id:"customizing-the-dockerfile",level:2},{value:"Mustache support",id:"mustache-support",level:3}],d={toc:p},m="wrapper";function f(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this section, we'll explore the Polywrap's build pipeline and how to configure it.\nThis article will help you understand the follow concepts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Polywrap's build pipeline"),(0,r.kt)("li",{parentName:"ul"},"Customizing the Build Manifest file"),(0,r.kt)("li",{parentName:"ul"},"Customizing the Dockerfile")),(0,r.kt)("h2",{id:"build-pipeline"},"Build pipeline"),(0,r.kt)("p",null,"The build process begins by running the ",(0,r.kt)("a",{parentName:"p",href:"../../reference/cli/commands/build"},(0,r.kt)("inlineCode",{parentName:"a"},"build"))," command from the ",(0,r.kt)("a",{parentName:"p",href:"../../reference/cli/polywrap-cli"},(0,r.kt)("inlineCode",{parentName:"a"},"polywrap"))," CLI.\nThe command will first search for the ",(0,r.kt)("a",{parentName:"p",href:"../create-wasm-wrappers/polywrap-manifest"},"Polywrap Manifest"),", find the wrapper schema and implementation, and move these files into a Docker image. "),(0,r.kt)("p",null,"Within the docker image, the wrapper schema is parsed and its contents are extracted into an ABI.\nThe ABI is used to generate binding code for the wrapper.\nThe wrapper is then compiled into a Wasm module.\nThe ABI and the Polywrap Manifest are merged into a Wrap Manifest file called ",(0,r.kt)("inlineCode",{parentName:"p"},"wrap.info"),"."),(0,r.kt)("p",null,"While the default build settings work well for many projects, the toolchain offers a highly configurable build pipeline for those who need more customization."),(0,r.kt)("h2",{id:"build-manifest"},"Build Manifest"),(0,r.kt)("p",null,"The Build Manifest ",(0,r.kt)("inlineCode",{parentName:"p"},"polywrap.build.yaml")," file is the entry point to build pipeline configuration."),(0,r.kt)("h3",{id:"declaration"},"Declaration"),(0,r.kt)("p",null,"The location of the Build Manifest must be declared in your ",(0,r.kt)("a",{parentName:"p",href:"../create-wasm-wrappers/polywrap-manifest"},"Polywrap Manifest")," with a field labeled ",(0,r.kt)("em",{parentName:"p"},"build"),".\nIf a custom build manifest is not declared, the default build configuration will be used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"build: ./polywrap.build.yaml\n")),(0,r.kt)("h3",{id:"content"},"Content"),(0,r.kt)(l.Z,{defaultValue:"schema",values:[{label:"Schema",value:"schema"},{label:"Example",value:"example"},{label:"Default Configuration",value:"default"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"schema",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"format:  # Polywrap build manifest format version. Values: 0.3.0\nstrategies:  # Custom build image configurations.\nimage:  # Docker image strategy configuration\n    name:  # Docker image name.\n    dockerfile:  # Docker image file name.\n    buildx:  # Configuration options for Docker Buildx, set to true for default value.\n    removeImage:  # Remove the image.\nlocal:  # Local build strategy configuration\n    scriptPath:  # Custom script path for local build\nvm:  # Docker VM strategy configuration\n    baseImage:  # Base image for the Docker VM\n    defaultIncludes:  # Files to include in build VM container, by default\nlinked_packages:  # Locally linked packages into docker build image.\nconfig:  # General configurations.\n"))),(0,r.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"format: 0.3.0\ndocker:\n  name: build-env\nconfig:\n  node_version: 14.16.0\n  include:\n    - ./package.json\nstrategies:\n  image:\n    name: build-env\n    node_version: 14.16.0\n    include:\n      - ./package.json\n    buildx:\n      keepBuilder: false\n"))),(0,r.kt)(i.Z,{value:"default",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'format: 0.3.0\nstrategies:\n  image:\n    node_version: "17.9.1"\n    include:\n      - ./package.json\n')))),(0,r.kt)("h2",{id:"customizing-the-dockerfile"},"Customizing the Dockerfile"),(0,r.kt)("p",null,"Those who need to fully customize the Docker image build steps can customize the Dockerfile.\nThe Dockerfile is a text file containing instructions for Docker to build images.\nYou can learn more about it at Docker's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/"},"Dockerfile documentation"),"."),(0,r.kt)("p",null,"To begin, either copy the default Dockerfile from the ",(0,r.kt)("inlineCode",{parentName:"p"},".polywrap/wasm/build/image")," folder or create your own."),(0,r.kt)("p",null,"Then, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"polywrap.build.yaml")," file, add a key called ",(0,r.kt)("inlineCode",{parentName:"p"},"dockerfile")," with the path of the newly created Dockerfile as the value.\nThat's it! Now, you can customize the Dockerfile to your heart's content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\ndocker:\n  name: build-env\n  dockerfile: ./Dockerfile\n")),(0,r.kt)("h3",{id:"mustache-support"},"Mustache support"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mustache.github.io/"},"Mustache")," is a logic-less template system that can be used for HTML, config files, and more.\nYou can learn more about writing Mustache templates ",(0,r.kt)("a",{parentName:"p",href:"https://mustache.github.io/mustache.5.html"},"here"),"."),(0,r.kt)("p",null,"To enable Mustache capabilities for your Dockerfile, name your custom Dockerfile with a ",(0,r.kt)("inlineCode",{parentName:"p"},".mustache")," file extension:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"dockerfile: ./Dockerfile.mustache\n")),(0,r.kt)("p",null,"With Mustache, your Dockerfile will be able to recognize variable tags set within the ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," field of the Build Manifest.\nFor example, in your Build Manifest file, you could have a key such as ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," with the value ",(0,r.kt)("inlineCode",{parentName:"p"},"hey")," like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"format: 0.3.0\ndocker:\n  name: build-env\n  dockerfile: ./Dockerfile.mustache\nconfig:\n  foo: hey\nstrategies:\n  image:\n    name: build-env\n    dockerfile: ./Dockerfile.mustache\n    node_version: 16.13.0\n    include:\n      - ./package.json\n    buildx:\n      keepBuilder: false\n")),(0,r.kt)("p",null,"To use this variable in your Mustache-enabled Dockerfile, simply reference the variable with curly braces like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},"{{ foo }}\n")))}f.isMDXComponent=!0}}]);