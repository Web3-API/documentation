"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[2757],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(r),u=o,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||c;return r?n.createElement(f,a(a({ref:t},l),{},{components:r})):n.createElement(f,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,a=new Array(c);a[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<c;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5566:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const c={id:"test",title:"Test"},a=void 0,i={unversionedId:"reference/cli/commands/test",id:"reference/cli/commands/test",title:"Test",description:"",source:"@site/docs/reference/cli/commands/test.md",sourceDirName:"reference/cli/commands",slug:"/reference/cli/commands/test",permalink:"/reference/cli/commands/test",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/cli/commands/test.md",tags:[],version:"current",frontMatter:{id:"test",title:"Test"},sidebar:"docs",previous:{title:"Build",permalink:"/reference/cli/commands/build"},next:{title:"Deploy",permalink:"/reference/cli/commands/deploy"}},s={},p=[],l={toc:p},m="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Usage: polywrap [options] [command]\n\nOptions:\n  -h, --help                   display help for command\n\nCommands:\n  build|b [options]            Build Polywrap Projects (type: interface, wasm)\n  codegen|g [options]          Generate Code For Polywrap Projects\n  create|c                     Create New Projects\n  deploy|d [options]           Deploys Polywrap Projects\n  infra|i [options] <action>   Modular Infrastructure-As-Code Orchestrator\n  run|r [options]              Runs Workflows\n  docgen|o [options] <action>  Generate wrapper documentation\n  manifest|m                   Inspect & Migrade Polywrap Manifests\n  help [command]               display help for command\n")))}d.isMDXComponent=!0}}]);