"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[1060],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",w={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,f=u["".concat(s,".").concat(d)]||u[d]||w[d]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5232:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>w,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={id:"writing-tests-with-workflows",title:"Writing tests with workflows"},i=void 0,l={unversionedId:"tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows",id:"tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows",title:"Writing tests with workflows",description:"Testing",source:"@site/docs/tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows.md",sourceDirName:"tutorials/create-wasm-wrappers/tutorial",slug:"/tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows",permalink:"/tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows.md",tags:[],version:"current",frontMatter:{id:"writing-tests-with-workflows",title:"Writing tests with workflows"},sidebar:"docs",previous:{title:"Adding new Methods",permalink:"/tutorials/create-wasm-wrappers/tutorial/adding-new-methods"},next:{title:"Deploy locally & run tests",permalink:"/tutorials/create-wasm-wrappers/tutorial/deploy-locally-and-test"}},s={},p=[{value:"<strong>Testing</strong>",id:"testing",level:3}],c={toc:p},u="wrapper";function w(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"testing"},(0,a.kt)("strong",{parentName:"h3"},"Testing")),(0,a.kt)("p",null,"In order to test this new functionality, we'll update the existing ",(0,a.kt)("inlineCode",{parentName:"p"},"./workflows/e2e.yaml")," workflow file to include the new methods we've added (",(0,a.kt)("inlineCode",{parentName:"p"},"setIpfsData"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"getIpfsData"),")."),(0,a.kt)("p",null,"Add the following case to the ",(0,a.kt)("inlineCode",{parentName:"p"},"e2e.yaml")," workflow in the ",(0,a.kt)("inlineCode",{parentName:"p"},"./workflows")," folder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="./workflows/e2e.yaml"',title:'"./workflows/e2e.yaml"'},'      case2:\n        steps:\n          - uri: fs/build\n            method: setIpfsData\n            args:\n              options:\n                address: "$cases.0.data"\n                data: "Hello from IPFS!"\n          - uri: fs/build\n            method: getIpfsData\n            args:\n              address: "$cases.0.data"\n')),(0,a.kt)("p",null,"Once our workflow has been defined, we may want to be able to validate our actual results against our expectations.\nWorkflow validation uses ",(0,a.kt)("a",{parentName:"p",href:"https://cuelang.org/"},"CUE"),", a flexible and expressive data validation language.\nCUE must be installed to complete this step. "),(0,a.kt)("p",null,"If you don't want to install anything right now, don't worry!\nOur results will be easy to verify with manually."),(0,a.kt)("p",null,"To continue with automated testing, let's add our expected output to a new file in the workflows folder. We will call\nthe file ",(0,a.kt)("inlineCode",{parentName:"p"},"validator.cue"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cue",metastring:'title="./workflows/validator.cue"',title:'"./workflows/validator.cue"'},'package e2e\n\ncases: {\n  $0: {\n    data: =~"^0x[A-Fa-f0-9]{40}$",\n    error?: _|_, // Never fails\n  }\n  case1: {\n    $0: {\n      data: =~"^0x[A-Fa-f0-9]{64}$",\n      error?: _|_,\n    }\n    $1: {\n      data: uint,\n      error?: _|_\n    }\n  }\n  case2: {\n    $0: {\n      data: {\n        txReceipt: string,\n        ipfsHash: "QmPhAJz5QbidN3LgT2eDiu6Z3nCFs2gYQMbjgEAncrGsis"\n        },\n      error?: _|_,\n      }\n    $1: {\n      data: "Hello from IPFS!",\n      error?: _|_,\n    }\n  }\n}\n')),(0,a.kt)("p",null,"With our workflow complete, we'll deploy and test our Wasm wrapper locally in the next section!"))}w.isMDXComponent=!0}}]);