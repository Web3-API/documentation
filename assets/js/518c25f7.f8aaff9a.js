"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[7623],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>w});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),l=u(n),m=o,w=l["".concat(s,".").concat(m)]||l[m]||d[m]||r;return n?a.createElement(w,p(p({ref:t},c),{},{components:n})):a.createElement(w,p({ref:t},c))}));function w(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,p=new Array(r);p[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[l]="string"==typeof e?e:o,p[1]=i;for(var u=2;u<r;u++)p[u]=n[u];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5983:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={id:"swap",title:"Swap"},p=void 0,i={unversionedId:"demos/uniswapv3/mutations/swap",id:"demos/uniswapv3/mutations/swap",title:"Swap",description:"execSwap",source:"@site/docs/demos/uniswapv3/mutations/swap.md",sourceDirName:"demos/uniswapv3/mutations",slug:"/demos/uniswapv3/mutations/swap",permalink:"/demos/uniswapv3/mutations/swap",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/demos/uniswapv3/mutations/swap.md",tags:[],version:"current",frontMatter:{id:"swap",title:"Swap"}},s={},u=[{value:"execSwap",id:"execswap",level:3},{value:"swap",id:"swap",level:3},{value:"swapWithPool",id:"swapwithpool",level:3}],c={toc:u},l="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"execswap"},"execSwap"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Perform an on-chain swap with one or more trades in a single transaction")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"execSwap(\n  trades: Trade[]! # Trades to encode into calldata\n  swapOptions: SwapOptions! # Swap configuration\n  gasOptions: GasOptions # Transaction gas configuration\n): Ethereum_TxResponse!\n")),(0,o.kt)("h3",{id:"swap"},"swap"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Perform an on-chain swap within a single pool by using token and fee amount information to find the correct pool")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"swap(\n  inToken: Token! # Input token of the pool\n  outToken: Token! # Output token of the pool\n  fee: FeeAmount! # Fee amount of the pool being used for the swap\n  amount: BigInt! # Amount being swapped in or out, depending on trade type\n  tradeType: TradeType! # Type of trade, either exact input or exact output\n  swapOptions: SwapOptions! # Swap configuration\n  gasOptions: GasOptions # Transaction gas configuration\n): Ethereum_TxResponse!\n")),(0,o.kt)("h3",{id:"swapwithpool"},"swapWithPool"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Perform an on-chain swap using a single pool at provided address; requires ERC20-compliant input and output (i.e. no Ether)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"swapWithPool(\n  address: String! # Ethereum address of the pool used for the swap\n  amount: TokenAmount! # Token amount being swapped in or out, depending on trade type\n  tradeType: TradeType! # Type of trade, either exact input or exact output\n  swapOptions: SwapOptions! # Swap configuration\n  gasOptions: GasOptions # Transaction gas configuration\n): Ethereum_TxResponse!\n")))}d.isMDXComponent=!0}}]);