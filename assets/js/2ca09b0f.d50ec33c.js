(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{194:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),c=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,p=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(r),b=n,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||p;return r?a.a.createElement(m,i(i({ref:t},s),{},{components:r})):a.a.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=r.length,o=new Array(p);o[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var s=2;s<p;s++)o[s]=r[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},94:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return p})),r.d(t,"metadata",(function(){return o})),r.d(t,"toc",(function(){return i})),r.d(t,"default",(function(){return s}));var n=r(3),a=(r(0),r(194));const p={id:"publish-to-ens",title:"Publish to ENS"},o={unversionedId:"tutorials/build-and-deploy-wasm-wrappers/publish-to-ens",id:"tutorials/build-and-deploy-wasm-wrappers/publish-to-ens",isDocsHomePage:!1,title:"Publish to ENS",description:"Once a wrapper is published to IPFS, it can optionally be given a domain via ENS. This allows developers integrating your wrapper to rely upon a human-readable & upgradeable URI. For example ens/v3.uniswap.polywrap.eth.",source:"@site/docs/tutorials/build-and-deploy-wasm-wrappers/publish-to-ens.md",slug:"/tutorials/build-and-deploy-wasm-wrappers/publish-to-ens",permalink:"/tutorials/build-and-deploy-wasm-wrappers/publish-to-ens",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/build-and-deploy-wasm-wrappers/publish-to-ens.md",version:"current",sidebar:"docs",previous:{title:"Deploy to IPFS",permalink:"/tutorials/build-and-deploy-wasm-wrappers/deploy-to-ipfs"},next:{title:"Configure Polywrap deployment pipeline",permalink:"/tutorials/build-and-deploy-wasm-wrappers/deploy-pipeline"}},i=[{value:"<code>polywrap</code> CLI",id:"polywrap-cli",children:[]},{value:"The ENS App",id:"the-ens-app",children:[]}],l={toc:i};function s(e){let{components:t,...r}=e;return Object(a.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Once a wrapper is published to IPFS, it can optionally be given a domain via ENS. This allows developers integrating your wrapper to rely upon a human-readable & upgradeable URI. For example ",Object(a.b)("inlineCode",{parentName:"p"},"ens/v3.uniswap.polywrap.eth"),"."),Object(a.b)("p",null,"There are multiple ways to publish your wrapper's IPFS hash to ENS:"),Object(a.b)("h2",{id:"polywrap-cli"},Object(a.b)("inlineCode",{parentName:"h2"},"polywrap")," CLI"),Object(a.b)("p",null,"The ",Object(a.b)("a",{parentName:"p",href:"../../reference/cli/polywrap-cli"},Object(a.b)("inlineCode",{parentName:"a"},"polywrap"))," command-line tool has a ",Object(a.b)("a",{parentName:"p",href:"../../reference/cli/commands/deploy"},Object(a.b)("inlineCode",{parentName:"a"},"deploy"))," command for publishing Wasm wrappers to IPFS and ENS. IPFS publishing is done via a ",Object(a.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/@nerfzael/wrap-persistence-node"},"wrap-persistence-node endpoint"),". By default it publishes to the public ",Object(a.b)("a",{parentName:"p",href:"https://ipfs.wrappers.io"},"https://ipfs.wrappers.io")," endpoint."),Object(a.b)("p",null,"For more information, see ",Object(a.b)("a",{parentName:"p",href:"./deploy-pipeline"},"Configure Polywrap deployment pipeline")," and the ",Object(a.b)("a",{parentName:"p",href:"../../reference/cli/commands/deploy"},Object(a.b)("inlineCode",{parentName:"a"},"deploy"))," command reference documentation."),Object(a.b)("h2",{id:"the-ens-app"},"The ENS App"),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"https://docs.ens.domains/"},"ENS App")," is a distributed, open, and extensible naming system based on the Ethereum blockchain."))}s.isMDXComponent=!0}}]);