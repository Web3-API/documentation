(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{168:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),u=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,d=p["".concat(l,".").concat(b)]||p[b]||m[b]||i;return n?r.a.createElement(d,o(o({ref:t},s),{},{components:n})):r.a.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},170:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},172:function(e,t,n){"use strict";var a=n(0),r=n(173);t.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},173:function(e,t,n){"use strict";var a=n(0),r=Object(a.createContext)(void 0);t.a=r},175:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(172),l=n(170),o=n(58),c=n.n(o);var s=37,u=39;t.a=function(e){var t=e.lazy,n=e.block,o=e.defaultValue,p=e.values,m=e.groupId,b=e.className,d=Object(i.a)(),h=d.tabGroupChoices,f=d.setTabGroupChoices,y=Object(a.useState)(o),g=y[0],w=y[1],O=a.Children.toArray(e.children),j=[];if(null!=m){var v=h[m];null!=v&&v!==g&&p.some((function(e){return e.value===v}))&&w(v)}var k=function(e){var t=e.target,n=j.indexOf(t),a=O[n].props.value;w(a),null!=m&&(f(m,a),setTimeout((function(){var e,n,a,r,i,l,o,s;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,i=e.right,l=window,o=l.innerHeight,s=l.innerWidth,n>=0&&i<=s&&r<=o&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(c.a.tabItemActive),setTimeout((function(){return t.classList.remove(c.a.tabItemActive)}),2e3))}),150))},N=function(e){var t,n;switch(e.keyCode){case u:var a=j.indexOf(e.target)+1;n=j[a]||j[0];break;case s:var r=j.indexOf(e.target)-1;n=j[r]||j[j.length-1]}null===(t=n)||void 0===t||t.focus()};return r.a.createElement("div",{className:"tabs-container"},r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":n},b)},p.map((function(e){var t=e.value,n=e.label;return r.a.createElement("li",{role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,className:Object(l.a)("tabs__item",c.a.tabItem,{"tabs__item--active":g===t}),key:t,ref:function(e){return j.push(e)},onKeyDown:N,onFocus:k,onClick:k},n)}))),t?Object(a.cloneElement)(O.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},O.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}},176:function(e,t,n){"use strict";var a=n(0),r=n.n(a);t.a=function(e){var t=e.children,n=e.hidden,a=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return u})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(8),i=(n(0),n(168)),l=n(175),o=n(176),c=["components"],s={id:"build-pipeline",title:"Configure Polywrap build pipeline"},u={unversionedId:"quick-start/build-and-deploy-wasm-wrappers/build-pipeline",id:"quick-start/build-and-deploy-wasm-wrappers/build-pipeline",isDocsHomePage:!1,title:"Configure Polywrap build pipeline",description:"In this section, we'll explore the Polywrap's build pipeline and how to configure it. This guide will help you understand the follow concepts:",source:"@site/docs/quick-start/build-and-deploy-wasm-wrappers/build-pipeline.md",slug:"/quick-start/build-and-deploy-wasm-wrappers/build-pipeline",permalink:"/quick-start/build-and-deploy-wasm-wrappers/build-pipeline",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/quick-start/build-and-deploy-wasm-wrappers/build-pipeline.md",version:"current",sidebar:"docs",previous:{title:"Configure Polywrap infrastructure pipeline",permalink:"/quick-start/test-wasm-wrappers/infra-pipeline"},next:{title:"Deploy to IPFS",permalink:"/quick-start/build-and-deploy-wasm-wrappers/deploy-to-ipfs"}},p=[{value:"<strong>Polywrap build pipeline</strong>",id:"polywrap-build-pipeline",children:[]},{value:"<strong>The YAML format</strong>",id:"the-yaml-format",children:[]},{value:"<strong>Minimal required schema</strong>",id:"minimal-required-schema",children:[]},{value:"<strong>Customizing the YAML build file</strong>",id:"customizing-the-yaml-build-file",children:[]},{value:"<strong>Customizing the Dockerfile</strong>",id:"customizing-the-dockerfile",children:[]}],m={toc:p};function b(e){var t=e.components,n=Object(r.a)(e,c);return Object(i.b)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this section, we'll explore the Polywrap's build pipeline and how to configure it. This guide will help you understand the follow concepts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Polywrap's build pipeline"),Object(i.b)("li",{parentName:"ul"},"The YAML format"),Object(i.b)("li",{parentName:"ul"},"Minimal required schema for the Polywrap YAML file"),Object(i.b)("li",{parentName:"ul"},"Customizing the build YAML file"),Object(i.b)("li",{parentName:"ul"},"Customizing the Dockerfile")),Object(i.b)("h2",{id:"polywrap-build-pipeline"},Object(i.b)("strong",{parentName:"h2"},"Polywrap build pipeline")),Object(i.b)("p",null,"The build process begins by running ",Object(i.b)("inlineCode",{parentName:"p"},"yarn build"),". The command will execute a series of functions that will search for the default manifest, graphql schemas, and Polywrap implementations, and then compile these files into a Docker image. While Polywrap's default is usable for many projects, the toolchain offers a highly configurable build pipeline for those who need more customization."),Object(i.b)("h2",{id:"the-yaml-format"},Object(i.b)("strong",{parentName:"h2"},"The YAML format")),Object(i.b)("p",null,"Polywrap package manifests are formatted in YAML. The YAML format was chosen because of its easy of human readability. If you're not familiar with the YAML syntax, you can learn the basics at ",Object(i.b)("a",{parentName:"p",href:"https://learnxinyminutes.com/docs/yaml/"},"Learn YAML in Y Minutes"),"."),Object(i.b)("h2",{id:"minimal-required-schema"},Object(i.b)("strong",{parentName:"h2"},"Minimal required schema")),Object(i.b)("p",null,'A package manifest must include a set of required items. This is represented by the minimal required schema shown below as well as an example showing the "default" manifest.'),Object(i.b)(l.a,{defaultValue:"schema",values:[{label:"Schema",value:"schema"},{label:"Example",value:"example"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"schema",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format:             # Polywrap YAML format version\nrepository:         # URL of Core toolchain repository\nlanguage:           # Language that will be compiled to Wasm\nschema:         # Path to graphql schema\nmodule:         # Path to Polywrap implementation\nimport_redirects:   # Redirects enabling the import of plugins\n  - uri:            # URI resolving to the plugin schema\n    schema:         # Graphql schema for imported plugin\n"))),Object(i.b)(o.a,{value:"example",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\nrepository: https://github.com/polywrap/monorepo\nlanguage: wasm/assemblyscript\nschema: ./src/schema.graphql\nmodule: ./src/index.ts\nimport_redirects:\n  - uri: wrap://wrap/logger\n    schema: ../../core-apis/logger/schema.graphql\n")))),Object(i.b)("h2",{id:"customizing-the-yaml-build-file"},Object(i.b)("strong",{parentName:"h2"},"Customizing the YAML build file")),Object(i.b)("p",null,"The manifest shown above does not require configuring the build process. When you run ",Object(i.b)("inlineCode",{parentName:"p"},"yarn build"),", the following default build YAML file is used:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\ndocker:\n  name: build-env\nconfig:\n  node_version: 14.16.0\n  include:\n    - ./src\n    - ./package.json\n")),Object(i.b)("p",null,"To customize the build, first create a new YAML file in the project's root directory and name it ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.build.yaml"),". Then, in the original YAML file, add a key called ",Object(i.b)("inlineCode",{parentName:"p"},"build")," with the path of the custom build YAML as the value."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\nrepository: https://github.com/polywrap/monorepo\nlanguage: wasm/assemblyscript\n//highlight-next-line\nbuild: ./polywrap.build.yaml\nschema: ./src/schema.graphql\nmodule: ./src/index.ts\nimport_redirects:\n  - uri: wrap://wrap/logger\n    schema: ../../core-apis/logger/schema.graphql\n")),Object(i.b)("p",null,"In the ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.build.yaml")," file, you could then customize your build. In the code below, you can see the schema as well as an example custom build YAML:"),Object(i.b)(l.a,{defaultValue:"schema",values:[{label:"Schema",value:"schema"},{label:"Example",value:"example"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"schema",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format:             # Polywrap YAML Format version\ndocker:             # Configure the name of Docker image\n  name:             # Name of the Docker image\nconfig:             # Build configuration\n  node_version:     # Node version\n  include:          # Files to include in build\n"))),Object(i.b)(o.a,{value:"example",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\ndocker:\n  name: build-env\nconfig:\n  node_version: '14.16.0'\n  include:\n    - ./package.json\n    - ./src/utils\n")))),Object(i.b)("h2",{id:"customizing-the-dockerfile"},Object(i.b)("strong",{parentName:"h2"},"Customizing the Dockerfile")),Object(i.b)("p",null,"For those who need even more customization of the build pipeline, Polywrap allows for customizing the Dockerfile. The Dockerfile is a text file containing instructions for Docker to build images. You can learn more about it at ",Object(i.b)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/"},"Docker's documentation"),"."),Object(i.b)("p",null,"In the context of Polywrap, it allows you to fully customize your Docker image build steps. To customize your Dockerfile, first, either copy the default Dockerfile from the ",Object(i.b)("inlineCode",{parentName:"p"},"/build")," folder or create your own."),Object(i.b)("p",null,"Then, in the ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.build.yaml")," file, add a key called ",Object(i.b)("inlineCode",{parentName:"p"},"dockerfile")," with the path of the newly created Dockerfile as the value. That's it! Now, you can customize the Dockerfile to your heart's content."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\ndocker:\n  name: build-env\n  dockerfile: ./Dockerfile\n")),Object(i.b)("p",null,"You can also name your custom Dockerfile with a mustache file extension like so ",Object(i.b)("inlineCode",{parentName:"p"},"Dockerfile.mustache"),", which would enable Mustache capabilities for your Dockerfile. Mustache is a logic-less template system that can be used for HTML, config files, and more. Learn more about Mustache ",Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/mustache"},"here"),"."),Object(i.b)("p",null,"With Mustache, your Dockerfile will be able to recognize variable tags set by the ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.build.yaml")," file. For example, in your ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.build.yaml")," file, you could have a key such as ",Object(i.b)("inlineCode",{parentName:"p"},"foo")," with the value ",Object(i.b)("inlineCode",{parentName:"p"},"hey")," like so:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\ndocker:\n  name: build-env\n  dockerfile: ./Dockerfile.mustache\nconfig:\n  foo: hey\n")),Object(i.b)("p",null,"To use this variable in your Mustache-enabled Dockerfile, simply use curly braces like so:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dockerfile"},"{{ foo }}\n")))}b.isMDXComponent=!0}}]);