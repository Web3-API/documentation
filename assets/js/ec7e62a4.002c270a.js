"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[6359],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,g=c["".concat(i,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),a=n(6010);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>k});var r=n(7462),a=n(7294),o=n(6010),s=n(2466),l=n(6550),i=n(1980),u=n(7392),p=n(12);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[i,u]=g({queryString:n,groupId:r}),[c,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),y=(()=>{const e=i??c;return m({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{y&&l(y)}),[y]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,o]),tabValues:o}}var y=n(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),r=u[n].value;r!==l&&(c(t),i(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},s,{className:(0,o.Z)("tabs__item",h.tabItem,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=f(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",h.tabList)},a.createElement(w,(0,r.Z)({},e,t)),a.createElement(b,(0,r.Z)({},e,t)))}function k(e){const t=(0,y.Z)();return a.createElement(v,(0,r.Z)({key:String(t)},e))}},8805:(e,t,n)=>{n.d(t,{f:()=>o});var r=n(9960),a=n(7294);const o=e=>a.createElement(r.Z,{to:e.to},a.createElement("button",{className:"tutorial-nav-button"},e.text," \u2794"))},7542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>w,frontMatter:()=>c,metadata:()=>m,toc:()=>f});var r=n(7462),a=(n(7294),n(3905)),o=n(4866),s=n(5162),l=n(8805);const i={toc:[]},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{groupId:"integration-tests",mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=tests/it/module.rs",title:"tests/it/module.rs"},'use crate::types::wrap::types::{\n    Oracle,\n    OracleArgsObscure,\n    OracleArgsEnlighten\n};\nuse std::env;\n\n#[test]\nfn obscure() {\n    let args = OracleArgsObscure {\n        data: vec![String::from("Hello"), String::from("World")],\n        chaos_level: Some(3)\n    };\n    let oracle: Oracle = Oracle::new(None);\n    let result = oracle.obscure(&args, None).unwrap();\n    assert_eq!(result.len(), 128);\n}\n\n#[test]\nfn enlighten() {\n    let args = OracleArgsEnlighten {\n        question: String::from("What is the meaning of life?"),\n        api_key: env::var("PPLX_API_KEY").expect("API_KEY must be set")\n    };\n    let oracle: Oracle = Oracle::new(None);\n    let result = oracle.enlighten(&args, None).unwrap();\n    assert_ne!(result.len(), 0);\n}\n'))),(0,a.kt)(s.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/__tests__/e2e/integration.spec.ts",title:"src/__tests__/e2e/integration.spec.ts"},'import * as App from "../types/wrap";\nimport path from "path";\n\njest.setTimeout(60000);\n\ndescribe("Oracle Wrap End to End Tests", () => {\n\n  let oracle: App.Oracle;\n  let wrapperUri: string;\n  let apiKey: string = process.env.PPLX_API_KEY || "";\n\n  beforeAll(() => {\n    const wrapperPath: string = path.join(__dirname, "..", "..", "..");\n    wrapperUri = `fs/${wrapperPath}/build`;\n    oracle = new App.Oracle(undefined, undefined, wrapperUri)\n  })\n\n  it("calls obscure", async () => {\n    const result = await oracle.obscure({\n      data: ["Hello", "World"],\n      chaosLevel: 3\n    });\n\n    if (!result.ok) throw result.error;\n    expect(typeof result.value === "string").toBeTruthy();\n    expect(result.value.length).toEqual(128);\n  });\n\n  it("calls enlighten", async () => {\n    const question = "What is the meaning of life?";\n    const result = await oracle.enlighten({ question, apiKey });\n\n    if (!result.ok) throw result.error;\n    expect(typeof result.value === "string").toBeTruthy();\n  });\n});\n')))))}p.isMDXComponent=!0;const c={id:"integration-testing",title:"Integration Testing"},d=void 0,m={unversionedId:"tutorials/create-wraps/part-one/integration-testing",id:"tutorials/create-wraps/part-one/integration-testing",title:"Integration Testing",description:"You're reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.",source:"@site/docs/tutorials/create-wraps/part-one/integration-testing.mdx",sourceDirName:"tutorials/create-wraps/part-one",slug:"/tutorials/create-wraps/part-one/integration-testing",permalink:"/tutorials/create-wraps/part-one/integration-testing",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/create-wraps/part-one/integration-testing.mdx",tags:[],version:"current",frontMatter:{id:"integration-testing",title:"Integration Testing"},sidebar:"docs",previous:{title:"Interfaces and Plugins",permalink:"/tutorials/create-wraps/part-one/interfaces-and-plugins"},next:{title:"Deployment",permalink:"/tutorials/create-wraps/part-one/deployment"}},g={},f=[{value:"<strong>Why integration tests?</strong>",id:"why-integration-tests",level:2},{value:"<strong>App Codegen</strong>",id:"app-codegen",level:2},{value:"<strong>Write Tests</strong>",id:"write-tests",level:2},{value:"<strong>Next Steps</strong>",id:"next-steps",level:2}],y={toc:f},h="wrapper";function w(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You're reading Part One of the ",(0,a.kt)("a",{parentName:"p",href:"../introduction"},"Create Wraps")," tutorial, where we learn everything you need to know to productively develop Polywrap wraps.")),(0,a.kt)("p",null,"We're going to write some integration tests for our wrap to make sure our wrap works as expected in an environment that resembles the one in which it will be used."),(0,a.kt)("h2",{id:"why-integration-tests"},(0,a.kt)("strong",{parentName:"h2"},"Why integration tests?")),(0,a.kt)("p",null,'Here we will define an "integration test" as an end-to-end tests that validates the functionality of your wrap by invoking it from a Polywrap Client. This is in contrast to a "unit test", which you might use to test the functionality of specific wrap methods in isolation.'),(0,a.kt)("p",null,"We write integration tests because certain wrap functionalities depend on the Polywrap Client. The most obvious example is subinvocation. When a wrap invokes a method in another wrap, the method arguments are serialized, sent back to the Polywrap Client, and routed to the other wrap. The Polywrap Client is required to coordinate the interaction."),(0,a.kt)("p",null,"A downside of integration testing is that we don't have Polywrap Client for every programming language for which we can write wraps. If you're writing your wrap in Go or AssemblyScript, we assume you'll be okay with testing using the TypeScript Polywrap client."),(0,a.kt)("p",null,"We also support a language-agnostic approach to integration testing that we call ",(0,a.kt)("a",{parentName:"p",href:"tutorials/advanced/workflows/running-workflows"},"Workflows"),". Workflows are a way to define a sequence of steps that can be executed by any Polywrap Client. The output of workflow jobs can be validated to ensure that the wrap is functioning as expected. We won't be using workflows in this tutorial."),(0,a.kt)("h2",{id:"app-codegen"},(0,a.kt)("strong",{parentName:"h2"},"App Codegen")),(0,a.kt)("p",null,"Codegen will generate different bindings for different types of projects. For integration tests, we use the codegen targeting application developers because they make testing easier and more closely replicate the wrap's end user experience. App codegen is not required--a Polywrap Client can invoke any wrap without codegen--but it's recommended."),(0,a.kt)("p",null,"To execute app codegen without changing our ",(0,a.kt)("inlineCode",{parentName:"p"},"polywrap.yaml"),' project manifest or wrap schema, we can simply create another manifest and schema for the purpose of testing and pass them into the codegen command. I changed the namespace of my wrap import in the test schema to "Oracle" so I can refer to it as ',(0,a.kt)("inlineCode",{parentName:"p"},"Oracle")," in my tests."),(0,a.kt)(o.Z,{groupId:"project",mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap codegen -m ./tests/types/polywrap.app.yaml -g ./tests/types/wrap\n"))),(0,a.kt)(s.Z,{value:"golang",label:"Go",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap codegen -m ./module/__tests__/types/polywrap.app.yaml -g ./module/__tests__/types/wrap\n"))),(0,a.kt)(s.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap codegen -m ./src/__tests__/types/polywrap.app.yaml -g ./src/__tests__/types/wrap\n"))),(0,a.kt)(s.Z,{value:"assemblyscript",label:"AssemblyScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap codegen -m ./src/__tests__/types/polywrap.app.yaml -g ./src/__tests__/types/wrap\n")))),(0,a.kt)("h2",{id:"write-tests"},(0,a.kt)("strong",{parentName:"h2"},"Write Tests")),(0,a.kt)("p",null,"With app codegen, integration tests are easy to write."),(0,a.kt)("p",null,"For Rust wraps, we'll write our integration tests in Rust using the Rust Polywrap Client. For wraps written in other languages, we'll write our tests in TypeScript."),(0,a.kt)("p",null,"We'll invoke our wrap using a file-system Wrap URI."),(0,a.kt)("p",null,"In your test file, you can import the module class generated with app codegen. We'll use the default Polywrap Client configuration, so we won't need to pass one in as an argument to the module constructor. The module instance can be used to invoke the methods defined in your wrap schema with type safety."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can use my personal API key to test your wrap."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"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")),(0,a.kt)("p",{parentName:"admonition"},"Please do not use it outside the context of this tutorial. If it's abused, I'll have to revoke it!")),(0,a.kt)(p,{mdxType:"IntegrationTests"}),(0,a.kt)("h2",{id:"next-steps"},(0,a.kt)("strong",{parentName:"h2"},"Next Steps")),(0,a.kt)("p",null,"In the final part of the tutorial, we'll learn how to publish a wrap."),(0,a.kt)(l.f,{to:"./deployment",text:"Deployment",mdxType:"NavButton"}))}w.isMDXComponent=!0}}]);