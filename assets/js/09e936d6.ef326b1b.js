(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{163:function(e,t,n){"use strict";n.d(t,"a",(function(){return f})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},f=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(n),d=a,m=f["".concat(o,".").concat(d)]||f[d]||u[d]||i;return n?r.a.createElement(m,c(c({ref:t},p),{},{components:n})):r.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return f}));var a=n(3),r=n(8),i=(n(0),n(163)),o=["components"],c={id:"get-wrapper-metadata",title:"Get Wrapper Metadata"},s={unversionedId:"quick-start/create-js-app/get-wrapper-metadata",id:"quick-start/create-js-app/get-wrapper-metadata",isDocsHomePage:!1,title:"Get Wrapper Metadata",description:"Some application developers may be interested adding or retrieving wrapper metadata.",source:"@site/docs/quick-start/create-js-app/get-wrapper-metadata.md",slug:"/quick-start/create-js-app/get-wrapper-metadata",permalink:"/quick-start/create-js-app/get-wrapper-metadata",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/quick-start/create-js-app/get-wrapper-metadata.md",version:"current",sidebar:"docs",previous:{title:"React integration",permalink:"/quick-start/create-js-app/react-integration"},next:{title:"Project setup",permalink:"/quick-start/create-wasm-wrappers/project-setup"}},p=[],l={toc:p};function f(e){var t=e.components,n=Object(r.a)(e,o);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Some application developers may be interested adding or retrieving wrapper metadata.\nWrapper developers can add metadata to their wrappers by writing a Meta Manifest file.\nApplication developers can obtain the Meta Manifest as an object or class in the client's native language."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'const manifestString = await client.getFile(uri, { path: "./polywrap.meta.json", encoding: "utf-8" }) as string;\nconst manifest: MetaManifest = JSON.parse(manifestString);\n')),Object(i.b)("p",null,"More information about the contents of the Meta Manifest can be found in ",Object(i.b)("a",{parentName:"p",href:"../create-wasm-wrappers/adding-metadata"},"Adding Metadata"),"."),Object(i.b)("p",null,"To obtain icons from paths listed in a wrapper's Meta Manifest, use ",Object(i.b)("inlineCode",{parentName:"p"},"getFile"),".\nThe return type of ",Object(i.b)("inlineCode",{parentName:"p"},"getFile")," will be a string if the ",Object(i.b)("inlineCode",{parentName:"p"},"encoding")," option is used, and an ArrayBuffer otherwise."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'const isBuffer = await client.getFile(uri, { path: manifest.icon });\nconst isString = await client.getFile(uri, { path: manifest.icon, encoding: "utf-8" });\n')),Object(i.b)("p",null,"We wrote a React app to demo fetching and displaying wrapper metadata.\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/polywrap/demos/tree/main/fetch-metadata"},"You can view the source code here"),"."),Object(i.b)("p",null,"The following function was pulled directly from the demo.\nIt can be viewed ",Object(i.b)("a",{parentName:"p",href:"https://github.com/polywrap/demos/blob/main/fetch-metadata/src/components/FetchMetadata/FetchMetadata.tsx#L82"},"here"),".\nThe function fetches wrapper metadata from a URI that is declared and assigned in a higher scope.\nThe wrapper Meta Manifest is used as input to the setManifest function to update the application's state.\nA similar approach is used for images that are fetched from the URI based on paths referenced in the Meta Manifest."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example: fetching a Meta Manifest in a TypeScript web application"',title:'"Example:',fetching:!0,a:!0,Meta:!0,Manifest:!0,in:!0,TypeScript:!0,web:!0,'application"':!0},'const fetchHandler = async (event: FormEvent<HTMLFormElement>): Promise<void> => {\n  event.preventDefault();\n  if (!uri) {\n    return;\n  }\n  if (!Uri.isValidUri(uri)) {\n    setManifest({\n      format: "0.0.1-prealpha.3",\n      displayName: "Invalid URI",\n      subtext: "Need help? Check out our docs using the link in the header.",\n      __type: "MetaManifest",\n    })\n    return;\n  }\n\n  let manifest: MetaManifest | undefined;\n  try {\n    // highlight-next-line\n    manifest = await client.getManifest(uri, {type: "meta"});\n    setManifest(manifest);\n  } catch (e: any) {\n    if (e.message.includes("File was not found.")) {\n      setManifest({\n        format: "0.0.1-prealpha.3",\n        displayName: "File not found",\n        subtext: "Metadata is optional. Does the wrapper declare a Meta Manifest?",\n        __type: "MetaManifest",\n      })\n    } else {\n      setManifest({\n        format: "0.0.1-prealpha.3",\n        displayName: "Failed to resolve URI",\n        subtext: "We didn\'t find a wrapper at that URI, or didn\'t receive a response from the host.",\n        __type: "MetaManifest",\n      })\n    }\n    setIcons({});\n    return;\n  }\n\n  const icons: Record<string, string> = {};\n  if (manifest.icon) {\n    try {\n      // highlight-next-line\n      const imageBuffer: ArrayBuffer = await client.getFile(uri, { path: manifest.icon }) as ArrayBuffer;\n      icons[manifest.icon] = Buffer.from(imageBuffer).toString("base64");\n    } catch (e: any) {\n      console.log(e.message);\n    }\n  }\n\n  if (manifest.links) {\n    for (const link of manifest.links) {\n      if (link.icon) {\n        try {\n          // highlight-next-line\n          const imageBuffer: ArrayBuffer = await client.getFile(uri, { path: link.icon }) as ArrayBuffer;\n          icons[link.icon] = Buffer.from(imageBuffer).toString("base64");\n        } catch (e: any) {\n          console.log(e.message);\n        }\n      }\n    }\n  }\n  setIcons(icons);\n};\n')))}f.isMDXComponent=!0}}]);