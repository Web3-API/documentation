"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[5579],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>f});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=t.createContext({}),s=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},p=function(e){var n=s(e.components);return t.createElement(o.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=s(r),m=i,f=u["".concat(o,".").concat(m)]||u[m]||c[m]||a;return r?t.createElement(f,l(l({ref:n},p),{},{components:r})):t.createElement(f,l({ref:n},p))}));function f(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=m;var d={};for(var o in n)hasOwnProperty.call(n,o)&&(d[o]=n[o]);d.originalType=e,d[u]="string"==typeof e?e:i,l[1]=d;for(var s=2;s<a;s++)l[s]=r[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1804:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var t=r(7462),i=(r(7294),r(3905));const a={id:"client-config-builder-js",hide_title:!0},l="PolywrapClient Config Builder",d={unversionedId:"reference/clients/js/client-config-builder-js",id:"reference/clients/js/client-config-builder-js",title:"PolywrapClient Config Builder",description:"A utility class for building the PolywrapClient config.",source:"@site/docs/reference/clients/js/client-config-builder-js.md",sourceDirName:"reference/clients/js",slug:"/reference/clients/js/client-config-builder-js",permalink:"/reference/clients/js/client-config-builder-js",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/clients/js/client-config-builder-js.md",tags:[],version:"current",frontMatter:{id:"client-config-builder-js",hide_title:!0},sidebar:"docs",previous:{title:"@polywrap/client-js",permalink:"/reference/clients/js/client-js"},next:{title:"@polywrap/asyncify-js",permalink:"/reference/clients/js/libraries/asyncify-js"}},o={},s=[{value:"Quickstart",id:"quickstart",level:2},{value:"Initialize",id:"initialize",level:3},{value:"Configure",id:"configure",level:3},{value:"Build",id:"build",level:3},{value:"Example",id:"example",level:3},{value:"ClientConfigBuilder",id:"clientconfigbuilder",level:2},{value:"Constructor",id:"constructor",level:3},{value:"add",id:"add",level:3},{value:"addWrapper",id:"addwrapper",level:3},{value:"addWrappers",id:"addwrappers",level:3},{value:"removeWrapper",id:"removewrapper",level:3},{value:"addPackage",id:"addpackage",level:3},{value:"addPackages",id:"addpackages",level:3},{value:"removePackage",id:"removepackage",level:3},{value:"addEnv",id:"addenv",level:3},{value:"addEnvs",id:"addenvs",level:3},{value:"removeEnv",id:"removeenv",level:3},{value:"setEnv",id:"setenv",level:3},{value:"addInterfaceImplementation",id:"addinterfaceimplementation",level:3},{value:"addInterfaceImplementations",id:"addinterfaceimplementations",level:3},{value:"removeInterfaceImplementation",id:"removeinterfaceimplementation",level:3},{value:"addRedirect",id:"addredirect",level:3},{value:"addRedirects",id:"addredirects",level:3},{value:"removeRedirect",id:"removeredirect",level:3},{value:"addResolver",id:"addresolver",level:3},{value:"addResolvers",id:"addresolvers",level:3},{value:"addDefaults",id:"adddefaults",level:3},{value:"build",id:"build-1",level:3},{value:"Bundles",id:"bundles",level:2},{value:"Bundle: DefaultConfig",id:"bundle-defaultconfig",level:3}],p={toc:s},u="wrapper";function c(e){let{components:n,...r}=e;return(0,i.kt)(u,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"polywrapclient-config-builder"},"PolywrapClient Config Builder"),(0,i.kt)("p",null,"A utility class for building the PolywrapClient config. "),(0,i.kt)("p",null,"Supports building configs using method chaining or imperatively."),(0,i.kt)("h2",{id:"quickstart"},"Quickstart"),(0,i.kt)("h3",{id:"initialize"},"Initialize"),(0,i.kt)("p",null,"Initialize a ClientConfigBuilder using the ",(0,i.kt)("a",{parentName:"p",href:"#constructor"},"constructor")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"  // start with a blank slate (typical usage)\n  const builder = new ClientConfigBuilder();\n")),(0,i.kt)("h3",{id:"configure"},"Configure"),(0,i.kt)("p",null,"Add client configuration with ",(0,i.kt)("a",{parentName:"p",href:"#add"},"add"),", or flexibly mix and match builder ",(0,i.kt)("a",{parentName:"p",href:"#addwrapper"},"configuration methods")," to add and remove configuration items."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'  // add multiple items to the configuration using the catch-all `add` method\n  builder.add({\n    envs: {},\n    interfaces: {},\n    redirects: {},\n    wrappers: {},\n    packages: {},\n    resolvers: [],\n  });\n\n  // add or remove items by chaining method calls\n  builder\n    .addPackage("wrap://plugin/package", httpPlugin({}))\n    .removePackage("wrap://plugin/package")\n    .addPackages({\n      "wrap://plugin/http": httpPlugin({}),\n      "wrap://plugin/filesystem": fileSystemPlugin({}),\n    });\n')),(0,i.kt)("p",null,"You can add the entire ",(0,i.kt)("a",{parentName:"p",href:"#bundle--defaultconfig"},"default client configuration bundle")," at once with ",(0,i.kt)("a",{parentName:"p",href:"#adddefaults"},"addDefaults")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"  builder.addDefaults();\n")),(0,i.kt)("h3",{id:"build"},"Build"),(0,i.kt)("p",null,"Finally, build a ClientConfig or CoreClientConfig to pass to the PolywrapClient constructor."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"  // accepted by either the PolywrapClient or the PolywrapCoreClient\n  let coreClientConfig = builder.build();\n\n  // build with a custom cache\n  coreClientConfig = builder.build({\n    resolutionResultCache: new ResolutionResultCache(),\n  });\n\n  // or build with a custom resolver\n  coreClientConfig = builder.build({\n    resolver: RecursiveResolver.from([]),\n  });\n")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"A complete example using all or most of the available methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript="},'  // init\n  const builder = new ClientConfigBuilder();\n\n  // add the default bundle first to override its entries later\n  builder.addDefaults();\n\n  // add many config items at once\n  builder.add({\n    envs: {},\n    interfaces: {},\n    redirects: {},\n    wrappers: {},\n    packages: {},\n    resolvers: [],\n  });\n\n  // add and remove wrappers\n  builder\n    .addWrapper(\n      "wrap://ens/wrapper.eth",\n      await WasmWrapper.from(\n        new Uint8Array([1, 2, 3]),\n        new Uint8Array([1, 2, 3])\n      )\n    )\n    .removeWrapper("wrap://ens/wrapper.eth")\n    .addWrappers({\n      "wrap://ens/wrapper.eth": await WasmWrapper.from(\n        new Uint8Array([1, 2, 3]),\n        new Uint8Array([1, 2, 3])\n      ),\n    });\n\n  // add and remove wrap packages\n  builder\n    .addPackage("wrap://plugin/package", httpPlugin({}))\n    .removePackage("wrap://plugin/package")\n    .addPackages({\n      "wrap://plugin/package": httpPlugin({}),\n    });\n\n  // add and remove Envs\n  builder\n    .addEnv("wrap://ens/wrapper.eth", { key: "value" })\n    .removeEnv("wrap://ens/wrapper.eth")\n    .addEnvs({\n      "wrap://ens/wrapper.eth": { key: "value" },\n    });\n\n  // override existing Env, or add new Env if one is not registered at URI\n  builder.setEnv("wrap://ens/wrapper.eth", { key: "value" });\n\n  // add or remove registration for an implementation of an interface\n  builder\n    .addInterfaceImplementation(\n      "wrap://ens/interface.eth",\n      "wrap://ens/wrapper.eth"\n    )\n    .removeInterfaceImplementation(\n      "wrap://ens/interface.eth",\n      "wrap://ens/wrapper.eth"\n    )\n    .addInterfaceImplementations("wrap://ens/interface.eth", [\n      "wrap://ens/wrapper.eth",\n    ]);\n\n  // add or remove URI redirects\n  builder\n    .addRedirect("wrap://ens/from.eth", "wrap://ens/to.eth")\n    .removeRedirect("wrap://ens/from.eth")\n    .addRedirects({\n      "wrap://ens/from.eth": "wrap://ens/to.eth",\n    });\n\n  // add resolvers\n  builder.addResolver(RecursiveResolver.from([]));\n  builder.addResolvers([]);\n\n  // build\n  const clientConfig = builder.build();\n')),(0,i.kt)("h1",{id:"reference"},"Reference"),(0,i.kt)("h2",{id:"clientconfigbuilder"},"ClientConfigBuilder"),(0,i.kt)("h3",{id:"constructor"},"Constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Instantiate a ClientConfigBuilder\n   */\n  constructor() \n")),(0,i.kt)("h3",{id:"add"},"add"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add a partial BuilderConfig\n   * This is equivalent to calling each of the plural add functions: `addEnvs`, `addWrappers`, etc.\n   *\n   * @param config: a partial BuilderConfig\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  add(config: Partial<BuilderConfig>): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addwrapper"},"addWrapper"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add an embedded wrapper\n   *\n   * @param uri: uri of wrapper\n   * @param wrapper: wrapper to be added\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addWrapper(uri: string, wrapper: Wrapper): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addwrappers"},"addWrappers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add one or more embedded wrappers.\n   * This is equivalent to calling addWrapper for each wrapper.\n   *\n   * @param uriWrappers: an object where keys are uris and wrappers are value\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addWrappers(uriWrappers: Record<string, Wrapper>): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"removewrapper"},"removeWrapper"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Remove an embedded wrapper\n   *\n   * @param uri: the wrapper's URI\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  removeWrapper(uri: string): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addpackage"},"addPackage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add an embedded wrap package\n   *\n   * @param uri: uri of wrapper\n   * @param wrapPackage: package to be added\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addPackage(uri: string, wrapPackage: IWrapPackage): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addpackages"},"addPackages"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add one or more embedded wrap packages\n   * This is equivalent to calling addPackage for each package\n   *\n   * @param uriPackages: an object where keys are uris and packages are value\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addPackages(uriPackages: Record<string, IWrapPackage>): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"removepackage"},"removePackage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Remove an embedded wrap package\n   *\n   * @param uri: the package's URI\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  removePackage(uri: string): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addenv"},"addEnv"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add an Env.\n   * If an Env is already associated with the uri, it is modified.\n   *\n   * @param uri: the wrapper's URI to associate with the Env\n   * @param env: an object with the env variables for the uri\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addEnv(uri: string, env: Record<string, unknown>): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addenvs"},"addEnvs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add one or more Envs\n   * This is equivalent to calling addEnv for each Env\n   *\n   * @param uriEnvs: and object where key is the uri and value is the another object with the env variables for the uri\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addEnvs(\n    uriEnvs: Record<string, Record<string, unknown>>\n  ): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"removeenv"},"removeEnv"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Remove an Env\n   *\n   * @param uri: the URI associated with the Env\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  removeEnv(uri: string): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"setenv"},"setEnv"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add an Env.\n   * If an Env is already associated with the uri, it is replaced.\n   *\n   * @param uri: the wrapper's URI to associate with the Env\n   * @param env: an object with the environment variables for the uri\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  setEnv(uri: string, env: Record<string, unknown>): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addinterfaceimplementation"},"addInterfaceImplementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Register an implementation of a single interface\n   *\n   * @param interfaceUri: the URI of the interface\n   * @param implementationUri: the URI of the implementation\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addInterfaceImplementation(\n    interfaceUri: string,\n    implementationUri: string\n  ): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addinterfaceimplementations"},"addInterfaceImplementations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Register one or more implementation of a single interface\n   *\n   * @param interfaceUri: the URI of the interface\n   * @param implementationUris: a list of URIs for the implementations\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addInterfaceImplementations(\n    interfaceUri: string,\n    implementationUris: Array<string>\n  ): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"removeinterfaceimplementation"},"removeInterfaceImplementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Remove an implementation of a single interface\n   *\n   * @param interfaceUri: the URI of the interface\n   * @param implementationUri: the URI of the implementation\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  removeInterfaceImplementation(\n    interfaceUri: string,\n    implementationUri: string\n  ): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addredirect"},"addRedirect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add a redirect from one URI to another\n   *\n   * @param from: the URI to redirect from\n   * @param to: the URI to redirect to\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addRedirect(from: string, to: string): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addredirects"},"addRedirects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add an array of URI redirects\n   *\n   * @param redirects: an object where key is from and value is to\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addRedirects(redirects: Record<string, string>): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"removeredirect"},"removeRedirect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Remove a URI redirect\n   *\n   * @param from: the URI that is being redirected\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  removeRedirect(from: string): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addresolver"},"addResolver"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add a URI Resolver, capable of resolving a URI to a wrapper\n   *\n   * @remarks\n   * A UriResolverLike can be any one of:\n   *     IUriResolver<unknown>\n   *   | IUriRedirect<string>\n   *   | IUriPackage<string>\n   *   | IUriWrapper<string>\n   *   | UriResolverLike[];\n   *\n   * @param resolver: A UriResolverLike\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addResolver(resolver: UriResolverLike): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"addresolvers"},"addResolvers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add one or more URI Resolvers, capable of resolving URIs to wrappers\n   *\n   * @remarks\n   * A UriResolverLike can be any one of:\n   *     IUriResolver<unknown>\n   *   | IUriRedirect<string>\n   *   | IUriPackage<string>\n   *   | IUriWrapper<string>\n   *   | UriResolverLike[];\n   *\n   * @param resolvers: A list of UriResolverLike\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addResolvers(resolvers: UriResolverLike[]): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"adddefaults"},"addDefaults"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Add the default configuration bundle\n   *\n   * @returns IClientConfigBuilder (mutated self)\n   */\n  addDefaults(): IClientConfigBuilder;\n")),(0,i.kt)("h3",{id:"build-1"},"build"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Build a sanitized core client configuration that can be passed to the PolywrapClient or PolywrapCoreClient constructors\n   *\n   * @param options - Use a custom wrapper cache or resolver\n   * @returns CoreClientConfig that results from applying all the steps in the builder pipeline\n   */\n  build(options?: BuildOptions): CoreClientConfig;\n")),(0,i.kt)("h2",{id:"bundles"},"Bundles"),(0,i.kt)("h3",{id:"bundle-defaultconfig"},"Bundle: DefaultConfig"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export const ipfsProviders: string[] = [\n  "https://ipfs.wrappers.io",\n  "https://ipfs.io",\n];\n\ninterface IDefaultEmbed {\n  uri: Uri;\n  package: IWrapPackage;\n  source: Uri;\n}\n\ninterface IDefaultEmbeds {\n  ipfsHttpClient: IDefaultEmbed;\n  ipfsResolver: IDefaultEmbed;\n}\n\nexport const embeds: IDefaultEmbeds = {\n  ipfsHttpClient: {\n    uri: Uri.from("embed/ipfs-http-client@1.0.0"),\n    package: ipfsHttpClient.wasmPackage,\n    source: Uri.from("ens/wraps.eth:ipfs-http-client@1.0.0"),\n  },\n  ipfsResolver: {\n    uri: Uri.from("embed/async-ipfs-uri-resolver-ext@1.0.1"),\n    package: ipfsResolver.wasmPackage,\n    source: Uri.from("ens/wraps.eth:async-ipfs-uri-resolver-ext@1.0.1"),\n  },\n};\n\ntype UriResolverExtBootloader = [IDefaultEmbed, IUriRedirect, ...Uri[]];\n\nexport const uriResolverExts: UriResolverExtBootloader = [\n  embeds.ipfsResolver,\n  {\n    from: Uri.from("ens/wraps.eth:ens-text-record-uri-resolver-ext@1.0.1"),\n    to: Uri.from("ipfs/QmXcHWtKkfrFmcczdMSXH7udsSyV3UJeoWzkaUqGBm1oYs"),\n  },\n  Uri.from("ens/wraps.eth:http-uri-resolver-ext@1.0.1"),\n  Uri.from("ens/wraps.eth:file-system-uri-resolver-ext@1.0.1"),\n  Uri.from("ens/wraps.eth:ens-uri-resolver-ext@1.0.1"),\n  Uri.from("ens/wraps.eth:ens-ipfs-contenthash-uri-resolver-ext@1.0.1"),\n];\n\ninterface IDefaultPlugin {\n  uri: Uri;\n  plugin: IWrapPackage;\n  implements: Uri[];\n}\n\ninterface IDefaultPlugins {\n  logger: IDefaultPlugin;\n  http: IDefaultPlugin;\n  fileSystem: IDefaultPlugin;\n  concurrent: IDefaultPlugin;\n  ethereumProviderV1: IDefaultPlugin;\n  ethereumProviderV2: IDefaultPlugin;\n}\n\nexport const plugins: IDefaultPlugins = {\n  logger: {\n    uri: Uri.from("plugin/logger@1.0.0"),\n    plugin: loggerPlugin({}),\n    implements: [Uri.from("ens/wraps.eth:logger@1.0.0")],\n  },\n  http: {\n    uri: Uri.from("plugin/http@1.1.0"),\n    plugin: httpPlugin({}),\n    implements: [\n      Uri.from("ens/wraps.eth:http@1.1.0"),\n      Uri.from("ens/wraps.eth:http@1.0.0"),\n    ],\n  },\n  fileSystem: {\n    uri: Uri.from("plugin/file-system@1.0.0"),\n    plugin: fileSystemPlugin({}),\n    implements: [Uri.from("ens/wraps.eth:file-system@1.0.0")],\n  },\n  concurrent: {\n    uri: Uri.from("plugin/concurrent@1.0.0"),\n    plugin: concurrentPromisePlugin({}),\n    implements: [Uri.from("ens/wraps.eth:concurrent@1.0.0")],\n  },\n  ethereumProviderV1: {\n    uri: Uri.from("plugin/ethereum-provider@1.1.0"),\n    plugin: EthProviderV1.plugin({\n      connections: new EthProviderV1.Connections({\n        networks: {\n          mainnet: new EthProviderV1.Connection({\n            provider:\n              "https://mainnet.infura.io/v3/b00b2c2cc09c487685e9fb061256d6a6",\n          }),\n          goerli: new EthProviderV1.Connection({\n            provider:\n              "https://goerli.infura.io/v3/b00b2c2cc09c487685e9fb061256d6a6",\n          }),\n        },\n      }),\n    }),\n    implements: [\n      Uri.from("ens/wraps.eth:ethereum-provider@1.1.0"),\n      Uri.from("ens/wraps.eth:ethereum-provider@1.0.0"),\n    ],\n  },\n  ethereumProviderV2: {\n    uri: Uri.from("plugin/ethereum-provider@2.0.0"),\n    plugin: EthProvider.plugin({\n      connections: new EthProvider.Connections({\n        networks: {\n          mainnet: new EthProvider.Connection({\n            provider:\n              "https://mainnet.infura.io/v3/b00b2c2cc09c487685e9fb061256d6a6",\n          }),\n          goerli: new EthProvider.Connection({\n            provider:\n              "https://goerli.infura.io/v3/b00b2c2cc09c487685e9fb061256d6a6",\n          }),\n        },\n      }),\n    }),\n    implements: [Uri.from("ens/wraps.eth:ethereum-provider@2.0.0")],\n  },\n};\n\nexport function getConfig(): BuilderConfig {\n  const builder = new ClientConfigBuilder();\n\n  // Add all embedded packages\n  for (const embed of Object.values(embeds)) {\n    builder.addPackage(embed.uri.uri, embed.package);\n\n    // Add source redirect\n    builder.addRedirect(embed.source.uri, embed.uri.uri);\n\n    // Add source implementation\n    builder.addInterfaceImplementation(embed.source.uri, embed.uri.uri);\n  }\n\n  // Add all plugin packages\n  for (const plugin of Object.values(plugins)) {\n    builder.addPackage(plugin.uri.uri, plugin.plugin);\n\n    // Add all interface implementations & redirects\n    for (const interfaceUri of plugin.implements) {\n      builder.addInterfaceImplementation(interfaceUri.uri, plugin.uri.uri);\n      builder.addRedirect(interfaceUri.uri, plugin.uri.uri);\n    }\n  }\n\n  // Add all uri-resolver-ext interface implementations\n  builder.addInterfaceImplementations(\n    ExtendableUriResolver.defaultExtInterfaceUris[0].uri,\n    [\n      uriResolverExts[0].source.uri,\n      uriResolverExts[1].from.uri,\n      ...uriResolverExts.slice(2).map((x: Uri) => x.uri),\n    ]\n  );\n  builder.addRedirect(uriResolverExts[1].from.uri, uriResolverExts[1].to.uri);\n\n  // Configure the ipfs-uri-resolver provider endpoints & retry counts\n  builder.addEnv(embeds.ipfsResolver.source.uri, {\n    provider: ipfsProviders[0],\n    fallbackProviders: ipfsProviders.slice(1),\n    retries: { tryResolveUri: 2, getFile: 2 },\n  });\n\n  return builder.config;\n}\n')))}c.isMDXComponent=!0}}]);