"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[244],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},i=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,d=c["".concat(s,".").concat(m)]||c[m]||k[m]||o;return n?r.createElement(d,l(l({ref:t},i),{},{components:n})):r.createElement(d,l({ref:t},i))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[c]="string"==typeof e?e:a,l[1]=u;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},878:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"token",title:"Token"},l=void 0,u={unversionedId:"demos/uniswapv3/queries/token",id:"demos/uniswapv3/queries/token",title:"Token",description:"currencyEquals",source:"@site/docs/demos/uniswapv3/queries/token.md",sourceDirName:"demos/uniswapv3/queries",slug:"/demos/uniswapv3/queries/token",permalink:"/demos/uniswapv3/queries/token",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/demos/uniswapv3/queries/token.md",tags:[],version:"current",frontMatter:{id:"token",title:"Token"}},s={},p=[{value:"currencyEquals",id:"currencyequals",level:3},{value:"tokenEquals",id:"tokenequals",level:3},{value:"tokenAmountEquals",id:"tokenamountequals",level:3},{value:"tokenSortsBefore",id:"tokensortsbefore",level:3},{value:"getEther",id:"getether",level:3},{value:"getWETH",id:"getweth",level:3},{value:"isNative",id:"isnative",level:3},{value:"wrapToken",id:"wraptoken",level:3},{value:"wrapAmount",id:"wrapamount",level:3}],i={toc:p},c="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"currencyequals"},"currencyEquals"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns true if the currencies are equivalent, false otherwise")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"currencyEquals(\n  currencyA: Currency! \n  currencyB: Currency! \n): Boolean!\n")),(0,a.kt)("h3",{id:"tokenequals"},"tokenEquals"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns true if the tokens are equivalent, false otherwise")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"tokenEquals(\n  tokenA: Token! \n  tokenB: Token! \n): Boolean!\n")),(0,a.kt)("h3",{id:"tokenamountequals"},"tokenAmountEquals"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns true if the token amounts are equivalent, false otherwise")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"tokenAmountEquals(\n  tokenAmountA: TokenAmount! \n  tokenAmountB: TokenAmount! \n): Boolean!\n")),(0,a.kt)("h3",{id:"tokensortsbefore"},"tokenSortsBefore"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns true if the address of tokenA would precede the address of token B when sorted alphabetically")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"tokenSortsBefore(\n  tokenA: Token! \n  tokenB: Token! \n): Boolean!\n")),(0,a.kt)("h3",{id:"getether"},"getEther"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns a native token (e.g. Ether) on the specified chain")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"getNative(\n  chainId: ChainId! \n): Token!\n")),(0,a.kt)("h3",{id:"getweth"},"getWETH"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns a Wrapped Ether token on the specified chain")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"getWETH(\n  chainId: ChainId! \n): Token!\n")),(0,a.kt)("h3",{id:"isnative"},"isNative"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns true if the token is native (e.g. Ether), false otherwise. A token representing Ether must have an empty string in its address field.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"isNative(\n  token: Token! \n): Boolean!\n")),(0,a.kt)("h3",{id:"wraptoken"},"wrapToken"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"If the input token is Ether, the return value is Wrapped Ether; otherwise, the return value is the same as the input value.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"wrapToken(\n  token: Token! \n): Token!\n")),(0,a.kt)("h3",{id:"wrapamount"},"wrapAmount"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"If the input token amount represents an amount of Ether, the return value represents the same amount in Wrapped Ether; otherwise, the return value is the same as the input value.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"wrapAmount(\n  amount: TokenAmount! \n): TokenAmount!\n")))}k.isMDXComponent=!0}}]);