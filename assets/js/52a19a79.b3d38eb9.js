"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[227],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=m(a),c=r,g=u["".concat(o,".").concat(c)]||u[c]||d[c]||l;return a?n.createElement(g,i(i({ref:t},s),{},{components:a})):n.createElement(g,i({ref:t},s))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(7462),r=a(7294),l=a(6010),i=a(2466),p=a(6550),o=a(1980),m=a(7392),s=a(12);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function d(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??u(a);return function(e){const t=(0,m.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function c(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,p.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function k(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=d(e),[i,p]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[o,m]=g({queryString:a,groupId:n}),[u,k]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,s.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),h=(()=>{const e=o??u;return c({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&p(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);p(e),m(e),k(e)}),[m,k,l]),tabValues:l}}var h=a(2389);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:a,selectedValue:p,selectValue:o,tabValues:m}=e;const s=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),d=e=>{const t=e.currentTarget,a=s.indexOf(t),n=m[a].value;n!==p&&(u(t),o(n))},c=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=s.indexOf(e.currentTarget)+1;t=s[a]??s[0];break}case"ArrowLeft":{const a=s.indexOf(e.currentTarget)-1;t=s[a]??s[s.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},m.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:p===t?0:-1,"aria-selected":p===t,key:t,ref:e=>s.push(e),onKeyDown:c,onClick:d},i,{className:(0,l.Z)("tabs__item",N.tabItem,i?.className,{"tabs__item--active":p===t})}),a??t)})))}function b(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function f(e){const t=k(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",N.tabList)},r.createElement(y,(0,n.Z)({},e,t)),r.createElement(b,(0,n.Z)({},e,t)))}function v(e){const t=(0,h.Z)();return r.createElement(f,(0,n.Z)({key:String(t)},e))}},5190:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>p,metadata:()=>m,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),l=a(4866),i=a(5162);const p={id:"wrapper-schema",title:"Wrapper Schema"},o=void 0,m={unversionedId:"tutorials/wrapper-schema",id:"tutorials/wrapper-schema",title:"Wrapper Schema",description:"Every wrapper project has a schema.",source:"@site/docs/tutorials/wrapper-schema.md",sourceDirName:"tutorials",slug:"/tutorials/wrapper-schema",permalink:"/tutorials/wrapper-schema",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/wrapper-schema.md",tags:[],version:"current",frontMatter:{id:"wrapper-schema",title:"Wrapper Schema"},sidebar:"docs",previous:{title:"@polywrap/schema-bind",permalink:"/reference/schema/schema-bind"},next:{title:"Understanding plugins",permalink:"/tutorials/understanding-plugins"}},s={},u=[{value:"Declaration",id:"declaration",level:2},{value:"Codegen",id:"codegen",level:2},{value:"Language Syntax",id:"language-syntax",level:2},{value:"Custom Types",id:"custom-types",level:3},{value:"Nullability",id:"nullability",level:3},{value:"Methods",id:"methods",level:3},{value:"Imports",id:"imports",level:3},{value:"Example",id:"example",level:3},{value:"Default Types",id:"default-types",level:2},{value:"Basic Types",id:"basic-types",level:3},{value:"Complex Types",id:"complex-types",level:3},{value:"Generic Types",id:"generic-types",level:3},{value:"Interfaces",id:"interfaces",level:2},{value:"Environmental Variables",id:"environmental-variables",level:2},{value:"Declare the Env object",id:"declare-the-env-object",level:3},{value:"Add the <code>@env</code> directive",id:"add-the-env-directive",level:3}],d={toc:u},c="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Every wrapper project has a schema.\nThe schema defines the wrapper's dependencies, methods, and custom types.\nIn short, it's an interface describing how to use the wrapper."),(0,r.kt)("p",null,"The schema is a sort of contract between a wrapper's developers and its users.\nA Wasm wrapper will not compile unless it implements and exports all of the methods declared in the schema.\nA Wasm wrapper's users can be certain that all of the methods declared in a schema are callable using the declared method signatures.\nPlugin wrappers do not have this same guarantee.\nHowever, the client will throw an exception if a user attempts to invoke a method and the method is not found."),(0,r.kt)("h2",{id:"declaration"},"Declaration"),(0,r.kt)("p",null,"A wrapper project's schema must be declared in the project manifest (Polywrap Manifest or ",(0,r.kt)("a",{parentName:"p",href:"./create-plugin-wrappers/plugin-manifest"},"Plugin Manifest"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"source:\n  module: ./src/index.ts\n  schema: ./src/schema.graphql\n")),(0,r.kt)("h2",{id:"codegen"},"Codegen"),(0,r.kt)("p",null,"The wrapper schema tells the Polywrap compiler which types and serialization logic to generate.\nGenerated types are updated every time you ",(0,r.kt)("a",{parentName:"p",href:"../reference/cli/commands/codegen"},(0,r.kt)("inlineCode",{parentName:"a"},"build"))," the wrapper.\nThe ",(0,r.kt)("a",{parentName:"p",href:"../reference/cli/polywrap-cli"},(0,r.kt)("inlineCode",{parentName:"a"},"polywrap"))," CLI also provides a ",(0,r.kt)("a",{parentName:"p",href:"../reference/cli/commands/codegen"},(0,r.kt)("inlineCode",{parentName:"a"},"codegen"))," command to\nquickly update the generated ",(0,r.kt)("inlineCode",{parentName:"p"},"wrap")," folder where generated types are stored."),(0,r.kt)("p",null,"The Polywrap compiler generates types for method arguments and custom schema types.\nWrapper developers must use the generated method arguments for methods declared in the schema,\nand generated types for method return values when the return value is of a custom type.\nThe generated types come with serialization logic that allows Wrappers to communicate with the client."),(0,r.kt)("p",null,"The following example demonstrates this practice."),(0,r.kt)(l.Z,{defaultValue:"declaration",values:[{label:"Declaration",value:"declaration"},{label:"Implementation",value:"implementation"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"declaration",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Module {\n    sampleMethod(arg: String!): SampleResult!\n}\n\ntype SampleResult {\n    result: String!\n}\n"))),(0,r.kt)(i.Z,{value:"implementation",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Args_sampleMethod, SampleResult, ModuleBase } from "./wrap";\n\nexport class Module extends ModuleBase {\n  sampleMethod(args: Args_sampleMethod): SampleResult {\n    return {\n      result: args.arg,\n    };\n  }\n}\n')))),(0,r.kt)("h2",{id:"language-syntax"},"Language Syntax"),(0,r.kt)("p",null,"Wrapper schemas are written in Polywrap's variant of the ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/learn/"},"GraphQL")," schema definition language (SDL).\nPolywrap's GraphQL variant is simpler than standard GraphQL and easy to learn."),(0,r.kt)("h3",{id:"custom-types"},"Custom Types"),(0,r.kt)("p",null,"Custom types are declared with the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," keyword. They can be given any number of properties. Properties can be of\nany supported type, including other custom types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type CustomType {\n  myString: String!\n  myObject: AnotherType!\n}\n\ntype AnotherType {\n  myInt: Int!\n}\n")),(0,r.kt)("h3",{id:"nullability"},"Nullability"),(0,r.kt)("p",null,"As in standard GraphQL, properties, method arguments, and method return values are declared non-nullable by appending\na ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," at the end of the type name.\nThe absence of a ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," indicates that a value is nullable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type CustomType {\n  nullable: String # can be String or null\n  nonNullable: String! # must be String\n}\n")),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("p",null,"Methods are declared within the ",(0,r.kt)("inlineCode",{parentName:"p"},"Module")," type. Methods must return a value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Module {\n  foo(\n    arg: CustomType!\n    bar: CustomType\n  ): ReturnType!\n}\n")),(0,r.kt)("p",null,"Custom types and modules can be imported from other wrappers by placing an import statement at the top of the schema.\nImports become available in the schema immediately and in the wrapper following codegen."),(0,r.kt)("h3",{id:"imports"},"Imports"),(0,r.kt)("p",null,"Imported types and modules must be assigned a namespace. References to them are prepended with the namespace."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'#import { Module, CustomType } into Namespace from "wrap://authority/path"\n\ntype CustomType {\n  prop: Namespace_CustomType!\n}\n')),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"The following example uses all of the elements we've discussed so far."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'#import { Module, Connection } into Ethereum from "wrap://ens/wraps.eth:ethereum@2.0.0"\n#import { Module } into Ipfs from "ens/wraps.eth:ipfs-http-client@1.0.0"\n\ntype Module { # methods are declared in type Module\n\n    getIpfsData(\n      address: String! # types ending with ! are non-nullable\n      ipfsProvider: String!\n      connection: Ethereum_Connection # imported types are used like local types\n    ): String!\n\n    setIpfsData(\n      options: SetIpfsDataOptions! # custom types can be arguments\n      ipfsProvider: String!\n      connection: Ethereum_Connection\n    ): SetIpfsDataResult! # custom types can be return values\n}\n\ntype SetIpfsDataOptions { # custom types are declared with "type" keyword\n    address: String!\n    data: String!\n}\n\ntype SetIpfsDataResult {\n    ipfsHash: String!\n    txReceipt: String!\n}\n')),(0,r.kt)("h2",{id:"default-types"},"Default Types"),(0,r.kt)("p",null,"Polywrap's schema definition language supports three kinds of default types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Basic types")," like integers and strings"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Complex types")," like BigInt and JSON"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Generic types")," like Array and Map")),(0,r.kt)("p",null,"These types may be implemented differently in different programming languages.\nThe language-specific implementations are clarified in each of the following sections."),(0,r.kt)("h3",{id:"basic-types"},"Basic Types"),(0,r.kt)("p",null,"Basic types include primitive types like integers and boolean values, as well as Strings and Bytes."),(0,r.kt)(l.Z,{defaultValue:"schema",values:[{label:"Schema",value:"schema"},{label:"Client",value:"client"},{label:"Wasm wrapper",value:"wasm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"schema",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit unsigned integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt8"),(0,r.kt)("td",{parentName:"tr",align:null},"8-bit unsigned integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt16"),(0,r.kt)("td",{parentName:"tr",align:null},"16-bit unsigned integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt32"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit unsigned integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit signed integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int8"),(0,r.kt)("td",{parentName:"tr",align:null},"8-bit signed integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int16"),(0,r.kt)("td",{parentName:"tr",align:null},"16-bit signed integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int32"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit signed integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"UTF-8 string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"True or false stored as 1 byte")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of 8-bit unsigned integers"))))),(0,r.kt)(i.Z,{value:"client",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},"TypeScript"),(0,r.kt)("th",{parentName:"tr",align:null},"Rust"),(0,r.kt)("th",{parentName:"tr",align:null},"Python"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt8"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt16"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt32"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int8"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int16"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int32"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bytes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."))))),(0,r.kt)(i.Z,{value:"wasm",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},"AssemblyScript"),(0,r.kt)("th",{parentName:"tr",align:null},"Rust"),(0,r.kt)("th",{parentName:"tr",align:null},"Go"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt"),(0,r.kt)("td",{parentName:"tr",align:null},"u32"),(0,r.kt)("td",{parentName:"tr",align:null},"u32"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt8"),(0,r.kt)("td",{parentName:"tr",align:null},"u8"),(0,r.kt)("td",{parentName:"tr",align:null},"u8"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt16"),(0,r.kt)("td",{parentName:"tr",align:null},"u16"),(0,r.kt)("td",{parentName:"tr",align:null},"u16"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt32"),(0,r.kt)("td",{parentName:"tr",align:null},"u32"),(0,r.kt)("td",{parentName:"tr",align:null},"u32"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int"),(0,r.kt)("td",{parentName:"tr",align:null},"i32"),(0,r.kt)("td",{parentName:"tr",align:null},"i32"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int8"),(0,r.kt)("td",{parentName:"tr",align:null},"i8"),(0,r.kt)("td",{parentName:"tr",align:null},"i8"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int16"),(0,r.kt)("td",{parentName:"tr",align:null},"i16"),(0,r.kt)("td",{parentName:"tr",align:null},"i16"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int32"),(0,r.kt)("td",{parentName:"tr",align:null},"i32"),(0,r.kt)("td",{parentName:"tr",align:null},"i32"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bytes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.assemblyscript.org/stdlib/arraybuffer.html"},"ArrayBuffer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://doc.rust-lang.org/std/vec/struct.Vec.html"},"Vec<u8",">")),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")))))),(0,r.kt)("h3",{id:"complex-types"},"Complex Types"),(0,r.kt)("p",null,"Complex types are represented as basic types to the Polywrap client and plugin wrappers.\nWithin Wasm wrappers, they are implemented as classes or structs with behavior."),(0,r.kt)("p",null,"For example, consider an application developer invoking a Wasm wrapper with the JavaScript client.\nIf the invoked method requires an argument of type ",(0,r.kt)("inlineCode",{parentName:"p"},"BigInt"),", the application developer will provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"\nrepresentation of an integer number to satisfy the argument.\nWithin the wrapper, the ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," is deserialized into an instantion of the wrapper language's implementation of a ",(0,r.kt)("inlineCode",{parentName:"p"},"BigInt"),".\nIf the invoked method returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"BigInt"),", the wrapper will serialize the returned ",(0,r.kt)("inlineCode",{parentName:"p"},"BigInt"),",\nwhich the client will then deserialize into a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," before returning it to the application developer."),(0,r.kt)(l.Z,{defaultValue:"schema",values:[{label:"Schema",value:"schema"},{label:"Client",value:"client"},{label:"Wasm wrapper",value:"wasm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"schema",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BigInt"),(0,r.kt)("td",{parentName:"tr",align:null},"Multiple precision integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BigNumber"),(0,r.kt)("td",{parentName:"tr",align:null},"Multiple precision float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSON"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON object"))))),(0,r.kt)(i.Z,{value:"client",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},"TypeScript"),(0,r.kt)("th",{parentName:"tr",align:null},"Rust"),(0,r.kt)("th",{parentName:"tr",align:null},"Python"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BigInt"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BigNumber"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSON"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."))))),(0,r.kt)(i.Z,{value:"wasm",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},"AssemblyScript"),(0,r.kt)("th",{parentName:"tr",align:null},"Rust"),(0,r.kt)("th",{parentName:"tr",align:null},"Go"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BigInt"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/polywrap/as-bigint"},"BigInt")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.rs/num-bigint/latest/num_bigint/"},"num_bigint::BigInt")),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BigNumber"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/polywrap/as-bignumber"},"BigNumber")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.rs/bigdecimal/latest/bigdecimal/"},"bigdecimal::BigDecimal as BigNumber")),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSON"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/polywrap/assemblyscript-json"},"JSON.Value")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.serde.rs/serde_json/"},"serde_json::Value as JSON::Value")),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")))))),(0,r.kt)("h3",{id:"generic-types"},"Generic Types"),(0,r.kt)("p",null,"When using a generic type, with the exception of arrays,\nschema writers must add a ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/learn/queries/#directives"},"directive")," annotation declaring its subtype(s)."),(0,r.kt)("p",null,"The directive takes the form ",(0,r.kt)("inlineCode",{parentName:"p"},'@annotate(type: "TypeName<T\\>")'),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is the type of the subtype.\nThe generic type and its subtype(s) can be independently nullable or non-nullable.\nThe following example illustrates use of the generic type directive with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Map")," type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type Module {\n  getKey(\n    key: String!\n    map: Map! @annotate(type: "Map<String!, Int!>!")\n  ): Int!\n\n  returnMap(\n    map: Map! @annotate(type: "Map<String!, Int!>!")\n  ): Map! @annotate(type: "Map<String!, Int!>!")\n}\n')),(0,r.kt)("p",null,"Like complex types, the implementation of generic types can differ by language."),(0,r.kt)(l.Z,{defaultValue:"schema",values:[{label:"Schema",value:"schema"},{label:"Client",value:"client"},{label:"Wasm wrapper",value:"wasm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"schema",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Type]"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of elements.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map"),(0,r.kt)("td",{parentName:"tr",align:null},"Map of key-value pairs."))))),(0,r.kt)(i.Z,{value:"client",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},"TypeScript"),(0,r.kt)("th",{parentName:"tr",align:null},"Rust"),(0,r.kt)("th",{parentName:"tr",align:null},"Python"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Type]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"},"Array<Type",">")),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"},"Map<K,V",">")),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon..."))))),(0,r.kt)(i.Z,{value:"wasm",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},"AssemblyScript"),(0,r.kt)("th",{parentName:"tr",align:null},"Rust"),(0,r.kt)("th",{parentName:"tr",align:null},"Go"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Type]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.assemblyscript.org/stdlib/array.html"},"Array<T",">")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://doc.rust-lang.org/std/vec/struct.Vec.html"},"Vec<T",">")),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.assemblyscript.org/stdlib/map.html"},"Map<K, V",">")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html"},"BTreeMap<K, V",">")),(0,r.kt)("td",{parentName:"tr",align:null},"Coming soon...")))))),(0,r.kt)("h2",{id:"interfaces"},"Interfaces"),(0,r.kt)("p",null,"A module can inherit the method declarations of any other module by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"implements")," keyword.\nA module that implements an interface in this manner is required to implement and export the interface module's declared methods."),(0,r.kt)("p",null,"Similarly, a type can inherit the property declarations of any other type by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"implements")," keyword.\nIf a type implements an interface, it inherits the interface type's property declarations as though the properties\nwere declared explicitly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'#import { Module, InterfaceType } into Interface from "wrap://ens/interface.eth"\n\ntype Module implements Interface_Module {\n  # declares methods of Interface_Module\n}\n\ntype ImplementationType implements Interface_InterfaceType {\n  # declares properties of Interface_InterfaceType\n}\n')),(0,r.kt)("h2",{id:"environmental-variables"},"Environmental Variables"),(0,r.kt)("p",null,"Wrapper developers can declare a map of environmental variables for application developers to provide. To use environmental variables, declare an ",(0,r.kt)("inlineCode",{parentName:"p"},"Env")," type and add a directive to each schema method that will use it. "),(0,r.kt)("p",null,"You can learn how to access environmental variables in code by reading the ",(0,r.kt)("a",{parentName:"p",href:"./env-variables#access-env-in-the-module"},"Access Env in the module")," section of our ",(0,r.kt)("a",{parentName:"p",href:"./env-variables"},"Environmental Variables")," documentation for wrapper developers."),(0,r.kt)("h3",{id:"declare-the-env-object"},"Declare the Env object"),(0,r.kt)("p",null,"Environmental variables are declared in a custom type named ",(0,r.kt)("inlineCode",{parentName:"p"},"Env"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Env {\n  str: String!\n  number: Int!\n  bool: Boolean!\n}\n")),(0,r.kt)("h3",{id:"add-the-env-directive"},"Add the ",(0,r.kt)("inlineCode",{parentName:"h3"},"@env")," directive"),(0,r.kt)("p",null,"To access an ",(0,r.kt)("inlineCode",{parentName:"p"},"Env")," object during a method invocation, add the ",(0,r.kt)("inlineCode",{parentName:"p"},"@env")," directive to a method. The ",(0,r.kt)("inlineCode",{parentName:"p"},"@env")," directive has one attribute that indicates whether the ",(0,r.kt)("inlineCode",{parentName:"p"},"Env")," is required or optional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Module {\n  # App developers are required to provide Env to invoke this method\n  methodRequireEnv(\n    arg: String!\n  ): String! @env(required: true)\n\n  # Env is optional when invoking this method\n  methodOptionalEnv(\n    arg: String!\n  ): String! @env(required: false)\n}\n")))}g.isMDXComponent=!0}}]);