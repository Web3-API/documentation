"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[3667],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=l(t),f=o,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||c;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,a=new Array(c);a[0]=f;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<c;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4565:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const c={id:"docgen",title:"Docgen"},a=void 0,i={unversionedId:"reference/cli/commands/docgen",id:"reference/cli/commands/docgen",title:"Docgen",description:"",source:"@site/docs/reference/cli/commands/docgen.md",sourceDirName:"reference/cli/commands",slug:"/reference/cli/commands/docgen",permalink:"/reference/cli/commands/docgen",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/cli/commands/docgen.md",tags:[],version:"current",frontMatter:{id:"docgen",title:"Docgen"},sidebar:"docs",previous:{title:"Manifest",permalink:"/reference/cli/commands/manifest"},next:{title:"Infra",permalink:"/reference/cli/commands/infra"}},p={},l=[],s={toc:l},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Usage: polywrap docgen|o <action> [options]\n\nGenerate wrapper documentation\n\nArguments:\n  action                             \n    schema      Generate GraphQL schema\n    docusaurus    Generate Docusaurus markdown\n    jsdoc         Generate JSDoc markdown\n   (choices: "schema", "docusaurus", "jsdoc")\n\nOptions:\n  -m, --manifest-file <path>         Path to the project manifest file\n                                     (default: polywrap.yaml | polywrap.yml)\n  -g, --docgen-dir <path>            Output directory for generated docs\n                                     (default: ./docs)\n  -c, --client-config <config-path>  Add custom configuration to the\n                                     PolywrapClient\n  --wrapper-envs <envs-path>         Path to a JSON file containing wrapper\n                                     envs\n  -i, --imports                      Also generate docs for dependencies\n  -v, --verbose                      Verbose output (default: false)\n  -q, --quiet                        Suppress output (default: false)\n  -l, --log-file [path]              Log file to save console output to\n  -h, --help                         display help for command\n')))}d.isMDXComponent=!0}}]);