"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Introduction","href":"/","docId":"introduction"},{"type":"link","label":"FAQ","href":"/faq","docId":"faq"},{"type":"category","label":"Quick Start","items":[{"type":"link","label":"Javascript","href":"/quick-start/javascript","docId":"quick-start/javascript"},{"type":"link","label":"Rust","href":"/quick-start/rust","docId":"quick-start/rust"},{"type":"link","label":"Python","href":"/quick-start/python","docId":"quick-start/python"},{"type":"link","label":"Kotlin","href":"/quick-start/kotlin","docId":"quick-start/kotlin"},{"type":"link","label":"Swift","href":"/quick-start/swift","docId":"quick-start/swift"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Available Clients","href":"/clients","docId":"clients"},{"type":"link","label":"The Polywrap CLI","href":"/cli","docId":"cli"},{"type":"category","label":"Use Cases","items":[{"type":"link","label":"Use case: Web3","href":"/use-cases/web3","docId":"use-cases/web3"},{"type":"link","label":"AI","href":"/use-cases/ai","docId":"use-cases/ai"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Concepts","items":[{"type":"link","label":"Wraps","href":"/concepts/wraps","docId":"concepts/wraps"},{"type":"link","label":"WASM","href":"/concepts/wasm","docId":"concepts/wasm"},{"type":"link","label":"ABI","href":"/concepts/abi","docId":"concepts/abi"},{"type":"link","label":"URIs","href":"/concepts/uris","docId":"concepts/uris"},{"type":"link","label":"Wrap Schema","href":"/concepts/wrap-schema","docId":"concepts/wrap-schema"},{"type":"link","label":"Environmental variables","href":"/concepts/env-variables","docId":"concepts/env-variables"},{"type":"link","label":"Plugins","href":"/concepts/plugins","docId":"concepts/plugins"},{"type":"link","label":"URI redirects","href":"/concepts/uri-redirects","docId":"concepts/uri-redirects"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Tutorials","items":[{"type":"category","label":"Use Wraps","items":[{"type":"link","label":"Installing the Polywrap JS client","href":"/tutorials/use-wraps/install-client","docId":"tutorials/use-wraps/install-client"},{"type":"link","label":"Creating the Polywrap client instance","href":"/tutorials/use-wraps/create-client-instance","docId":"tutorials/use-wraps/create-client-instance"},{"type":"link","label":"Configuring the Polywrap Client","href":"/tutorials/use-wraps/configure-client","docId":"tutorials/use-wraps/configure-client"},{"type":"link","label":"Generate types for your app","href":"/tutorials/use-wraps/types-for-app","docId":"tutorials/use-wraps/types-for-app"},{"type":"link","label":"React integration","href":"/tutorials/use-wraps/react-integration","docId":"tutorials/use-wraps/react-integration"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Create Wraps","items":[{"type":"link","label":"Introduction","href":"/tutorials/create-wraps/introduction","docId":"tutorials/create-wraps/introduction"},{"type":"category","label":"Part One","items":[{"type":"link","label":"Project Setup","href":"/tutorials/create-wraps/part-one/project-setup","docId":"tutorials/create-wraps/part-one/project-setup"},{"type":"link","label":"Project Manifest","href":"/tutorials/create-wraps/part-one/project-manifest","docId":"tutorials/create-wraps/part-one/project-manifest"},{"type":"link","label":"Schema and Codegen","href":"/tutorials/create-wraps/part-one/schema-and-codegen","docId":"tutorials/create-wraps/part-one/schema-and-codegen"},{"type":"link","label":"First Method","href":"/tutorials/create-wraps/part-one/first-method","docId":"tutorials/create-wraps/part-one/first-method"},{"type":"link","label":"Import and Subinvoke","href":"/tutorials/create-wraps/part-one/import-and-subinvoke","docId":"tutorials/create-wraps/part-one/import-and-subinvoke"},{"type":"link","label":"Interfaces and Plugins","href":"/tutorials/create-wraps/part-one/interfaces-and-plugins","docId":"tutorials/create-wraps/part-one/interfaces-and-plugins"},{"type":"link","label":"Integration Testing","href":"/tutorials/create-wraps/part-one/integration-testing","docId":"tutorials/create-wraps/part-one/integration-testing"},{"type":"link","label":"Deployment","href":"/tutorials/create-wraps/part-one/deployment","docId":"tutorials/create-wraps/part-one/deployment"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Part Two","items":[{"type":"link","label":"Configure a Polywrap Manifest","href":"/tutorials/create-wraps/part-two/polywrap-manifest","docId":"tutorials/create-wraps/part-two/polywrap-manifest"},{"type":"link","label":"Default plugins","href":"/tutorials/create-wraps/part-two/default-plugins","docId":"tutorials/create-wraps/part-two/default-plugins"},{"type":"link","label":"Writing tests with workflows","href":"/tutorials/create-wraps/part-two/writing-tests-with-workflows","docId":"tutorials/create-wraps/part-two/writing-tests-with-workflows"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Test Wraps","items":[{"type":"link","label":"Test Wraps In TypeScript","href":"/tutorials/test-wraps/in-typescript","docId":"tutorials/test-wraps/in-typescript"},{"type":"link","label":"Configure Polywrap infrastructure pipeline","href":"/tutorials/test-wraps/infra-pipeline","docId":"tutorials/test-wraps/infra-pipeline"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Build & Deploy Wraps","items":[{"type":"link","label":"Configure Polywrap build pipeline","href":"/tutorials/build-and-deploy-wraps/build-pipeline","docId":"tutorials/build-and-deploy-wraps/build-pipeline"},{"type":"link","label":"Deploy to IPFS","href":"/tutorials/build-and-deploy-wraps/deploy-to-ipfs","docId":"tutorials/build-and-deploy-wraps/deploy-to-ipfs"},{"type":"link","label":"Publish to ENS","href":"/tutorials/build-and-deploy-wraps/publish-to-ens","docId":"tutorials/build-and-deploy-wraps/publish-to-ens"},{"type":"link","label":"Configure Polywrap deployment pipeline","href":"/tutorials/build-and-deploy-wraps/deploy-pipeline","docId":"tutorials/build-and-deploy-wraps/deploy-pipeline"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced","items":[{"type":"category","label":"Create Plugins","items":[{"type":"link","label":"Plugin an existing JS SDK","href":"/tutorials/advanced/create-plugins/create-js-plugin","docId":"tutorials/advanced/create-plugins/create-js-plugin"},{"type":"link","label":"Configure a Plugin Manifest","href":"/tutorials/advanced/create-plugins/plugin-manifest","docId":"tutorials/advanced/create-plugins/plugin-manifest"},{"type":"link","label":"Plugin Architecture","href":"/tutorials/advanced/create-plugins/plugin-architecture","docId":"tutorials/advanced/create-plugins/plugin-architecture"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Interfaces","items":[{"type":"link","label":"Configure interfaces in the client","href":"/tutorials/advanced/interfaces/client-config-interfaces","docId":"tutorials/advanced/interfaces/client-config-interfaces"},{"type":"link","label":"Define and implement interfaces","href":"/tutorials/advanced/interfaces/define-implement-interfaces","docId":"tutorials/advanced/interfaces/define-implement-interfaces"},{"type":"link","label":"Interface instances","href":"/tutorials/advanced/interfaces/interface-instances","docId":"tutorials/advanced/interfaces/interface-instances"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Workflows","items":[{"type":"link","label":"Running Workflows","href":"/tutorials/advanced/workflows/running-workflows","docId":"tutorials/advanced/workflows/running-workflows"},{"type":"link","label":"Workflow Validation","href":"/tutorials/advanced/workflows/workflow-validation","docId":"tutorials/advanced/workflows/workflow-validation"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"link","href":"https://github.com/polywrap/awesome-polywrap","label":"Resources"}]},"docs":{"cli":{"id":"cli","title":"The Polywrap CLI","description":"Now that we have a basic understanding of the Polywrap Client, it\'s time to see how we can use the Polywrap CLI to create an amazing experience when working with Wraps.","sidebar":"docs"},"clients":{"id":"clients","title":"Available Clients","description":"A Client is any library that can resolve and invoke Wraps.","sidebar":"docs"},"concepts/abi":{"id":"concepts/abi","title":"ABI","description":"In computer software, an application binary interface (ABI) is an interface between two binary program modules. Often, one of these modules is a library or operating system facility, and the other is a program that is being run by a user.","sidebar":"docs"},"concepts/env-variables":{"id":"concepts/env-variables","title":"Environmental variables","description":"Wrapper developers can declare a map of environmental variables for application developers to provide.","sidebar":"docs"},"concepts/plugins":{"id":"concepts/plugins","title":"Plugins","description":"Polywrap plugins, or \\"plugin wrappers\\", enable existing SDKs implemented in the client\'s language (e.g. JavaScript) to be queried as if they were Wasm wrappers.","sidebar":"docs"},"concepts/uri-redirects":{"id":"concepts/uri-redirects","title":"URI redirects","description":"Similar to how browsers can redirect from one URI to another, the Polywrap client can have custom URI redirects configured as well.","sidebar":"docs"},"concepts/uris":{"id":"concepts/uris","title":"URIs","description":"Deployed wrappers are identified using custom URIs (Uniform Resource Identifier) called WRAP URIs. For example:","sidebar":"docs"},"concepts/wasm":{"id":"concepts/wasm","title":"WASM","description":"WASM (WebAssembly) is a binary instruction format designed to provide a portable and efficient target for the compilation of high-level programming languages such as C, C++, Rust, and others. It is a low-level, virtual machine-based format that is designed to be executed in web browsers, but can also be used in other contexts.","sidebar":"docs"},"concepts/wrap-schema":{"id":"concepts/wrap-schema","title":"Wrap Schema","description":"Every wrap project has a schema.","sidebar":"docs"},"concepts/wraps":{"id":"concepts/wraps","title":"Wraps","description":"Wraps are at the core of Polywrap - they are the portable, executable modules that can be called by any Polywrap Client.","sidebar":"docs"},"faq":{"id":"faq","title":"FAQ","description":"What is Polywrap?","sidebar":"docs"},"introduction":{"id":"introduction","title":"Introduction","description":"Polywrap is a framework for developing software powered by Wraps. Wraps are software modules that are:","sidebar":"docs"},"quick-start/javascript":{"id":"quick-start/javascript","title":"Javascript","description":"The Polywrap Client","sidebar":"docs"},"quick-start/kotlin":{"id":"quick-start/kotlin","title":"Kotlin","description":"The Polywrap Client","sidebar":"docs"},"quick-start/python":{"id":"quick-start/python","title":"Python","description":"The Polywrap Client","sidebar":"docs"},"quick-start/rust":{"id":"quick-start/rust","title":"Rust","description":"The Polywrap Client","sidebar":"docs"},"quick-start/swift":{"id":"quick-start/swift","title":"Swift","description":"The Polywrap Client","sidebar":"docs"},"tutorials/advanced/create-plugins/create-js-plugin":{"id":"tutorials/advanced/create-plugins/create-js-plugin","title":"Plugin an existing JS SDK","description":"Introduction","sidebar":"docs"},"tutorials/advanced/create-plugins/plugin-architecture":{"id":"tutorials/advanced/create-plugins/plugin-architecture","title":"Plugin Architecture","description":"The architecture of a plugin\'s code is flexible.","sidebar":"docs"},"tutorials/advanced/create-plugins/plugin-manifest":{"id":"tutorials/advanced/create-plugins/plugin-manifest","title":"Configure a Plugin Manifest","description":"Each plugin project is orchestrated by a Project Manifest polywrap.yaml file.","sidebar":"docs"},"tutorials/advanced/interfaces/client-config-interfaces":{"id":"tutorials/advanced/interfaces/client-config-interfaces","title":"Configure interfaces in the client","description":"The Polywrap Client can be configured to use one or more implementations for","sidebar":"docs"},"tutorials/advanced/interfaces/define-implement-interfaces":{"id":"tutorials/advanced/interfaces/define-implement-interfaces","title":"Define and implement interfaces","description":"A special type of Polywrap project can be used to define an abstract interface without providing a concrete implementation.","sidebar":"docs"},"tutorials/advanced/interfaces/interface-instances":{"id":"tutorials/advanced/interfaces/interface-instances","title":"Interface instances","description":"Interface modules can be instantiated in a Wasm wrap, agnostic to any concrete implementation.","sidebar":"docs"},"tutorials/advanced/workflows/running-workflows":{"id":"tutorials/advanced/workflows/running-workflows","title":"Running Workflows","description":"A workflow is a configurable process that will execute one or more Polywrap wrap invocations.","sidebar":"docs"},"tutorials/advanced/workflows/workflow-validation":{"id":"tutorials/advanced/workflows/workflow-validation","title":"Workflow Validation","description":"Workflow validation can be used to verify the contents of a workflow output file.","sidebar":"docs"},"tutorials/build-and-deploy-wraps/build-pipeline":{"id":"tutorials/build-and-deploy-wraps/build-pipeline","title":"Configure Polywrap build pipeline","description":"In this section, we\'ll explore the Polywrap\'s build pipeline and how to configure it.","sidebar":"docs"},"tutorials/build-and-deploy-wraps/deploy-pipeline":{"id":"tutorials/build-and-deploy-wraps/deploy-pipeline","title":"Configure Polywrap deployment pipeline","description":"Polywrap makes it easy to create an automated wrap deployment pipeline using a Deploy Manifest polywrap.deploy.yaml file and the Polywrap CLI\'s deploy command.","sidebar":"docs"},"tutorials/build-and-deploy-wraps/deploy-to-ipfs":{"id":"tutorials/build-and-deploy-wraps/deploy-to-ipfs","title":"Deploy to IPFS","description":"There are multiple ways that can be used to deploy your newly created wrap package","sidebar":"docs"},"tutorials/build-and-deploy-wraps/deployment/crust":{"id":"tutorials/build-and-deploy-wraps/deployment/crust","title":"Deploying to CRUST Files","description":"Introduction"},"tutorials/build-and-deploy-wraps/deployment/fleek":{"id":"tutorials/build-and-deploy-wraps/deployment/fleek","title":"Deploying to Fleek","description":"Introduction"},"tutorials/build-and-deploy-wraps/deployment/pinata":{"id":"tutorials/build-and-deploy-wraps/deployment/pinata","title":"Deploying to Pinata","description":"Introduction"},"tutorials/build-and-deploy-wraps/publish-to-ens":{"id":"tutorials/build-and-deploy-wraps/publish-to-ens","title":"Publish to ENS","description":"Once a wrap is published to IPFS, it can optionally be given a domain via ENS. This allows developers integrating your wrap to rely upon a human-readable & upgradeable URI. For example ens/uniswap.wraps.eth:v3.","sidebar":"docs"},"tutorials/create-wraps/introduction":{"id":"tutorials/create-wraps/introduction","title":"Introduction","description":"Last update: October 2023","sidebar":"docs"},"tutorials/create-wraps/part-one/deployment":{"id":"tutorials/create-wraps/part-one/deployment","title":"Deployment","description":"You\'re reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.","sidebar":"docs"},"tutorials/create-wraps/part-one/first-method":{"id":"tutorials/create-wraps/part-one/first-method","title":"First Method","description":"You\'re reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.","sidebar":"docs"},"tutorials/create-wraps/part-one/import-and-subinvoke":{"id":"tutorials/create-wraps/part-one/import-and-subinvoke","title":"Import and Subinvoke","description":"You\'re reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.","sidebar":"docs"},"tutorials/create-wraps/part-one/integration-testing":{"id":"tutorials/create-wraps/part-one/integration-testing","title":"Integration Testing","description":"You\'re reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.","sidebar":"docs"},"tutorials/create-wraps/part-one/interfaces-and-plugins":{"id":"tutorials/create-wraps/part-one/interfaces-and-plugins","title":"Interfaces and Plugins","description":"You\'re reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.","sidebar":"docs"},"tutorials/create-wraps/part-one/project-manifest":{"id":"tutorials/create-wraps/part-one/project-manifest","title":"Project Manifest","description":"You\'re reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.","sidebar":"docs"},"tutorials/create-wraps/part-one/project-setup":{"id":"tutorials/create-wraps/part-one/project-setup","title":"Project Setup","description":"You\'re reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.","sidebar":"docs"},"tutorials/create-wraps/part-one/schema-and-codegen":{"id":"tutorials/create-wraps/part-one/schema-and-codegen","title":"Schema and Codegen","description":"You\'re reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.","sidebar":"docs"},"tutorials/create-wraps/part-two/add-metadata":{"id":"tutorials/create-wraps/part-two/add-metadata","title":"Add Metadata","description":"Developers can add content, such as a README.md, to their wrap packages. The location of this content must be defined in the project manifest under the resources key."},"tutorials/create-wraps/part-two/default-plugins":{"id":"tutorials/create-wraps/part-two/default-plugins","title":"Default plugins","description":"Polywrap plugins extend the capabilities of wraps. Some plugin wraps come included in the Polywrap client by default:","sidebar":"docs"},"tutorials/create-wraps/part-two/polywrap-manifest":{"id":"tutorials/create-wraps/part-two/polywrap-manifest","title":"Configure a Polywrap Manifest","description":"Each wrap is orchestrated by a Polywrap Manifest polywrap.yaml file.","sidebar":"docs"},"tutorials/create-wraps/part-two/writing-tests-with-workflows":{"id":"tutorials/create-wraps/part-two/writing-tests-with-workflows","title":"Writing tests with workflows","description":"Testing","sidebar":"docs"},"tutorials/test-wraps/in-typescript":{"id":"tutorials/test-wraps/in-typescript","title":"Test Wraps In TypeScript","description":"Introduction","sidebar":"docs"},"tutorials/test-wraps/infra-pipeline":{"id":"tutorials/test-wraps/infra-pipeline","title":"Configure Polywrap infrastructure pipeline","description":"The Polywrap CLI infra command interacts with an Infra Manfiest","sidebar":"docs"},"tutorials/use-wraps/configure-client":{"id":"tutorials/use-wraps/configure-client","title":"Configuring the Polywrap Client","description":"The Polywrap Client accepts an optional CoreClientConfig argument at construction.","sidebar":"docs"},"tutorials/use-wraps/create-client-instance":{"id":"tutorials/use-wraps/create-client-instance","title":"Creating the Polywrap client instance","description":"Once the Polywrap JS client has been installed, the next step is to create a PolywrapClient instance:","sidebar":"docs"},"tutorials/use-wraps/install-client":{"id":"tutorials/use-wraps/install-client","title":"Installing the Polywrap JS client","description":"Introduction","sidebar":"docs"},"tutorials/use-wraps/react-integration":{"id":"tutorials/use-wraps/react-integration","title":"React integration","description":"To use the Polywrap React integration, you\'ll need to install the @polywrap/react package.","sidebar":"docs"},"tutorials/use-wraps/types-for-app":{"id":"tutorials/use-wraps/types-for-app","title":"Generate types for your app","description":"The polywrap CLI\'s codegen command interacts with","sidebar":"docs"},"use-cases/ai":{"id":"use-cases/ai","title":"AI","description":"Coming soon... \u2728","sidebar":"docs"},"use-cases/web3":{"id":"use-cases/web3","title":"Use case: Web3","description":"Polywrap enables the easy integration of Web3 protocols into any application, including both read and write capabilities.","sidebar":"docs"}}}')}}]);