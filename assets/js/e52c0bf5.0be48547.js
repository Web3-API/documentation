"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[194],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>g});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=r.createContext({}),p=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},s=function(t){var e=p(t.components);return r.createElement(u.Provider,{value:e},t.children)},m="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,u=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(g,o(o({ref:e},s),{},{components:n})):r.createElement(g,o({ref:e},s))}));function g(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=t,l[m]="string"==typeof t?t:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5139:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={id:"mathUtils",title:"Math Utilities"},o=void 0,l={unversionedId:"demos/uniswapv3/queries/mathUtils",id:"demos/uniswapv3/queries/mathUtils",title:"Math Utilities",description:"mostSignificantBit",source:"@site/docs/demos/uniswapv3/queries/mathUtils.md",sourceDirName:"demos/uniswapv3/queries",slug:"/demos/uniswapv3/queries/mathUtils",permalink:"/demos/uniswapv3/queries/mathUtils",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/demos/uniswapv3/queries/mathUtils.md",tags:[],version:"current",frontMatter:{id:"mathUtils",title:"Math Utilities"}},u={},p=[{value:"mostSignificantBit",id:"mostsignificantbit",level:3},{value:"encodeSqrtRatioX96",id:"encodesqrtratiox96",level:3},{value:"mulDivRoundingUp",id:"muldivroundingup",level:3},{value:"addDelta",id:"adddelta",level:3},{value:"getAmount0Delta",id:"getamount0delta",level:3},{value:"getAmount1Delta",id:"getamount1delta",level:3},{value:"getNextSqrtPriceFromInput",id:"getnextsqrtpricefrominput",level:3},{value:"getNextSqrtPriceFromOutput",id:"getnextsqrtpricefromoutput",level:3}],s={toc:p},m="wrapper";function c(t){let{components:e,...n}=t;return(0,a.kt)(m,(0,r.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"mostsignificantbit"},"mostSignificantBit"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns the most significant bit of a positive integer, starting with first bit = 0")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"mostSignificantBit(\n  x: BigInt! \n): UInt32!\n")),(0,a.kt)("h3",{id:"encodesqrtratiox96"},"encodeSqrtRatioX96"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"encodeSqrtRatioX96(\n  amount1: BigInt! # The numerator amount i.e., the amount of token1\n  amount0: BigInt! # The denominator amount i.e., the amount of token0\n): BigInt!\n")),(0,a.kt)("h3",{id:"muldivroundingup"},"mulDivRoundingUp"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns (a * b) / denominator")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"mulDivRoundingUp(\n  a: BigInt! \n  b: BigInt! \n  denominator: BigInt! \n): BigInt!\n")),(0,a.kt)("h3",{id:"adddelta"},"addDelta"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Returns x + y")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"addDelta(\n  x: BigInt! \n  y: BigInt! \n): BigInt!\n")),(0,a.kt)("h3",{id:"getamount0delta"},"getAmount0Delta"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Used to facilitate liquidity math using sqrtRatioX96 values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"getAmount0Delta(\n  sqrtRatioAX96: BigInt! \n  sqrtRatioBX96: BigInt! \n  liquidity: BigInt! \n  roundUp: Boolean! \n): BigInt!\n")),(0,a.kt)("h3",{id:"getamount1delta"},"getAmount1Delta"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Used to facilitate liquidity math using sqrtRatioX96 values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"getAmount1Delta(\n  sqrtRatioAX96: BigInt! \n  sqrtRatioBX96: BigInt! \n  liquidity: BigInt! \n  roundUp: Boolean! \n): BigInt!\n")),(0,a.kt)("h3",{id:"getnextsqrtpricefrominput"},"getNextSqrtPriceFromInput"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Used to facilitate liquidity math using sqrtRatioX96 values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"getNextSqrtPriceFromInput(\n  sqrtPX96: BigInt! \n  liquidity: BigInt! \n  amountIn: BigInt! \n  zeroForOne: Boolean! \n): BigInt!\n")),(0,a.kt)("h3",{id:"getnextsqrtpricefromoutput"},"getNextSqrtPriceFromOutput"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Used to facilitate liquidity math using sqrtRatioX96 values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"getNextSqrtPriceFromOutput(\n  sqrtPX96: BigInt! \n  liquidity: BigInt! \n  amountOut: BigInt! \n  zeroForOne: Boolean! \n): BigInt!\n")))}c.isMDXComponent=!0}}]);