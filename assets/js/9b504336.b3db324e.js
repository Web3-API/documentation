(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{131:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return d}));var r=t(3),a=t(8),i=(t(0),t(180)),o=["components"],p={id:"test-env-js",title:"@polywrap/test-env-js"},s={unversionedId:"reference/clients/js/libraries/test-env-js",id:"reference/clients/js/libraries/test-env-js",isDocsHomePage:!1,title:"@polywrap/test-env-js",description:"The @polywrap/test-env-js package is a library of functions that facilitate end-to-end testing in JavaScript.",source:"@site/docs/reference/clients/js/libraries/test-env-js.md",slug:"/reference/clients/js/libraries/test-env-js",permalink:"/reference/clients/js/libraries/test-env-js",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/clients/js/libraries/test-env-js.md",version:"current",sidebar:"docs",previous:{title:"@polywrap/react",permalink:"/reference/clients/js/libraries/react"},next:{title:"Talks, Podcasts, and Videos",permalink:"/resources/talks-podcasts-and-videos"}},c=[{value:"Constants",id:"constants",children:[{value:"providers",id:"providers",children:[]},{value:"ensAddresses",id:"ensaddresses",children:[]}]},{value:"Methods",id:"methods",children:[{value:"initTestEnvironment",id:"inittestenvironment",children:[]},{value:"stopTestEnvironment",id:"stoptestenvironment",children:[]},{value:"buildWrapper",id:"buildwrapper",children:[]},{value:"buildAndDeployWrapper",id:"buildanddeploywrapper",children:[]},{value:"runCLI",id:"runcli",children:[]}]}],l={toc:c};function d(e){var n=e.components,t=Object(a.a)(e,o);return Object(i.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@polywrap/test-env-js")," package is a library of functions that facilitate end-to-end testing in JavaScript.\nThe package is based on the default infrastructure module described in\n",Object(i.b)("a",{parentName:"p",href:"./../../../../quick-start/test-wasm-wrappers/infra-pipeline"},"Configure Polywrap infrastructure pipeline"),"."),Object(i.b)("h2",{id:"constants"},"Constants"),Object(i.b)("h3",{id:"providers"},"providers"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'export const providers = {\n  ipfs: "http://localhost:5001",\n  ethereum: "http://localhost:8545",\n};\n')),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"providers")," object contains the URIs for the default infrastructure module's local Ethereum network provider and IPFS provider."),Object(i.b)("h3",{id:"ensaddresses"},"ensAddresses"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'export const ensAddresses = {\n  ensAddress: "0xe78A0F7E598Cc8b0Bb87894B0F60dD2a88d6a8Ab", // ENS Registry\n  resolverAddress: "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24", // ENS Resolver\n  registrarAddress: "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb", // ENS Registrar\n  reverseAddress: "0xe982E462b094850F12AF94d21D470e21bE9D0E9C", // ENS Reverse Lookup\n} as const;\n')),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"ensAddresses")," object contains the Ethereum addresses of the default infrastructure module's locally-deployed ENS smart contracts."),Object(i.b)("h2",{id:"methods"},"Methods"),Object(i.b)("h3",{id:"inittestenvironment"},"initTestEnvironment"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export const initTestEnvironment = async (cli?: string): Promise<void>\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"initTestEnvironment")," function starts a local test environment using the default infrastructure module.\nIt optionally accepts a path to a ",Object(i.b)("a",{parentName:"p",href:"./../../../cli/polywrap-cli"},Object(i.b)("inlineCode",{parentName:"a"},"polywrap"))," CLI binary."),Object(i.b)("h3",{id:"stoptestenvironment"},"stopTestEnvironment"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export const stopTestEnvironment = async (cli?: string): Promise<void>\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"stopTestEnvironment")," function tears down the local test environment (default infrastructure module) if one is running.\nIt optionally accepts a path to a ",Object(i.b)("a",{parentName:"p",href:"./../../../cli/polywrap-cli"},Object(i.b)("inlineCode",{parentName:"a"},"polywrap"))," CLI binary."),Object(i.b)("h3",{id:"buildwrapper"},"buildWrapper"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export async function buildWrapper(wrapperAbsPath: string): Promise<void>\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"buildWrapper")," function builds the wrapper located at the given path ",Object(i.b)("inlineCode",{parentName:"p"},"wrapperAbsPath"),"."),Object(i.b)("h3",{id:"buildanddeploywrapper"},"buildAndDeployWrapper"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export async function buildAndDeployWrapper({\n  wrapperAbsPath,\n  ipfsProvider,\n  ethereumProvider,\n  ensName,\n}: {\n  wrapperAbsPath: string; // Absolute path of folder containing wrapper's Polywrap Manifest (polywrap.yaml)\n  ipfsProvider: string; // IPFS provider\n  ethereumProvider: string; // Ethereum provider\n  ensName?: string; // (Optional) ENS domain name\n}): Promise<{\n  ensDomain: string; // ENS domain for invoking wrapper\n  ipfsCid: string; // IPFS content hash for invoking wrapper\n}>\n")),Object(i.b)("p",null,"Like ",Object(i.b)("inlineCode",{parentName:"p"},"buildWrapper"),", the ",Object(i.b)("inlineCode",{parentName:"p"},"buildAndDeployWrapper")," function builds the wrapper located at the given path ",Object(i.b)("inlineCode",{parentName:"p"},"wrapperAbsPath"),".\nAfter building the wrapper, ",Object(i.b)("inlineCode",{parentName:"p"},"buildAndDeployWrapper")," deploys it to IPFS using the given provider ",Object(i.b)("inlineCode",{parentName:"p"},"ipfsProvider"),".\nIt next registers the ENS domain ",Object(i.b)("inlineCode",{parentName:"p"},"ensName")," and points the domain to the IPFS deployment using the Ethereum provider ",Object(i.b)("inlineCode",{parentName:"p"},"ethereumProvider"),".\nIf an ENS domain is not provided, a randomly selected human-readable ENS domain name is used.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"buildAndDeployWrapper")," function returns a Promise containing the ENS domain and IPFS content hash of the wrapper deployment,\neither of which can be used to invoke the wrapper."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example: buildAndDeployWrapper with default infrastructure module"',title:'"Example:',buildAndDeployWrapper:!0,with:!0,default:!0,infrastructure:!0,'module"':!0},'import { buildAndDeployWrapper, providers } from "@polywrap/test-env-js";\n\nconst api = await buildAndDeployWrapper({\n  wrapperAbsPath: "...",\n  ipfsProvider: providers.ipfs,\n  ethereumProvider: providers.ethereum,\n});\nconst ensUri = `ens/testnet/${api.ensDomain}`;\n')),Object(i.b)("h3",{id:"runcli"},"runCLI"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export const runCLI = async (options: {\n  args: string[]; // Command and arguments\n  cwd?: string; // (Optional) Current working directory\n  cli?: string; // (Optional) Path to CLI binary\n  env?: Record<string, string>; // (Optional) Environmental variables to set\n}): Promise<{\n  exitCode: number; // CLI exit code\n  stdout: string; // CLI standard output\n  stderr: string; // CLI standard error\n}>\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"runCLI")," function can be used to run the ",Object(i.b)("a",{parentName:"p",href:"./../../../cli/polywrap-cli"},Object(i.b)("inlineCode",{parentName:"a"},"polywrap"))," CLI programmatically.\nIt requires an array of command line arguments ",Object(i.b)("inlineCode",{parentName:"p"},"args"),", which should include the CLI command to be run.\nAn alternative current working directory ",Object(i.b)("inlineCode",{parentName:"p"},"cwd")," can be provided to change the context from which the CLI is invoked.\nIt also optionally accepts a path to a ",Object(i.b)("a",{parentName:"p",href:"./../../../cli/polywrap-cli"},Object(i.b)("inlineCode",{parentName:"a"},"polywrap"))," CLI binary.\nThe optional map of environmental variables ",Object(i.b)("inlineCode",{parentName:"p"},"env")," will be set before running the CLI."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript",metastring:"title=\"Example: runCLI calling the 'infra' command\"",title:'"Example:',runCLI:!0,calling:!0,the:!0,"'infra'":!0,'command"':!0},'const { exitCode, stderr, stdout } = await runCLI({\n  args: ["infra", "up", "--modules=eth-ens-ipfs", "--verbose"]\n});\n')))}d.isMDXComponent=!0},180:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),l=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},d=function(e){var n=l(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),u=r,m=d["".concat(o,".").concat(u)]||d[u]||b[u]||i;return t?a.a.createElement(m,p(p({ref:n},c),{},{components:t})):a.a.createElement(m,p({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var c=2;c<i;c++)o[c]=t[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);