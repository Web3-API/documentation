"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[2538],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,l(l({ref:t},c),{},{components:n})):r.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294),a=n(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(7462),a=n(7294),o=n(6010),l=n(2466),s=n(6550),i=n(1980),p=n(7392),c=n(12);function u(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[l,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[i,p]=g({queryString:n,groupId:r}),[u,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),y=(()=>{const e=i??u;return m({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),f(e)}),[p,f,o]),tabValues:o}}var y=n(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),r=p[n].value;r!==s&&(u(t),i(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},l,{className:(0,o.Z)("tabs__item",h.tabItem,l?.className,{"tabs__item--active":s===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function k(e){const t=f(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",h.tabList)},a.createElement(b,(0,r.Z)({},e,t)),a.createElement(w,(0,r.Z)({},e,t)))}function v(e){const t=(0,y.Z)();return a.createElement(k,(0,r.Z)({key:String(t)},e))}},8805:(e,t,n)=>{n.d(t,{f:()=>o});var r=n(9960),a=n(7294);const o=e=>a.createElement(r.Z,{to:e.to},a.createElement("button",{className:"tutorial-nav-button"},e.text," \u2794"))},5924:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>b,frontMatter:()=>u,metadata:()=>m,toc:()=>f});var r=n(7462),a=(n(7294),n(3905)),o=n(4866),l=n(5162);const s={toc:[{value:"<strong><code>polywrap.yaml</code></strong>",id:"polywrapyaml",level:3},{value:"<strong><code>polywrap.graphql</code></strong>",id:"polywrapgraphql",level:3},{value:"<strong><code>package.json</code></strong>",id:"packagejson",level:3},{value:"<strong><code>tsconfig.json</code></strong>",id:"tsconfigjson",level:3}]},i="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(i,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"polywrapyaml"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"polywrap.yaml"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"polywrap.yaml")," project manifest is a high-level configuration file describing a Polywrap project."),(0,a.kt)("h3",{id:"polywrapgraphql"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"polywrap.graphql"))),(0,a.kt)("p",null,"Each wrap project has a ",(0,a.kt)("a",{parentName:"p",href:"/concepts/wrap-schema"},"Wrap Schema"),". The schema defines the wrap's interface, including dependencies, methods, and custom types. Polywrap uses the schema to generate the wrap's serialization bindings and validate the wrap's implementation. The schema is compiled to a ",(0,a.kt)("inlineCode",{parentName:"p"},"wrap.info")," ABI file at build time and stored in the wrap package. In this tutorial, we'll learn how to write a Wrap Schema. It's easy!"),(0,a.kt)("h3",null,(0,a.kt)("span",null,(0,a.kt)("b",null,(0,a.kt)("code",null,n.entry)))),(0,a.kt)("p",null,"The entry point file differs by language, but in all cases it exports the wrap module implementation."),(0,a.kt)("h3",null,(0,a.kt)("span",null,(0,a.kt)("b",null,(0,a.kt)("code",null,n.testDir)))),(0,a.kt)("p",null,"The tests directory contains integration tests for the wrap. Integration tests are performed using a Polywrap Client to invoke the wrap, just as a developer would do when using your wrap in their application. Without a client, you wouldn't be able to test the parts of your code that invoke other wraps or plugins."),(0,a.kt)("p",null,"The tests directory contains a `types` folder with configuration files used to generate bindings for the tests in the client language. Depending on your project's language, the test types will be generated in TypeScript or Rust. The bindings are based on your wrap's schema and allow you to call methods on your wrap with an experience similar to the native programming language of the tests (i.e. TypeScript or Rust). The bindings are optional, but we recommend using them."),(0,a.kt)("h3",{id:"packagejson"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"package.json"))),(0,a.kt)("p",null,"We include a ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file with pre-written build scripts and developer dependencies for testing, even if your wrap is not written in TypeScript or AssemblyScript."),(0,a.kt)("p",null,"If you're building a Rust wrap, the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file is used only for build scripts and is not required for testing. Feel free to delete it or use it only as a reference."),(0,a.kt)("p",null,"We understand that not every user wants to install NodeJS to build with Polywrap. Don't worry! In Part Two of the tutorial, we will learn how to write language-agnostic tests without any JavaScript dependencies."),(0,a.kt)("h3",{id:"tsconfigjson"},(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"strong"},"tsconfig.json"))),(0,a.kt)("p",null,"Used to configure TypeScript for integration tests."))}p.isMDXComponent=!0;var c=n(8805);const u={id:"project-setup",title:"Project Setup"},d=void 0,m={unversionedId:"tutorials/create-wraps/part-one/project-setup",id:"tutorials/create-wraps/part-one/project-setup",title:"Project Setup",description:"You're reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.",source:"@site/docs/tutorials/create-wraps/part-one/project-setup.mdx",sourceDirName:"tutorials/create-wraps/part-one",slug:"/tutorials/create-wraps/part-one/project-setup",permalink:"/tutorials/create-wraps/part-one/project-setup",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/create-wraps/part-one/project-setup.mdx",tags:[],version:"current",frontMatter:{id:"project-setup",title:"Project Setup"},sidebar:"docs",previous:{title:"Introduction",permalink:"/tutorials/create-wraps/introduction"},next:{title:"Project Manifest",permalink:"/tutorials/create-wraps/part-one/project-manifest"}},g={},f=[{value:"<strong>Create the Project</strong>",id:"create-the-project",level:2},{value:"Project Contents",id:"project-contents",level:2},{value:"<strong>Next Steps</strong>",id:"next-steps",level:2}],y={toc:f},h="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You're reading Part One of the ",(0,a.kt)("a",{parentName:"p",href:"../introduction"},"Create Wraps")," tutorial, where we learn everything you need to know to productively develop Polywrap wraps.")),(0,a.kt)("p",null,'Welcome to Part One of the Create Wraps tutorial. We will build a new Polywrap wrap called "Oracle Wrap". Oracle Wrap is capable of both obscuring and illuminating knowledge using hashing and generative AI.'),(0,a.kt)("p",null,"Please read the ",(0,a.kt)("a",{parentName:"p",href:"../introduction"},"Introduction")," if you haven't done so already. Otherwise, let's dive right in!"),(0,a.kt)("h2",{id:"create-the-project"},(0,a.kt)("strong",{parentName:"h2"},"Create the Project")),(0,a.kt)("p",null,"We will generate our project scaffolding using the Polywrap CLI. The ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," command of the Polywrap CLI uses the syntax ",(0,a.kt)("inlineCode",{parentName:"p"},"polywrap create <project type> <language> <name>")," to download a project template. This tutorial is about building Wasm wraps, so let's create a ",(0,a.kt)("inlineCode",{parentName:"p"},"wasm")," project and name it ",(0,a.kt)("inlineCode",{parentName:"p"},"oracle-wrap")),(0,a.kt)(o.Z,{groupId:"project",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap create wasm rust oracle-wrap\n"))),(0,a.kt)(l.Z,{value:"golang",label:"Go",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap create wasm golang oracle-wrap\n"))),(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap create wasm typescript oracle-wrap\n"))),(0,a.kt)(l.Z,{value:"assemblyscript",label:"AssemblyScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap create wasm assemblyscript oracle-wrap\n")))),(0,a.kt)("p",null,"After running this command, you'll see a new folder appear with the project name."),(0,a.kt)("h2",{id:"project-contents"},"Project Contents"),(0,a.kt)("p",null,"Let's take a look at the contents of the project we just created. Then, in the next section, we'll review the project manifest file and learn how to configure it."),(0,a.kt)(o.Z,{groupId:"project",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"project/\n\u251c\u2500\u2500 polywrap.yaml              # Project manifest File\n\u251c\u2500\u2500 polywrap.graphql           # Wrap Schema\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 lib.rs                 # Entry point; exports module defined in schema\n\u251c\u2500\u2500 tests/                     # Integration tests\n\u251c\u2500\u2500 Cargo.toml                 # Dependency management\n\u251c\u2500\u2500 package.json               # Build scripts\n\u2514\u2500\u2500 tsconfig.json              # TypeScript configuration (for integration tests)\n")),(0,a.kt)(p,{entry:"src/lib.rs",testDir:"tests/",mdxType:"ProjectDirCommon"})),(0,a.kt)(l.Z,{value:"golang",label:"Go",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"project/\n\u251c\u2500\u2500 polywrap.yaml              # Project manifest File\n\u251c\u2500\u2500 polywrap.graphql           # Wrap Schema\n\u251c\u2500\u2500 module/\n\u2502   \u251c\u2500\u2500 module.go              # Entry point; exports module defined in schema\n\u2502   \u2514\u2500\u2500 __tests__/             # Integration tests\n\u251c\u2500\u2500 build-staging/             # Required boilerplate; don't modify\n\u251c\u2500\u2500 go.mod                     # Dependency management\n\u251c\u2500\u2500 package.json               # Build scripts\n\u2514\u2500\u2500 tsconfig.json              # TypeScript configuration (for integration tests)\n")),(0,a.kt)(p,{entry:"module/module.go",testDir:"module/__tests__/",mdxType:"ProjectDirCommon"}),(0,a.kt)("h3",null,(0,a.kt)("b",null,(0,a.kt)("code",null,"build-staging/"))),(0,a.kt)("p",null,"Required boilerplate; don't modify.")),(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"project/\n\u251c\u2500\u2500 polywrap.yaml              # Project manifest File\n\u251c\u2500\u2500 polywrap.graphql           # Wrap Schema\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts               # Entry point; exports module defined in schema\n\u2502   \u2514\u2500\u2500 __tests__/             # Integration tests\n\u251c\u2500\u2500 package.json               # Dependency management and build scripts\n\u251c\u2500\u2500 rollup.config.mjs          # Bundler configuration\n\u251c\u2500\u2500 shims.js                   # Shims for a native TypeScript experience\n\u2514\u2500\u2500 tsconfig.json              # TypeScript configuration\n")),(0,a.kt)(p,{entry:"src/index.ts",testDir:"src/__tests__/",mdxType:"ProjectDirCommon"}),(0,a.kt)("h3",null,(0,a.kt)("b",null,(0,a.kt)("code",null,"rollup.config.mjs"))),(0,a.kt)("p",null,"Used to configure bundling for the wrap."),(0,a.kt)("h3",null,(0,a.kt)("b",null,(0,a.kt)("code",null,"shims.js"))),(0,a.kt)("p",null,"Used to provide a more native TypeScript experience.")),(0,a.kt)(l.Z,{value:"assemblyscript",label:"AssemblyScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"project/\n\u251c\u2500\u2500 polywrap.yaml              # Project manifest File\n\u251c\u2500\u2500 polywrap.graphql           # Wrap Schema\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts               # Entry point; exports module defined in schema\n\u2502   \u2514\u2500\u2500 __tests__/             # Integration tests\n\u251c\u2500\u2500 package.json               # Dependency management and build scripts\n\u251c\u2500\u2500 tsconfig.json              # TypeScript configuration (for integration tests)\n\u2514\u2500\u2500 tsconfig.build.json        # AssemblyScript configuration (for build)\n")),(0,a.kt)(p,{entry:"src/index.ts",testDir:"src/__tests__/",mdxType:"ProjectDirCommon"}),(0,a.kt)("h3",null,(0,a.kt)("b",null,(0,a.kt)("code",null,"tsconfig.build.json"))),(0,a.kt)("p",null,"Used to configure AssemblyScript for wrap development."))),(0,a.kt)("h2",{id:"next-steps"},(0,a.kt)("strong",{parentName:"h2"},"Next Steps")),(0,a.kt)("p",null,"In the next section we will set up the Project Manifest file, which contains metadata the Polywrap CLI needs to build your wrap."),(0,a.kt)(c.f,{to:"./project-manifest",text:"Project Manifest",mdxType:"NavButton"}))}b.isMDXComponent=!0}}]);