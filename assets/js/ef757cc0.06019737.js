"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[5486],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,y=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return r?n.createElement(y,p(p({ref:t},u),{},{components:r})):n.createElement(y,p({ref:t},u))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,p[1]=i;for(var s=2;s<o;s++)p[s]=r[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},398:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={id:"publish-to-ens",title:"Publish to ENS"},p=void 0,i={unversionedId:"tutorials/build-and-deploy-wraps/publish-to-ens",id:"tutorials/build-and-deploy-wraps/publish-to-ens",title:"Publish to ENS",description:"Once a wrap is published to IPFS, it can optionally be given a domain via ENS. This allows developers integrating your wrap to rely upon a human-readable & upgradeable URI. For example ens/uniswap.wraps.eth:v3.",source:"@site/docs/tutorials/build-and-deploy-wraps/publish-to-ens.md",sourceDirName:"tutorials/build-and-deploy-wraps",slug:"/tutorials/build-and-deploy-wraps/publish-to-ens",permalink:"/tutorials/build-and-deploy-wraps/publish-to-ens",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/build-and-deploy-wraps/publish-to-ens.md",tags:[],version:"current",frontMatter:{id:"publish-to-ens",title:"Publish to ENS"},sidebar:"docs",previous:{title:"Deploy to IPFS",permalink:"/tutorials/build-and-deploy-wraps/deploy-to-ipfs"},next:{title:"Configure Polywrap deployment pipeline",permalink:"/tutorials/build-and-deploy-wraps/deploy-pipeline"}},l={},s=[{value:"<code>polywrap</code> CLI",id:"polywrap-cli",level:2},{value:"The ENS App",id:"the-ens-app",level:2}],u={toc:s},d="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Once a wrap is published to IPFS, it can optionally be given a domain via ENS. This allows developers integrating your wrap to rely upon a human-readable & upgradeable URI. For example ",(0,a.kt)("inlineCode",{parentName:"p"},"ens/uniswap.wraps.eth:v3"),"."),(0,a.kt)("p",null,"There are multiple ways to publish your wrap's IPFS hash to ENS:"),(0,a.kt)("h2",{id:"polywrap-cli"},(0,a.kt)("inlineCode",{parentName:"h2"},"polywrap")," CLI"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polywrap/cli/tree/origin-dev/packages/cli"},(0,a.kt)("inlineCode",{parentName:"a"},"polywrap"))," command-line tool has a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polywrap/cli/tree/origin-dev/packages/cli#deploy--d"},(0,a.kt)("inlineCode",{parentName:"a"},"deploy"))," command for publishing Wasm wraps to IPFS and ENS. IPFS publishing is done via a ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@nerfzael/wrap-persistence-node"},"wrap-persistence-node endpoint"),". By default it publishes to the public ",(0,a.kt)("a",{parentName:"p",href:"https://ipfs.wraps.io"},"https://ipfs.wraps.io")," endpoint."),(0,a.kt)("p",null,"For more information, see ",(0,a.kt)("a",{parentName:"p",href:"./deploy-pipeline"},"Configure Polywrap deployment pipeline")," and the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polywrap/cli/tree/origin-dev/packages/cli#deploy--d"},(0,a.kt)("inlineCode",{parentName:"a"},"deploy"))," command reference documentation."),(0,a.kt)("h2",{id:"the-ens-app"},"The ENS App"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.ens.domains/"},"ENS App")," is a distributed, open, and extensible naming system based on the Ethereum blockchain."))}c.isMDXComponent=!0}}]);