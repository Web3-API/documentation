"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[3313],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,y=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(y,l(l({ref:t},c),{},{components:n})):r.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7286:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={id:"deploy-locally-and-test",title:"Deploy locally & run tests"},l=void 0,i={unversionedId:"tutorials/create-wraps/tutorial/deploy-locally-and-test",id:"tutorials/create-wraps/tutorial/deploy-locally-and-test",title:"Deploy locally & run tests",description:"Deploy",source:"@site/docs/tutorials/create-wraps/tutorial/deploy-locally-and-test.md",sourceDirName:"tutorials/create-wraps/tutorial",slug:"/tutorials/create-wraps/tutorial/deploy-locally-and-test",permalink:"/tutorials/create-wraps/tutorial/deploy-locally-and-test",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/create-wraps/tutorial/deploy-locally-and-test.md",tags:[],version:"current",frontMatter:{id:"deploy-locally-and-test",title:"Deploy locally & run tests"},sidebar:"docs",previous:{title:"Writing tests with workflows",permalink:"/tutorials/create-wraps/tutorial/writing-tests-with-workflows"},next:{title:"Configure a Polywrap Manifest",permalink:"/tutorials/create-wraps/polywrap-manifest"}},p={},s=[{value:"<strong>Deploy</strong>",id:"deploy",level:3},{value:"<strong>Test</strong>",id:"test",level:3},{value:"<strong>Conclusion</strong>",id:"conclusion",level:3}],c={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"deploy"},(0,a.kt)("strong",{parentName:"h3"},"Deploy")),(0,a.kt)("p",null,"With our workflow complete, let's test the wrap on our local environment! First, let's set up our test environment with the following command in your terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test:env:up\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This command starts up a test environment with a local Ethereum network using ",(0,a.kt)("a",{parentName:"p",href:"https://www.trufflesuite.com/ganache"},"Ganache"),", an ENS smart contract, and a local IPFS node."),(0,a.kt)("p",{parentName:"admonition"},"To close the test environment, simply run:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test:env:down\n"))),(0,a.kt)("p",null,"Next, we will deploy our both our ",(0,a.kt)("inlineCode",{parentName:"p"},"SimpleStorage.sol")," smart contract as well as our wrap with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Behind the scenes, ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn deploy")," will run the following commands:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy:api && yarn deploy:contract\n")),(0,a.kt)("p",{parentName:"admonition"},"Let's break down each of these commands, starting with ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn deploy:api"),", which itself runs this command:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx polywrap deploy\n")),(0,a.kt)("p",{parentName:"admonition"},"The polywrap CLI's deploy command executes a deployment pipeline defined in a ",(0,a.kt)("inlineCode",{parentName:"p"},"polywrap.deploy.yaml")," manifest.\nOur deployment pipeline builds and deploys our wrap to our local test environment.\nThe wrap is assigned to an Ethereum Name Service (ENS) domain registered in the test environment that is set to resolve to our local IPFS node."),(0,a.kt)("p",{parentName:"admonition"},"We next deploy the SimpleStorage smart contract to the Ethereum test network using a script we've written for you:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node ./scripts/deploy-contract.js\n")),(0,a.kt)("p",{parentName:"admonition"},"We'll be interacting with this deployed smart contract using our wrap.")),(0,a.kt)("h3",{id:"test"},(0,a.kt)("strong",{parentName:"h3"},"Test")),(0,a.kt)("p",null,"Now, we'll use the following command to check whether our wrap and smart contract are working properly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test:workflow\n")),(0,a.kt)("p",null,"This command uses the Polywrap CLI's ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," command, which will execute a series of Polywrap invocations and return the result to you."),(0,a.kt)("h3",{id:"conclusion"},(0,a.kt)("strong",{parentName:"h3"},"Conclusion")),(0,a.kt)("p",null,"\ud83c\udf89 ",(0,a.kt)("strong",{parentName:"p"},"Congratulations! You've create a custom wrap!")),(0,a.kt)("p",null,"Hopefully this article has given you a clear understanding of the Polywrap toolchain's primary features. If at any time in this process you get stuck or have questions, please don't hesitate to reach out on ",(0,a.kt)("a",{parentName:"p",href:"https://discord.com/invite/Z5m88a5qWu"},"Discord"),"."))}m.isMDXComponent=!0}}]);