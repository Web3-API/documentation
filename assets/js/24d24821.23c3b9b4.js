(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{170:function(e,n,t){"use strict";t.d(n,"a",(function(){return f})),t.d(n,"b",(function(){return d}));var r=t(0),o=t.n(r);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),l=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},f=function(e){var n=l(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,a=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),f=l(t),m=r,d=f["".concat(a,".").concat(m)]||f[m]||s[m]||c;return t?o.a.createElement(d,i(i({ref:n},p),{},{components:t})):o.a.createElement(d,i({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,a=new Array(c);a[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var p=2;p<c;p++)a[p]=t[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},93:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return u})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return f}));var r=t(3),o=t(8),c=(t(0),t(170)),a=["components"],i={id:"run",title:"Run"},u={unversionedId:"reference/cli/commands/run",id:"reference/cli/commands/run",isDocsHomePage:!1,title:"Run",description:"`",source:"@site/docs/reference/cli/commands/run.md",slug:"/reference/cli/commands/run",permalink:"/reference/cli/commands/run",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/cli/commands/run.md",version:"current",sidebar:"docs",previous:{title:"Infra",permalink:"/reference/cli/commands/infra"},next:{title:"Client",permalink:"/reference/clients/js/client-js"}},p=[],l={toc:p};function f(e){var n=e.components,t=Object(o.a)(e,a);return Object(c.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"Usage: polywrap run|r [options] <workflow>\n\nRuns workflow script\n\nArguments:\n  workflow                              Path to workflow script\n\nOptions:\n  -c, --client-config <config-path>     Add custom configuration to the\n                                        PolywrapClient\n  -v, --validate-script <cue-file>      Validate the output of the workflow\n                                        jobs\n  -o, --output-file <output-file-path>  Output file path for the workflow\n                                        result\n  -j, --jobs <jobs...>                  Specify ids of jobs that you want to\n                                        run\n  -q, --quiet                           Suppress output\n  -h, --help                            display help for command\n")))}f.isMDXComponent=!0}}]);