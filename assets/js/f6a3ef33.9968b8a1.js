"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[7218],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||a;return n?o.createElement(h,i(i({ref:t},u),{},{components:n})):o.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9735:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={id:"common-types",title:"Common Types"},i=void 0,p={unversionedId:"demos/uniswapv3/types/common-types",id:"demos/uniswapv3/types/common-types",title:"Common Types",description:"BestTradeOptions",source:"@site/docs/demos/uniswapv3/types/commonTypes.md",sourceDirName:"demos/uniswapv3/types",slug:"/demos/uniswapv3/types/common-types",permalink:"/demos/uniswapv3/types/common-types",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/demos/uniswapv3/types/commonTypes.md",tags:[],version:"current",frontMatter:{id:"common-types",title:"Common Types"}},l={},s=[{value:"BestTradeOptions",id:"besttradeoptions",level:3},{value:"Currency",id:"currency",level:3},{value:"FeeOptions",id:"feeoptions",level:3},{value:"Fraction",id:"fraction",level:3},{value:"MethodParameters",id:"methodparameters",level:3},{value:"MintAmounts",id:"mintamounts",level:3},{value:"PermitOptions",id:"permitoptions",level:3},{value:"Pool",id:"pool",level:3},{value:"Position",id:"position",level:3},{value:"Price",id:"price",level:3},{value:"Route",id:"route",level:3},{value:"SwapOptions",id:"swapoptions",level:3},{value:"Tick",id:"tick",level:3},{value:"Token",id:"token",level:3},{value:"TokenAmount",id:"tokenamount",level:3},{value:"Trade",id:"trade",level:3},{value:"TradeSwap",id:"tradeswap",level:3}],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"besttradeoptions"},"BestTradeOptions"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Options used when determining the best trade in bestTradeExactIn(...) and bestTradeExactOut(...)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type BestTradeOptions {\n  maxNumResults: UInt32 # Maximum number of results to return\n  maxHops: UInt32 # Maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n}\n")),(0,r.kt)("h3",{id:"currency"},"Currency"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Describes a token")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Currency {\n  decimals: UInt8! # Token decimals\n  symbol: String # Token symbol\n  name: String # Token name\n}\n")),(0,r.kt)("h3",{id:"feeoptions"},"FeeOptions"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Fee configuration for encodeUnwrapWETH9(...) and encodeSweepToken(...)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type FeeOptions {\n  fee: String! # The percent of the output that will be taken as a fee.\n  recipient: String! # The recipient of the fee.\n}\n")),(0,r.kt)("h3",{id:"fraction"},"Fraction"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Represents fraction, typically a percent.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Fraction {\n  numerator: BigInt! # Numerator of fraction\n  denominator: BigInt! # Denominator of fraction\n  quotient: String! # A decimal string representation of the fraction\n}\n")),(0,r.kt)("h3",{id:"methodparameters"},"MethodParameters"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Transaction calldata and an ether value to be sent with the transaction")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type MethodParameters {\n  calldata: String! # The hex encoded calldata to perform the given operation\n  value: String! # The amount of ether (wei) to send in hex.\n}\n")),(0,r.kt)("h3",{id:"mintamounts"},"MintAmounts"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"The minimum amounts that must be sent in order to mint the amount of liquidity held by the position at the current price for the pool")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type MintAmounts {\n  amount0: BigInt! # Amount of the first token in the pool\n  amount1: BigInt! # Amount of the second token in the pool\n}\n")),(0,r.kt)("h3",{id:"permitoptions"},"PermitOptions"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Parameters for a permit allowing the transfer of tokens. Either amount and deadline OR nonce and expiry are required.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type PermitOptions {\n  v: PermitV! \n  r: String! \n  s: String! \n  amount: BigInt \n  deadline: BigInt \n  nonce: BigInt \n  expiry: BigInt \n}\n")),(0,r.kt)("h3",{id:"pool"},"Pool"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"A liquidity pool involving two tokens which can be exchanged for a price determined by a price curve and market dynamics")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Pool {\n  token0: Token! # The first token of the pool\n  token1: Token! # The second token of the pool\n  fee: FeeAmount! # The fee amount liquidity providers receive as a share of swaps made in the pool\n  sqrtRatioX96: BigInt! # An encoded representation of the current swap price\n  liquidity: BigInt! # The total liquidity available in the pool\n  tickCurrent: Int32! # The current tick\n  tickDataProvider: Tick[]! # A list of all ticks in the pool\n  token0Price: Price! # The current mid price of the pool in terms of token0, i.e. the ratio of token1 over token0\n  token1Price: Price! # The current mid price of the pool in terms of token1, i.e. the ratio of token0 over token1\n}\n")),(0,r.kt)("h3",{id:"position"},"Position"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"A liquidity position between two ticks in a pool")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Position {\n  pool: Pool! # The pool on which the position is held\n  tickLower: Int32! # The lower tick, marking the lower boundary of the position\n  tickUpper: Int32! # The upper tick, marking the upper boundary of the position\n  liquidity: BigInt! # The maximum amount of liquidity received for a given amount of token0, token1, and the prices at the tick boundaries\n  token0Amount: TokenAmount! # The amount in this position of the first token of the pool\n  token1Amount: TokenAmount! # The amount in this position of the second token of the pool\n  mintAmounts: MintAmounts! # The minimum amounts that must be sent in order to mint the amount of liquidity held by the position at the current price for the pool\n  token0PriceLower: Price! # The price of token0 at the lower tick\n  token0PriceUpper: Price! # The price of token0 at the upper tick\n}\n")),(0,r.kt)("h3",{id:"price"},"Price"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Represents price of a token in terms of another token. When used as a function argument, the 'price' property is ignored.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Price {\n  baseToken: Token! # The base token of the price\n  quoteToken: Token! # The quote token of the price\n  denominator: BigInt! # Amount of base token used to calculate price\n  numerator: BigInt! # Amount of quote token used to calculate price\n  price: String! # A decimal string representation of the price\n}\n")),(0,r.kt)("h3",{id:"route"},"Route"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"An ordered path of pools through which a swap can occur")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Route {\n  pools: Pool[]! # A list of pools, wherein each pool in the list has a token in common with its adjacent pool(s)\n  path: Token[]! # The path of tokens that are swapped through the pools\n  input: Token! # The input token, where the route begins\n  output: Token! # The output token, where the route ends\n  midPrice: Price! # The mid price of the output token, in terms of the input token, for this route\n}\n")),(0,r.kt)("h3",{id:"swapoptions"},"SwapOptions"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Configuration for creating swap transaction calldata using swapCallParameters(...)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type SwapOptions {\n  slippageTolerance: String! # How much the execution price is allowed to move unfavorably from the trade execution price.\n  recipient: String! # The account that should receive the output.\n  deadline: BigInt! # When the transaction expires, in epoch seconds.\n  inputTokenPermit: PermitOptions # The optional permit parameters for spending the input.\n  sqrtPriceLimitX96: BigInt # The optional price limit for the trade.\n  fee: FeeOptions # Optional information for taking a fee on output.\n}\n")),(0,r.kt)("h3",{id:"tick"},"Tick"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"A pool tick marks a section of the price curve. A liquidity provider may hold a position on a tick, rather than the full curve.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Tick {\n  index: Int32! # Tick index\n  liquidityGross: BigInt! # Gross liquidity in Pool at tick position\n  liquidityNet: BigInt! # Net liquidity in Pool at tick position\n}\n")),(0,r.kt)("h3",{id:"token"},"Token"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"ERC20-compliant token or Ether")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Token {\n  chainId: ChainId! # Id of chain where token exists\n  address: String! # Address of token's ERC20 contract\n  currency: Currency! # Token description\n}\n")),(0,r.kt)("h3",{id:"tokenamount"},"TokenAmount"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"An amount of a token")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type TokenAmount {\n  token: Token! # Token\n  amount: BigInt! # Raw amount of the token, not adjusted for the token's decimals\n}\n")),(0,r.kt)("h3",{id:"trade"},"Trade"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"A trade contains the information necessary to create an on-chain exchange of tokens")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Trade {\n  swaps: TradeSwap[]! # A list of swaps to be executed atomically, all of which must have the same input and output tokens\n  tradeType: TradeType! # Type of trade, either exact input or exact output\n  inputAmount: TokenAmount! # The total input amount (sum of input amounts in swaps)\n  outputAmount: TokenAmount! # The total output amount (sum of output amounts in swaps)\n  executionPrice: Price! # The price of the trade, in terms of the input token\n  priceImpact: Fraction! # The percent difference between the route's mid price and the price impact\n}\n")),(0,r.kt)("h3",{id:"tradeswap"},"TradeSwap"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"A route, input, and output amount that compose the core elements of a trade")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type TradeSwap {\n  route: Route! # The route of the trade\n  inputAmount: TokenAmount! # The amount being passed in\n  outputAmount: TokenAmount! # The amount returned by the trade when executed\n}\n")))}m.isMDXComponent=!0}}]);