"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[489],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={id:"test-env-js",hide_title:!0},o="@polywrap/test-env-js",s={unversionedId:"reference/clients/js/libraries/test-env-js",id:"reference/clients/js/libraries/test-env-js",title:"@polywrap/test-env-js",description:"Provides functions to setup a test environment with Polywrap CLI and Docker.",source:"@site/docs/reference/clients/js/libraries/test-env-js.md",sourceDirName:"reference/clients/js/libraries",slug:"/reference/clients/js/libraries/test-env-js",permalink:"/reference/clients/js/libraries/test-env-js",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/clients/js/libraries/test-env-js.md",tags:[],version:"current",frontMatter:{id:"test-env-js",hide_title:!0},sidebar:"docs",previous:{title:"@polywrap/result",permalink:"/reference/clients/js/libraries/result"},next:{title:"@polywrap/tracing-js",permalink:"/reference/clients/js/libraries/tracing-js"}},p={},l=[],c={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"polywraptest-env-js"},"@polywrap/test-env-js"),(0,a.kt)("p",null,"Provides functions to setup a test environment with Polywrap CLI and Docker."),(0,a.kt)("h1",{id:"description"},"Description"),(0,a.kt)("p",null,"It allows user to initiate the test environment through a javascript function (it's the ",(0,a.kt)("inlineCode",{parentName:"p"},"infra")," command in the CLI). It also exports the providers and ens addresses expected in the deployments (They are hard coded, because the initiation of the environment is deterministic)"),(0,a.kt)("h1",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Initialization with the simple-storage wrapper."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import path from "path";\nimport { PolywrapClient } from "@polywrap/client-js";\nimport {\n  buildWrapper,\n  initTestEnvironment,\n  stopTestEnvironment,\n  providers,\n  ensAddresses\n} from "@polywrap/test-env-js";\nimport * as App from "../types/wrap";\n\n// test wrapper in a test environment\nexport async function foo({\n  // spin up docker containers for Ganache and IPFS.\n  await initTestEnvironment();\n  const CONNECTION = { networkNameOrChainId: "testnet" };\n\n  // get path to the wrapper in testing\n  const wrapperPath: string = path.join(path.resolve(__dirname), "..");\n\n  // build current wrapper with CLI\n  await buildWrapper(wrapperPath);\n\n  // get URI to the local wrapper build\n  const wrapperUri = `fs/${wrapperPath}/build`;\n\n  // invoke the wrapper to deploy a contract to the test env\n  const deployContractResponse = await App.SimpleStorage_Module.deployContract(\n    { connection: CONNECTION },\n    client,\n    wrapperUri\n  );\n  const contractAddress = deployContractResponse.data as string;\n\n  // invoke the wrapper to query a contract in the test env\n  const response = await App.SimpleStorage_Module.getData(\n    {\n      address: contractAddr,\n      connection: CONNECTION,\n    },\n    client,\n    wrapperUri\n  );\n});\n\n')),(0,a.kt)("h1",{id:"api"},"API"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ensAddresses, providers - constant addresses and urls"),(0,a.kt)("li",{parentName:"ul"},"runCLI - run arbitrary Polywrap CLI commands"),(0,a.kt)("li",{parentName:"ul"},"initTestEnvironment - spin up Ganache and IPFS Docker instances "),(0,a.kt)("li",{parentName:"ul"},"stopTestEnvironment - stop Docker"),(0,a.kt)("li",{parentName:"ul"},"buildWrapper - compile wasm and bindings"),(0,a.kt)("li",{parentName:"ul"},"buildAndDeployWrapper - deploy wrapper to the testnet ENS")))}u.isMDXComponent=!0}}]);