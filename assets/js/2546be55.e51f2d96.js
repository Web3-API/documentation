"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[2990],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),d=i,g=u["".concat(s,".").concat(d)]||u[d]||f[d]||a;return t?r.createElement(g,l(l({ref:n},p),{},{components:t})):r.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={id:"client-config",title:"Client Config"},l=void 0,o={unversionedId:"reference/clients/js/client-config",id:"reference/clients/js/client-config",title:"Client Config",description:"The Polywrap Client accepts a ClientConfig argument at construction.",source:"@site/docs/reference/clients/js/client-config.md",sourceDirName:"reference/clients/js",slug:"/reference/clients/js/client-config",permalink:"/reference/clients/js/client-config",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/clients/js/client-config.md",tags:[],version:"current",frontMatter:{id:"client-config",title:"Client Config"},sidebar:"docs",previous:{title:"PolywrapClient Config Builder",permalink:"/reference/clients/js/client-config-builder-js"},next:{title:"@polywrap/asyncify-js",permalink:"/reference/clients/js/libraries/asyncify-js"}},s={},c=[{value:"Redirects",id:"redirects",level:2},{value:"Plugins",id:"plugins",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Envs",id:"envs",level:2},{value:"Uri Resolvers",id:"uri-resolvers",level:2},{value:"Default Configuration",id:"default-configuration",level:2},{value:"Sanitization",id:"sanitization",level:2}],p={toc:c},u="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Polywrap Client accepts a ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfig")," argument at construction.\nThe default configuration can be modified to redirect URIs, use different plugins, register interface implementations,\nset environmental variables, and customize URI resolution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ClientConfig<TUri extends Uri | string = string> {\n  redirects: UriRedirect<TUri>[]; // redirect queries from one uri to another\n  plugins: PluginRegistration<TUri>[]; // declare and configure plugins\n  interfaces: InterfaceImplementations<TUri>[]; // declare interface implementations\n  envs: Env<TUri>[]; // set environmental variables\n  uriResolvers: UriResolver[]; // resolve custom URIs\n}\n")),(0,i.kt)("h2",{id:"redirects"},"Redirects"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"redirects")," property can be used to redirect queries from one URI to another.\nThis redirection occurs in all queries to the URI, even in cases where one wrapper calls another during its execution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface UriRedirect<TUri = string> {\n  from: TUri; // uri to redirect from\n  to: TUri; // uri to redirct to\n}\n")),(0,i.kt)("h2",{id:"plugins"},"Plugins"),(0,i.kt)("p",null,"Polywrap plugin wrappers are written in a Client\u2019s native language.\nThey offer a user experience similar to that of wrappers, but with different benefits."),(0,i.kt)("p",null,"Plugins are declared and constructed in the Client config by providing an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"PluginRegistration"),".\nEach ",(0,i.kt)("inlineCode",{parentName:"p"},"PluginRegistration")," contains the URI at which the plugin will be queried and a ",(0,i.kt)("inlineCode",{parentName:"p"},"PluginPackage"),".\nA ",(0,i.kt)("inlineCode",{parentName:"p"},"PluginPackage")," is a factory function the ",(0,i.kt)("a",{parentName:"p",href:"./client-js"},(0,i.kt)("inlineCode",{parentName:"a"},"PolywrapClient"))," uses to create new\ninstances of the plugin.\nEach plugin can have its own configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface PluginRegistration<TUri = string> {\n  uri: TUri; // URI that will be redirected to plugin\n  plugin: PluginPackage<unknown>; // plugin factory\n}\n")),(0,i.kt)("h2",{id:"interfaces"},"Interfaces"),(0,i.kt)("p",null,"Users can declare custom implementations for an interface by providing the interface URI and one or more URIs that resolve to implementations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface InterfaceImplementations<TUri = string> {\n  interface: TUri; // interface URI\n  implementations: TUri[]; // URIs of wrappers implementing interface\n}\n")),(0,i.kt)("h2",{id:"envs"},"Envs"),(0,i.kt)("p",null,"Because wrapper calls are sandboxed and stateless, they cannot access the global state that persists outside the call.\nUsers can instead provide wrapper-specific environmental variables in the Client configuration.\nWrapper developers are expected to inform users which environmental variables should be set for their API."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Env<TUri = string> {\n  uri: TUri; // URI of wrapper\n  env: Record<string, unknown>; // environmental variables used by the module\n}\n")),(0,i.kt)("h2",{id:"uri-resolvers"},"Uri Resolvers"),(0,i.kt)("p",null,"Users can extend the Client's URI resolution capabilities by providing new implementations of ",(0,i.kt)("inlineCode",{parentName:"p"},"UriResolver"),".\nA ",(0,i.kt)("inlineCode",{parentName:"p"},"UriResolver")," takes a URI as input and resolves it to a wrapper or plugin."),(0,i.kt)("p",null,'By default, the Client includes an ExtendableUriResolver that can accept ENS, IPFS, and filesystem URIs as input and fetch wrappers from those sources.\nIt is "extendable" in the sense that it works with any plugin or wrapper that implements the ',(0,i.kt)("inlineCode",{parentName:"p"},"UriResolverInterface"),".\nThe Client's default resolvers can also resolve URI's that point to redirects, plugins, and cached wrappers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"abstract class UriResolver {\n  public abstract get name(): string;\n\n  public abstract resolveUri(\n    uri: Uri,\n    client: Client,\n    cache: ApiCache,\n    resolutionPath: UriResolutionStack\n  ): Promise<UriResolutionResult>;\n}\n")),(0,i.kt)("h2",{id:"default-configuration"},"Default Configuration"),(0,i.kt)("p",null,"The current default ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfig")," for the JavaScript implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"PolywrapClient")," can be viewed on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/polywrap/monorepo/blob/origin/packages/js/client/src/default-client-config.ts"},"Github"),".\nWhen a user provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfig")," to the Client, the default configuration is still applied.\nThe default configuration is modified by the user's configuration."),(0,i.kt)("h2",{id:"sanitization"},"Sanitization"),(0,i.kt)("p",null,"The Client's configuration is ",(0,i.kt)("em",{parentName:"p"},"sanitized")," when the Client is constructed.\nDuring the sanitization process, URI strings are validated and transformed into instances of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Uri")," class."))}f.isMDXComponent=!0}}]);