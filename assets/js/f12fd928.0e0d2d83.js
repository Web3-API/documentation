(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{168:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(3),l=n(8),i=(n(0),n(180)),r=["components"],o={id:"polywrap-cli",title:"Polywrap CLI",sidebar_position:0},p={unversionedId:"reference/cli/polywrap-cli",id:"reference/cli/polywrap-cli",isDocsHomePage:!1,title:"Polywrap CLI",description:"The Polywrap CLI (polywrap)",source:"@site/docs/reference/cli/polywrap-cli.md",slug:"/reference/cli/polywrap-cli",permalink:"/reference/cli/polywrap-cli",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/cli/polywrap-cli.md",version:"current",sidebar:"docs",previous:{title:"Reference Documentation",permalink:"/reference/glossary"},next:{title:"Create",permalink:"/reference/cli/commands/create"}},c=[{value:"Prerequisites",id:"prerequisites",children:[{value:"Docker",id:"docker",children:[]},{value:"Cue",id:"cue",children:[]}]},{value:"Installation",id:"installation",children:[]},{value:"Commands",id:"commands",children:[{value:"<code>help</code> command and <code>--help</code> option",id:"help-command-and---help-option",children:[]},{value:"<code>build | b</code>",id:"build--b",children:[]},{value:"<code>codegen | g</code>",id:"codegen--g",children:[]},{value:"<code>create | c</code>",id:"create--c",children:[]},{value:"<code>deploy | d</code>",id:"deploy--d",children:[]},{value:"<code>infra | i</code>",id:"infra--i",children:[]},{value:"<code>test | t</code>",id:"test--t",children:[]},{value:"<code>docgen | o</code>",id:"docgen--o",children:[]},{value:"<code>manifest | m</code>",id:"manifest--m",children:[]},{value:"The <code>-c, --client-config</code> option",id:"the--c---client-config-option",children:[]},{value:"The <code>--wrapper-envs</code> option",id:"the---wrapper-envs-option",children:[]}]},{value:"Logging",id:"logging",children:[{value:"Logging levels",id:"logging-levels",children:[]},{value:"Logging to a file",id:"logging-to-a-file",children:[]}]}],b={toc:c};function s(e){var t=e.components,n=Object(l.a)(e,r);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"the-polywrap-cli-polywrap"},"The Polywrap CLI (",Object(i.b)("inlineCode",{parentName:"h1"},"polywrap"),")"),Object(i.b)("a",{href:"https://www.npmjs.com/package/polywrap",target:"_blank",rel:"noopener noreferrer"},Object(i.b)("img",{src:"https://img.shields.io/npm/v/polywrap.svg",alt:"npm"})),Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)("p",null,"A command-line interface for building and deploying Polywrap projects."),Object(i.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(i.b)("h3",{id:"docker"},"Docker"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," is required to perform some tasks, including to ",Object(i.b)("inlineCode",{parentName:"p"},"build")," Wasm wrappers.\nLinux users will also need to install ",Object(i.b)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose"),".\nDocker is free for personal use. Once Docker is installed and enabled, you're ready to go!"),Object(i.b)("h3",{id:"cue"},"Cue"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap run")," command can validate runs by examining ",Object(i.b)("inlineCode",{parentName:"p"},"stdout")," output using ",Object(i.b)("strong",{parentName:"p"},"Cue"),". If you need to run workflow validations, you will have to install Cue."),Object(i.b)("p",null,"You can install Cue by following the instructions found ",Object(i.b)("a",{parentName:"p",href:"https://cuelang.org/docs/install/"},"here"),"."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"Within a single project:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev polywrap\n")),Object(i.b)("p",null,"Globally:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"npm install -g polywrap\n")),Object(i.b)("p",null,"Alternatively, ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap")," can be run without installation:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"npx polywrap\n")),Object(i.b)("h2",{id:"commands"},"Commands"),Object(i.b)("h3",{id:"help-command-and---help-option"},Object(i.b)("inlineCode",{parentName:"h3"},"help")," command and ",Object(i.b)("inlineCode",{parentName:"h3"},"--help")," option"),Object(i.b)("p",null,"To list available commands, use the ",Object(i.b)("inlineCode",{parentName:"p"},"help")," command or the ",Object(i.b)("inlineCode",{parentName:"p"},"-h, --help")," option:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"polywrap help\npolywrap --help\n")),Object(i.b)("p",null,"Alternatively, you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"-h, --help")," option within any command to get a full list of available subcommands, arguments and options."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"polywrap create --help\npolywrap codegen --help\n")),Object(i.b)("h3",{id:"build--b"},Object(i.b)("inlineCode",{parentName:"h3"},"build | b")),Object(i.b)("p",null,"Build Wasm and Interface Polywrap projects.\nThis outputs the project's ABI schema (Wasm and Interface) and binary package (Wasm) into the ",Object(i.b)("inlineCode",{parentName:"p"},"./build")," directory."),Object(i.b)("h4",{id:"options"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-m, --manifest-file <path>"),"\nSpecify your project's manifest file.\nBy default, ",Object(i.b)("inlineCode",{parentName:"p"},"build")," searches for ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.yaml"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-o, --output-dir <path>"),"\nSpecify an alternative directory for build output.\nThe default codegen output directory is ",Object(i.b)("inlineCode",{parentName:"p"},"./build"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-c, --client-config <config-path>"),"\nUse a custom Polywrap Client configuration.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"--wrapper-envs <envs-path>"),"\nConfigure wrapper environment values using the provided file.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-n, --no-codegen"),"\nDon't perform codegen before building.\nBy default, ",Object(i.b)("inlineCode",{parentName:"p"},"build")," performs a ",Object(i.b)("inlineCode",{parentName:"p"},"codegen")," step before building your Project. This option skips this step. This is especially useful when you are testing manual changes to your types/bindings.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-s, --strategy <strategy>"),"\nSpecify which build strategy to use. By default, the ",Object(i.b)("inlineCode",{parentName:"p"},"vm")," build strategy is used.\nAvailable strategies:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"vm"),": Uses Docker only for the source building part of the build process. At build time, it pulls a pre-built image with all necessary system dependencies, env vars and runtime; and it instantiates a Docker container with it. The Docker container instantiates bind-mounts (volumes) to copy the sources and dependencies from the host, build the sources inside the container, and copy the build artifacts back to the host machine. This approach ensures that the sources will be built in a reproducible environment but it doesn't use Docker for anything else and no image is built at runtime."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"image"),": Implies building a Docker image at runtime, where dependencies are installed and sources are copied and built as Dockerfile instructions. On subsequent builds, Docker tries to reuse cached image layers and rebuild accordingly. This approach is notably slow but the complete process happens in Docker, and can be reproduced, examined and audited layer by layer (from dependency installation to build artifacts output)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"local")," - Does not use Docker at all. It simply executes a .sh file that contains the necessary instructions to install dependencies and build sources. While this is the fastest way of building, it requires you, the user, to have all prerequisite system dependencies installed. In addition, given that sources are built on the host machine and not a reproducible docker environment, reproducibility isn't guaranteed."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-w, --watch"),"\nWatch the Project's files and automatically rebuild when a file is changed."))),Object(i.b)("h3",{id:"codegen--g"},Object(i.b)("inlineCode",{parentName:"h3"},"codegen | g")),Object(i.b)("p",null,"Generate code bindings for Polywrap projects."),Object(i.b)("p",null,"This command generates types and bindings for your project based on your project's schema (found in ",Object(i.b)("inlineCode",{parentName:"p"},"schema.graphql"),")."),Object(i.b)("h4",{id:"options-1"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-m, --manifest-file <path>"),"\nSpecify your project's manifest file.\nBy default, ",Object(i.b)("inlineCode",{parentName:"p"},"docgen")," searches for ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.yaml"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-g, --codegen-dir <path>"),"\nSpecify an alternative directory for codegen output.\nThe default codegen output directory is ",Object(i.b)("inlineCode",{parentName:"p"},"./wrap"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-p, --publish-dir <path>"),"\nOutput path for the built schema and manifest (default: ",Object(i.b)("inlineCode",{parentName:"p"},"./build"),")\nThis only applies when running ",Object(i.b)("inlineCode",{parentName:"p"},"codegen")," for Plugin Projects.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-s, --script <path>"),"\nPath to a custom generation script (JavaScript | TypeScript).\nThis script is run in place of the standard codegen script if provided.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-c, --client-config <config-path>"),"\nUse a custom Polywrap Client configuration.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"--wrapper-envs <envs-path>"),"\nConfigure wrapper environment values using the provided file."))),Object(i.b)("h4",{id:"special-note"},"Special note"),Object(i.b)("p",null,"When running ",Object(i.b)("inlineCode",{parentName:"p"},"codegen")," for Plugin Projects, the Polywrap CLI will also output an ABI schema for your plugin into the ",Object(i.b)("inlineCode",{parentName:"p"},"./build")," directory. You can override this output directory by specifying ",Object(i.b)("inlineCode",{parentName:"p"},"-p, --publish-dir <path>"),"."),Object(i.b)("h3",{id:"create--c"},Object(i.b)("inlineCode",{parentName:"h3"},"create | c")),Object(i.b)("p",null,"Create a Polywrap project."),Object(i.b)("p",null,"This command sets up a basic Polywrap-enabled project based on a pre-defined template."),Object(i.b)("h4",{id:"subcommands"},"Subcommands"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"polywrap create wasm <language> <name>")),Object(i.b)("p",null,"Set up a Polywrap WASM Wrapper or Interface project."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"polywrap create app <language> <name>")),Object(i.b)("p",null,"Set up a NodeJS or React application which uses the Polywrap Client to invoke wrappers."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"polywrap create plugin <language> <name>")),Object(i.b)("p",null,"Set up a Polywrap Plugin project used to provide the Polywrap Cient with additional functionality."),Object(i.b)("h4",{id:"arguments"},"Arguments"),Object(i.b)("p",null,"All subcommands share the following arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"language")," (required)\nThe type/language of the created project")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"name")," (required)\nThe project name."))),Object(i.b)("h4",{id:"options-2"},"Options"),Object(i.b)("p",null,"All subcommands share the following options:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"-o, --output-dir <path>"),"\nSpecifies a custom output directory for the created project.")),Object(i.b)("h4",{id:"sample-usage"},"Sample usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'# Create a wrapper project using assemblyscript called "my-wrapper"\npolywrap create wasm assemblyscript my-wrapper\n\n# Create an interface project using assemblyscript called "my-project"\npolywrap create wasm interface my-interface\n\n# Create a React app project using Typescript called "my-react-app"\npolywrap create app typescript-react my-react-app\n\n# Create a Plugin wrapper project using Typescript called "my-plugin"\npolywrap create plugin typescript my-plugin\n')),Object(i.b)("h3",{id:"deploy--d"},Object(i.b)("inlineCode",{parentName:"h3"},"deploy | d")),Object(i.b)("p",null,"Deploy Polywrap projects."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"polywrap deploy\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"deploy")," reads the Deploy manifest (",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.deploy.yaml")," by default) and executes the jobs and steps listed inside."),Object(i.b)("p",null,"For more information on the Deploy command and the Deploy manifest, see ",Object(i.b)("a",{parentName:"p",href:"https://docs.polywrap.io/quick-start/build-and-deploy-wasm-wrappers/deploy-pipeline"},"Configure Polywrap deployment pipeline"),"."),Object(i.b)("h4",{id:"options-3"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-m, --manifest-file <path>"),"\nSpecify your project's manifest file.\nBy default, ",Object(i.b)("inlineCode",{parentName:"p"},"deploy")," searches for ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.yaml"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-o, --output-file <path>"),"\nOutput file path for the deploy result"))),Object(i.b)("h3",{id:"infra--i"},Object(i.b)("inlineCode",{parentName:"h3"},"infra | i")),Object(i.b)("p",null,"Modular Infrastructure-As-Code Orchestrator"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"polywrap infra <action> [options]\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"infra")," command is used to set up infrastructure to test and deploy your wrappers locally."),Object(i.b)("p",null,"For more information on the ",Object(i.b)("inlineCode",{parentName:"p"},"infra")," command and how to create your own Infra modules, see ",Object(i.b)("a",{parentName:"p",href:"https://docs.polywrap.io/quick-start/test-wasm-wrappers/infra-pipeline"},"Configure Polywrap infrastructure pipeline")),Object(i.b)("h4",{id:"arguments-1"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"action")," (required)\nInfra allows you to execute the following actions:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"up"),"\nStart Polywrap infrastructure"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"down"),"\nStop Polywrap infrastructure"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"config"),"\nValidate and display Polywrap infrastructure's bundled docker-compose manifest"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"vars"),"\nShow Polywrap infrastructure's required .env variables")))),Object(i.b)("h4",{id:"options-4"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-m, --manifest-file <path>"),"\nSpecify the ",Object(i.b)("inlineCode",{parentName:"p"},"infra")," extension manifest file.\nBy default, ",Object(i.b)("inlineCode",{parentName:"p"},"infra")," searches for ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.infra.yaml"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-o, --modules <module, module>"),"\nUse only specified modules"))),Object(i.b)("h4",{id:"defaults"},"Defaults"),Object(i.b)("p",null,"Polywrap comes with a default ",Object(i.b)("inlineCode",{parentName:"p"},"eth-ens-ipfs")," module which can be used to test your wrappers locally:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"polywrap infra up --modules=eth-ens-ipfs\n")),Object(i.b)("p",null,"The default infrastructure module defines a docker container with:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A test server at http://localhost:4040"),Object(i.b)("li",{parentName:"ul"},"A Ganache Ethereum test network at http://localhost:8545"),Object(i.b)("li",{parentName:"ul"},"An IPFS node at http://localhost:5001")),Object(i.b)("p",null,"It also sets up ENS smart contracts at initialization, so you can build wrappers and deploy them to an ENS registry on your locally hosted testnet."),Object(i.b)("p",null,"Addresses for the components of ENS:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Registry: ",Object(i.b)("inlineCode",{parentName:"li"},"0xe78A0F7E598Cc8b0Bb87894B0F60dD2a88d6a8Ab")),Object(i.b)("li",{parentName:"ul"},"Resolver: ",Object(i.b)("inlineCode",{parentName:"li"},"0x5b1869D9A4C187F2EAa108f3062412ecf0526b24")),Object(i.b)("li",{parentName:"ul"},"Registrar: ",Object(i.b)("inlineCode",{parentName:"li"},"0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb")),Object(i.b)("li",{parentName:"ul"},"Reverse Registrar: ",Object(i.b)("inlineCode",{parentName:"li"},"0xe982E462b094850F12AF94d21D470e21bE9D0E9C"))),Object(i.b)("h3",{id:"test--t"},Object(i.b)("inlineCode",{parentName:"h3"},"test | t")),Object(i.b)("p",null,"Run Test manifests. "),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"test")," command executes a series of Wrapper invocations called ",Object(i.b)("strong",{parentName:"p"},"steps")," organized into ",Object(i.b)("strong",{parentName:"p"},"jobs"),".\nAll steps within a job are run in series, while jobs are run in parallel."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"polywrap test [options]\n")),Object(i.b)("h4",{id:"options-5"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-m, --manifest-file <path>"),"\nSpecify the Workflow extension manifest file.\nBy default, ",Object(i.b)("inlineCode",{parentName:"p"},"run")," searches for ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.test.yaml"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-c, --client-config <config-path>"),"\nUse a custom Polywrap Client configuration.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"--wrapper-envs <envs-path>"),"\nConfigure wrapper environment values using the provided file.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-o, --output-file <output-file-path>"),"\nSpecify the output file path for the workflow result")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-j, --jobs <jobs...>"),"\nSpecify ids of jobs that you want to run"))),Object(i.b)("h4",{id:"the-test-manifest-polywraptestyaml"},"The Test manifest (",Object(i.b)("inlineCode",{parentName:"h4"},"polywrap.test.yaml"),")"),Object(i.b)("p",null,"Basic structure:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'# The basic structure of a test file \nname: my-test-name #the name of the test\nformat: 0.1.0\nvalidation: "path/to/validator.cue" #(optional) path to a validator file (cuelang)\njobs:\n  first:\n    steps: #each step is a wrapper invocation that consists of a URI, the invoked method and its arguments\n    - uri: ens/example.eth\n      method: helloWorld\n      args:\n        arg1: "test"\n        ...\n    - ...\n    jobs: #after all job steps are executed, additional jobs can be run in parallel\n      ...\n  second:\n    ...\n')),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"jobs")," is a map of ",Object(i.b)("inlineCode",{parentName:"p"},"<string, Job>"),", the key being each Job's name."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  helloWorld:\n    ...\n  helloPolywrap:\n    ...\n")),Object(i.b)("p",null,"Each Job consists of two properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"a ",Object(i.b)("inlineCode",{parentName:"li"},"steps")," collection",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"This is a wrapper invocation, consisting of:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"uri")," - the WRAP URI of the wrapper"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"method")," - the name of the invoked wrapper method"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"args")," (optional) - a map of the invoked method's arguments"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"config")," (optional) - a map of client config properties to be added/overridden"))))),Object(i.b)("li",{parentName:"ul"},"an inner ",Object(i.b)("inlineCode",{parentName:"li"},"jobs")," map, making the structure of ",Object(i.b)("inlineCode",{parentName:"li"},"Job")," recursive.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  helloWorld:\n    steps:\n    - uri: ens/helloworld.polywrap.eth #ENS URI\n      method: helloWorld\n      args:\n        name: test\n    - uri: fs/./hello-polywrap/build #Filesystem URI\n      method: helloPolywrap\n    jobs:\n      innerJob1:\n      ...\n      innerJob2:\n      ...\n  helloPolywrap:\n    steps:\n    ...\n    jobs:\n    ...\n")),Object(i.b)("p",null,"When running a Test manifest, all top-level Jobs are run in parallel. Within those Jobs, each step is run in series. After all steps for a Job have been run, the inner ",Object(i.b)("inlineCode",{parentName:"p"},"jobs")," are run in parallel, with their ",Object(i.b)("inlineCode",{parentName:"p"},"steps")," run in series, and so on."),Object(i.b)("p",null,"You can reference the result (",Object(i.b)("inlineCode",{parentName:"p"},"data"),"/",Object(i.b)("inlineCode",{parentName:"p"},"error"),") of any step by using the ",Object(i.b)("inlineCode",{parentName:"p"},"$")," symbol:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'jobs:\n  helloWorld:\n    steps:\n    - uri: ens/helloworld.polywrap.eth #ENS URI\n      method: helloWorld\n      args:\n        name: test\n    - uri: fs/./hello-polywrap/build #Filesystem URI\n      method: helloPolywrap\n    jobs:\n      innerJob1:\n        steps:\n        - uri: ens/helloworld.polywrap.eth\n          method: helloWorld\n          args:\n            name: "$helloWorld.1.data" #Reference to `helloWorld`\'s 2nd step return value\n        jobs:\n          innerJob11:\n            steps:\n            - uri: ens/helloworld.polywrap.eth\n              method: helloWorld\n              args:\n                name: "$helloWorld.innerJob1.0.error" #Reference to helloWorld\'s innerJob1 1st step error\n')),Object(i.b)("h4",{id:"test-validation"},"Test validation"),Object(i.b)("p",null,"By specifying a ",Object(i.b)("inlineCode",{parentName:"p"},"validation")," file within your Test manifest, the result of the run will be validated using ",Object(i.b)("inlineCode",{parentName:"p"},"cue"),"."),Object(i.b)("p",null,"Example of a validation file:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cuelang"},'helloWorld: {\n  $0: {\n    data: "Hello test!",\n    error?: _|_, // Never fails\n  }\n  $1: {\n    data: "Hello Polywrap!",\n    error?: _|_, // Never fails\n  }\n  innerJob1: {\n    $0: {\n      data: "Hello Hello test!!",\n      error?: _|_,\n    }\n  }\n}\n')),Object(i.b)("h3",{id:"docgen--o"},Object(i.b)("inlineCode",{parentName:"h3"},"docgen | o")),Object(i.b)("p",null,"Generate wrapper documentation for your project."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"polywrap docgen <action>\n")),Object(i.b)("h4",{id:"arguments-2"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"action")," (required)\nSpecifies the kind of documentation generated.\nValues:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"schema"),"\nGenerates GraphQL-like schema for your project."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"docusaurus"),"\nGenerates Docusaurus markdown for your project."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"jsdoc"),"\nGenerates JSDoc markdown for your project.")))),Object(i.b)("h4",{id:"options-6"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-m, --manifest-file <path>"),"\nSpecify your project's manifest file.\nBy default, ",Object(i.b)("inlineCode",{parentName:"p"},"docgen")," searches for ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.yaml"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-g, --docgen-dir <path>"),"\nSpecify the output directory for generated docs.\nBy default, ",Object(i.b)("inlineCode",{parentName:"p"},"./docs")," is used.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-c, --client-config <config-path>"),"\nUse a custom Polywrap Client configuration.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"--wrapper-envs <envs-path>"),"\nConfigure wrapper environment values using the provided file.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-i, --imports"),"\nGenerate docs for your project's dependencies as well."))),Object(i.b)("h3",{id:"manifest--m"},Object(i.b)("inlineCode",{parentName:"h3"},"manifest | m")),Object(i.b)("p",null,"Inspect and migrate Polywrap manifests."),Object(i.b)("h4",{id:"subcommands-1"},"Subcommands"),Object(i.b)("h4",{id:"schema--s"},Object(i.b)("inlineCode",{parentName:"h4"},"schema | s")),Object(i.b)("p",null,"Output the schema for any of your Project or Extension manifests. "),Object(i.b)("p",null,"Usage:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"# Output schema for the current project manifest (polywrap.yaml)\npolywrap manifest schema\n")),Object(i.b)("h5",{id:"arguments-3"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type"),"\nThe type of the manifest file. The default value for ",Object(i.b)("inlineCode",{parentName:"li"},"type")," is ",Object(i.b)("inlineCode",{parentName:"li"},"project"),".")),Object(i.b)("h5",{id:"options-7"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"-r, --raw"),"\nOutput the full JSON Schema for the given manifest."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"-m, --manifest-file <path>"),"\nThe manifest file for which the schema will be rendered. The ",Object(i.b)("inlineCode",{parentName:"li"},"type")," argument determines the default manifest file used.\nFor example, ",Object(i.b)("inlineCode",{parentName:"li"},"polywrap manifest schema build")," will use ",Object(i.b)("inlineCode",{parentName:"li"},"polywrap.build.yaml")," as its default manifest file.")),Object(i.b)("h4",{id:"migrate--m"},Object(i.b)("inlineCode",{parentName:"h4"},"migrate | m")),Object(i.b)("p",null,"Migrate a Project or Extension manifest file to the the latest version, or a version specified."),Object(i.b)("p",null,"Usage:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"# Migrate the current project manifest (polywrap.yaml)\npolywrap manifest migrate\n")),Object(i.b)("h5",{id:"arguments-4"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type"),"\nThe type of the manifest file. The default value for ",Object(i.b)("inlineCode",{parentName:"li"},"type")," is ",Object(i.b)("inlineCode",{parentName:"li"},"project"),".")),Object(i.b)("h5",{id:"options-8"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-f, --format <format>"),"\nMigrate to a specific format instead of the latest."),Object(i.b)("p",{parentName:"li"},"Example:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"# Migrate the current project manfiest to format 0.2.0\npolywrap manifest migrate -f 0.2.0\n# or\npolywrap m m -f 0.2.0\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-m, --manifest-file <path>"),"\nThe manifest file for which the schema will be rendered. The ",Object(i.b)("inlineCode",{parentName:"p"},"type")," argument determines the default manifest file used.\nFor example, ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap manifest migrate build")," will use ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.build.yaml")," as its default manifest file."),Object(i.b)("p",{parentName:"li"},"Example:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},'# Migrate "custom-manifest.yaml" to the latest format\npolywrap manifest migrate -m custom-manifest.yaml\n# or\npolywrap m m -m custom-manifest.yaml\n')))),Object(i.b)("h3",{id:"the--c---client-config-option"},"The ",Object(i.b)("inlineCode",{parentName:"h3"},"-c, --client-config")," option"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"build"),", ",Object(i.b)("inlineCode",{parentName:"p"},"codegen"),", ",Object(i.b)("inlineCode",{parentName:"p"},"docgen")," and ",Object(i.b)("inlineCode",{parentName:"p"},"test")," commands allow the user to configure the Polywrap Client via the ",Object(i.b)("inlineCode",{parentName:"p"},"-c, --client-config <config-path>")," option."),Object(i.b)("p",null,"You can supply a path to a Javascript or Typescript module which exports a function named ",Object(i.b)("inlineCode",{parentName:"p"},"getClientConfig"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"// asynchronous option\nexport async function getClientConfig(\n  defaultConfigs: Partial<PolywrapClientConfig>\n): Promise<Partial<PolywrapClientConfig>>\n\n// synchronous option\nexport function getClientConfig(\n  defaultConfigs: Partial<PolywrapClientConfig>\n): Partial<PolywrapClientConfig>\n")),Object(i.b)("h3",{id:"the---wrapper-envs-option"},"The ",Object(i.b)("inlineCode",{parentName:"h3"},"--wrapper-envs")," option"),Object(i.b)("p",null,"All commands which support the ",Object(i.b)("inlineCode",{parentName:"p"},"-c, --client-config")," option also support the ",Object(i.b)("inlineCode",{parentName:"p"},"--wrapper-envs <envs-path>")," option.\nThis option allows the user to set environment values for Wrappers using a simple YAML or JSON file."),Object(i.b)("p",null,"For example, if you would like to change the API key used within the Ethereum plugin wrapper, you can create a ",Object(i.b)("inlineCode",{parentName:"p"},"envs.yaml")," file:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"ens/ethereum.polywrap.eth:\n  connection:\n    node: https://mainnet.infura.io/v3/YOUR_API_KEY # Use Infura with your API key\n    networkNameOrChainId: mainnet\n")),Object(i.b)("p",null,"You can then run the ",Object(i.b)("inlineCode",{parentName:"p"},"build"),", ",Object(i.b)("inlineCode",{parentName:"p"},"codegen"),", ",Object(i.b)("inlineCode",{parentName:"p"},"docgen")," and ",Object(i.b)("inlineCode",{parentName:"p"},"test")," and specify your custom ",Object(i.b)("inlineCode",{parentName:"p"},"--wrapper-envs"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"polywrap codegen --wrapper-envs envs.yaml\n")),Object(i.b)("p",null,"You can also pass environment variables into the wrappper-envs file by using ",Object(i.b)("inlineCode",{parentName:"p"},"$"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"ens/ethereum.polywrap.eth:\n  connection:\n    node: $MY_INFURA_NODE # Use environment variable called MY_INFURA_NODE\n    networkNameOrChainId: mainnet\n")),Object(i.b)("p",null,"If you need to use the ",Object(i.b)("inlineCode",{parentName:"p"},"$")," sign within your wrapper-envs file, you can escape it using ",Object(i.b)("inlineCode",{parentName:"p"},"$$"),"."),Object(i.b)("h2",{id:"logging"},"Logging"),Object(i.b)("p",null,"By default, the Polywrap CLI outputs all of its messages to the console."),Object(i.b)("h3",{id:"logging-levels"},"Logging levels"),Object(i.b)("p",null,"Different levels of output verbosity are supported by using the following options:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-v, --verbose"),"\nEnables logging of informational messages in addition to standard output.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"-q, --quiet"),"\nDisables ALL logging. Overrides the ",Object(i.b)("inlineCode",{parentName:"p"},"--verbose")," option."))),Object(i.b)("h3",{id:"logging-to-a-file"},"Logging to a file"),Object(i.b)("p",null,"You can also tell the Polywrap CLI to save its output to a logfile using the ",Object(i.b)("inlineCode",{parentName:"p"},"-l, --log-file [path]")," option."),Object(i.b)("p",null,"Specifying the ",Object(i.b)("inlineCode",{parentName:"p"},"-l")," option without a ",Object(i.b)("inlineCode",{parentName:"p"},"path")," parameter will create a log file within the ",Object(i.b)("inlineCode",{parentName:"p"},"./.polywrap/logs")," directory."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'# Output will be saved to the "./.polywrap/logs" directory\npolywrap codegen -l\n')),Object(i.b)("p",null,"Alternatively, you can specify your own log file path."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'# Output will be saved to "my-log-file.log"\npolywrap codegen -l my-log-file.log\n')))}s.isMDXComponent=!0},180:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var a=n(0),l=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=l.a.createContext({}),b=function(e){var t=l.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=b(e.components);return l.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},d=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=b(n),d=a,m=s["".concat(r,".").concat(d)]||s[d]||u[d]||i;return n?l.a.createElement(m,o(o({ref:t},c),{},{components:n})):l.a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<i;c++)r[c]=n[c];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);