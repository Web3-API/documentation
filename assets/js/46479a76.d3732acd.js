"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[4953],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,h=u["".concat(l,".").concat(d)]||u[d]||f[d]||a;return n?r.createElement(h,c(c({ref:t},p),{},{components:n})):r.createElement(h,c({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1500:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={id:"fetch",title:"Fetch"},c=void 0,i={unversionedId:"demos/uniswapv3/queries/fetch",id:"demos/uniswapv3/queries/fetch",title:"Fetch",description:"fetchToken",source:"@site/docs/demos/uniswapv3/queries/fetch.md",sourceDirName:"demos/uniswapv3/queries",slug:"/demos/uniswapv3/queries/fetch",permalink:"/demos/uniswapv3/queries/fetch",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/demos/uniswapv3/queries/fetch.md",tags:[],version:"current",frontMatter:{id:"fetch",title:"Fetch"}},l={},s=[{value:"fetchToken",id:"fetchtoken",level:3},{value:"fetchPoolFromTokens",id:"fetchpoolfromtokens",level:3},{value:"fetchPoolFromAddress",id:"fetchpoolfromaddress",level:3},{value:"fetchTickList",id:"fetchticklist",level:3}],p={toc:s},u="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"fetchtoken"},"fetchToken"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns token object constructed from the on-chain token contract at the given address")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"fetchToken(\n  address: String! # The Ethereum address of token's ERC20 contract\n  chainId: ChainId! # The id of the chain to be queried\n): Token!\n")),(0,o.kt)("h3",{id:"fetchpoolfromtokens"},"fetchPoolFromTokens"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns pool object constructed from the on-chain pool contract associated with the tokens and fee amount")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"fetchPoolFromTokens(\n  tokenA: Token! # A token in the pool\n  tokenB: Token! # The other token in the pool\n  fee: FeeAmount! # The pool's fee amount\n  fetchTicks: Boolean! # If true, the full list of pool ticks will be fetched\n): Pool!\n")),(0,o.kt)("h3",{id:"fetchpoolfromaddress"},"fetchPoolFromAddress"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns pool object constructed from the on-chain pool contract at the given address")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"fetchPoolFromAddress(\n  address: String! # The Ethereum address of the pool contract\n  chainId: ChainId! # The id of the chain to be queried\n  fetchTicks: Boolean! # If true, the full list of pool ticks will be fetched\n): Pool!\n")),(0,o.kt)("h3",{id:"fetchticklist"},"fetchTickList"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns array of ticks from the on-chain pool contract at the given address")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"fetchTickList(\n  address: String! # The Ethereum address of the pool contract\n  chainId: ChainId! # The id of the chain to be queried\n): Tick[]!\n")))}f.isMDXComponent=!0}}]);