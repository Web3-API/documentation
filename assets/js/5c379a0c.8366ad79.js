"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[5783],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>h});var r=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function c(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var o=r.createContext({}),l=function(e){var t=r.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):c(c({},t),e)),i},p=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),k=l(i),d=n,h=k["".concat(o,".").concat(d)]||k[d]||u[d]||a;return i?r.createElement(h,c(c({ref:t},p),{},{components:i})):r.createElement(h,c({ref:t},p))}));function h(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=i.length,c=new Array(a);c[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[k]="string"==typeof e?e:n,c[1]=s;for(var l=2;l<a;l++)c[l]=i[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,i)}d.displayName="MDXCreateElement"},9579:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=i(7462),n=(i(7294),i(3905));const a={id:"tickUtils",title:"Tick Utilities"},c=void 0,s={unversionedId:"demos/uniswapv3/queries/tickUtils",id:"demos/uniswapv3/queries/tickUtils",title:"Tick Utilities",description:"nearestUsableTick",source:"@site/docs/demos/uniswapv3/queries/tickUtils.md",sourceDirName:"demos/uniswapv3/queries",slug:"/demos/uniswapv3/queries/tickUtils",permalink:"/demos/uniswapv3/queries/tickUtils",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/demos/uniswapv3/queries/tickUtils.md",tags:[],version:"current",frontMatter:{id:"tickUtils",title:"Tick Utilities"}},o={},l=[{value:"nearestUsableTick",id:"nearestusabletick",level:3},{value:"tickToPrice",id:"ticktoprice",level:3},{value:"priceToClosestTick",id:"pricetoclosesttick",level:3},{value:"tickIsBelowSmallest",id:"tickisbelowsmallest",level:3},{value:"tickIsAtOrAboveLargest",id:"tickisatorabovelargest",level:3},{value:"nextInitializedTick",id:"nextinitializedtick",level:3},{value:"tickListIsSorted",id:"ticklistissorted",level:3},{value:"getSqrtRatioAtTick",id:"getsqrtratioattick",level:3},{value:"getTickAtSqrtRatio",id:"gettickatsqrtratio",level:3}],p={toc:l},k="wrapper";function u(e){let{components:t,...i}=e;return(0,n.kt)(k,(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"nearestusabletick"},"nearestUsableTick"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Returns the closest tick that is nearest a given tick and usable for the given tick spacing")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"nearestUsableTick(\n  tick: Int32! # The target tick\n  tickSpacing: Int32! # The spacing of the pool\n): Int32!\n")),(0,n.kt)("h3",{id:"ticktoprice"},"tickToPrice"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Returns a price object corresponding to the input tick and the base/quote token. Inputs must be tokens because the address order is used to interpret the price represented by the tick.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"tickToPrice(\n  baseToken: Token! # The base token of the price\n  quoteToken: Token! # The quote token of the price\n  tick: Int32! # The tick for which to return the price\n): Price!\n")),(0,n.kt)("h3",{id:"pricetoclosesttick"},"priceToClosestTick"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Returns the first tick for which the given price is greater than or equal to the tick price.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"priceToClosestTick(\n  price: Price! # Price for which to return the closest tick that represents a price less than or equal to the input price, i.e. the price of the returned tick is less than or equal to the input price.\nNote that a string price is not used as input here, so the 'price' property of the Price type can have any value without affecting the results.\n): Int32!\n")),(0,n.kt)("h3",{id:"tickisbelowsmallest"},"tickIsBelowSmallest"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Returns true if the tick index is smaller than all tick indices in the list")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"tickIsBelowSmallest(\n  ticks: Tick[]! # Tick list to check\n  tick: Int32! # Input tick index\n): Boolean!\n")),(0,n.kt)("h3",{id:"tickisatorabovelargest"},"tickIsAtOrAboveLargest"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Returns true if the tick index is greater than or equal to all tick indices in the list")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"tickIsAtOrAboveLargest(\n  ticks: Tick[]! # Tick list to check\n  tick: Int32! # Input tick index\n): Boolean!\n")),(0,n.kt)("h3",{id:"nextinitializedtick"},"nextInitializedTick"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Returns next initialized tick following the input tick")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"nextInitializedTick(\n  ticks: Tick[]! # Tick list to check\n  tick: Int32! # Input tick index\n  lte: Boolean! # If true, searches list for next initialized tick that has index less than or equal to the input tick index\n): Tick!\n")),(0,n.kt)("h3",{id:"ticklistissorted"},"tickListIsSorted"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Returns true if a tick list is sorted by tick index")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"tickListIsSorted(\n  ticks: Tick[]! # The tick list\n): Boolean!\n")),(0,n.kt)("h3",{id:"getsqrtratioattick"},"getSqrtRatioAtTick"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"getSqrtRatioAtTick(\n  tick: Int32! # The tick for which to compute the sqrt ratio\n): BigInt!\n")),(0,n.kt)("h3",{id:"gettickatsqrtratio"},"getTickAtSqrtRatio"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Returns the tick corresponding to a given sqrt ratio, such that getSqrtRatioAtTick(tick) <= sqrtRatioX96 and getSqrtRatioAtTick(tick + 1) > sqrtRatioX96")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"getTickAtSqrtRatio(\n  sqrtRatioX96: BigInt! # The sqrt ratio as a Q64.96 for which to compute the tick\n): Int32!\n")))}u.isMDXComponent=!0}}]);