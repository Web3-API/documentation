(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{195:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=i.a.createContext({}),s=function(e){var t=i.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),b=a,m=p["".concat(l,".").concat(b)]||p[b]||d[b]||r;return n?i.a.createElement(m,o(o({ref:t},u),{},{components:n})):i.a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},197:function(e,t,n){"use strict";function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}},198:function(e,t,n){"use strict";var a=n(0),i=n(199);t.a=function(){const e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},199:function(e,t,n){"use strict";var a=n(0);const i=Object(a.createContext)(void 0);t.a=i},200:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=n(198),l=n(197),o=n(57),c=n.n(o);const u=37,s=39;t.a=function(e){const{lazy:t,block:n,defaultValue:o,values:p,groupId:d,className:b}=e,{tabGroupChoices:m,setTabGroupChoices:f}=Object(r.a)(),[h,y]=Object(a.useState)(o),g=a.Children.toArray(e.children),O=[];if(null!=d){const e=m[d];null!=e&&e!==h&&p.some(t=>t.value===e)&&y(e)}const w=e=>{const t=e.target,n=O.indexOf(t),a=g[n].props.value;y(a),null!=d&&(f(d,a),setTimeout(()=>{(function(e){const{top:t,left:n,bottom:a,right:i}=e.getBoundingClientRect(),{innerHeight:r,innerWidth:l}=window;return t>=0&&i<=l&&a<=r&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(c.a.tabItemActive),setTimeout(()=>t.classList.remove(c.a.tabItemActive),2e3))},150))},j=e=>{var t;let n;switch(e.keyCode){case s:{const t=O.indexOf(e.target)+1;n=O[t]||O[0];break}case u:{const t=O.indexOf(e.target)-1;n=O[t]||O[O.length-1];break}}null===(t=n)||void 0===t||t.focus()};return i.a.createElement("div",{className:"tabs-container"},i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":n},b)},p.map(e=>{let{value:t,label:n}=e;return i.a.createElement("li",{role:"tab",tabIndex:h===t?0:-1,"aria-selected":h===t,className:Object(l.a)("tabs__item",c.a.tabItem,{"tabs__item--active":h===t}),key:t,ref:e=>O.push(e),onKeyDown:j,onFocus:w,onClick:w},n)})),t?Object(a.cloneElement)(g.filter(e=>e.props.value===h)[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},g.map((e,t)=>Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==h}))))}},201:function(e,t,n){"use strict";var a=n(0),i=n.n(a);t.a=function(e){let{children:t,hidden:n,className:a}=e;return i.a.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(3),i=(n(0),n(195)),r=n(200),l=n(201);const o={id:"build-pipeline",title:"Configure Polywrap build pipeline"},c={unversionedId:"quick-start/build-and-deploy-wasm-wrappers/build-pipeline",id:"quick-start/build-and-deploy-wasm-wrappers/build-pipeline",isDocsHomePage:!1,title:"Configure Polywrap build pipeline",description:"In this section, we'll explore the Polywrap's build pipeline and how to configure it.",source:"@site/docs/quick-start/build-and-deploy-wasm-wrappers/build-pipeline.md",slug:"/quick-start/build-and-deploy-wasm-wrappers/build-pipeline",permalink:"/quick-start/build-and-deploy-wasm-wrappers/build-pipeline",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/quick-start/build-and-deploy-wasm-wrappers/build-pipeline.md",version:"current",sidebar:"docs",previous:{title:"Configure Polywrap infrastructure pipeline",permalink:"/quick-start/test-wasm-wrappers/infra-pipeline"},next:{title:"Deploy to IPFS",permalink:"/quick-start/build-and-deploy-wasm-wrappers/deploy-to-ipfs"}},u=[{value:"Build pipeline",id:"build-pipeline",children:[]},{value:"Build Manifest",id:"build-manifest",children:[{value:"Declaration",id:"declaration",children:[]},{value:"Content",id:"content",children:[]}]},{value:"Customizing the Dockerfile",id:"customizing-the-dockerfile",children:[{value:"Mustache support",id:"mustache-support",children:[]}]}],s={toc:u};function p(e){let{components:t,...n}=e;return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this section, we'll explore the Polywrap's build pipeline and how to configure it.\nThis article will help you understand the follow concepts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Polywrap's build pipeline"),Object(i.b)("li",{parentName:"ul"},"Customizing the Build Manifest file"),Object(i.b)("li",{parentName:"ul"},"Customizing the Dockerfile")),Object(i.b)("h2",{id:"build-pipeline"},"Build pipeline"),Object(i.b)("p",null,"The build process begins by running the ",Object(i.b)("a",{parentName:"p",href:"../../reference/cli/commands/build"},Object(i.b)("inlineCode",{parentName:"a"},"build"))," command from the ",Object(i.b)("a",{parentName:"p",href:"../../reference/cli/polywrap-cli"},Object(i.b)("inlineCode",{parentName:"a"},"polywrap"))," CLI.\nThe command will first search for the ",Object(i.b)("a",{parentName:"p",href:"../create-wasm-wrappers/polywrap-manifest"},"Polywrap Manifest"),", find the wrapper schema and implementation, and move these files into a Docker image. "),Object(i.b)("p",null,"Within the docker image, the wrapper schema is parsed and its contents are extracted into an ABI.\nThe ABI is used to generate binding code for the wrapper.\nThe wrapper is then compiled into a Wasm module.\nThe ABI and the Polywrap Manifest are merged into a Wrap Manifest file called ",Object(i.b)("inlineCode",{parentName:"p"},"wrap.info"),"."),Object(i.b)("p",null,"While the default build settings work well for many projects, the toolchain offers a highly configurable build pipeline for those who need more customization."),Object(i.b)("h2",{id:"build-manifest"},"Build Manifest"),Object(i.b)("p",null,"The Build Manifest ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.build.yaml")," file is the entry point to build pipeline configuration."),Object(i.b)("h3",{id:"declaration"},"Declaration"),Object(i.b)("p",null,"The location of the Build Manifest must be declared in your ",Object(i.b)("a",{parentName:"p",href:"../create-wasm-wrappers/polywrap-manifest"},"Polywrap Manifest")," with a field labeled ",Object(i.b)("em",{parentName:"p"},"build"),".\nIf a custom build manifest is not declared, the default build configuration will be used."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"build: ./polywrap.build.yaml\n")),Object(i.b)("h3",{id:"content"},"Content"),Object(i.b)(r.a,{defaultValue:"schema",values:[{label:"Schema",value:"schema"},{label:"Example",value:"example"},{label:"Default Configuration",value:"default"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"schema",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: # Polywrap YAML Format version\ndocker: # (Optional) Custom Docker configuration\n  name: # (Optional) Docker image name\n  dockerfile: # (Optional) Docker image file name\n  buildx: # (Optional) Configuration options for Docker Buildx, set to true for default value.\n    cache: # (Optional) Path to cache directory, set to true for default value, set to false to disable caching\n    remove builder: # (Optional) Remove the builder instance\n  removeImage: # (Optional) Remove the image\nconfig: # (Optional) Custom build image configurations\n  node_version: # (Optional) Node version\n  include: # (Optional) Files to include in build\nlinked_packages: # (Optional) Array of locally linked packages into docker build image\n  - name: # Package name\n    path: # Path to linked package directory\n    filter: # (Optional) Ignore files matching this regex in linked package directory\n"))),Object(i.b)(l.a,{value:"example",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\ndocker:\n  name: build-env\nconfig:\n  node_version: '14.16.0'\n  include:\n    - ./package.json\n"))),Object(i.b)(l.a,{value:"default",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\ndocker:\n  name: polywrap-build-env\n  dockerfile: ./Dockerfile.mustache # uses default Dockerfile\nconfig:\n  node_version: 16.13.0\n  include: # module folder and project manifests are always included\n    - ./package.json\n")))),Object(i.b)("h2",{id:"customizing-the-dockerfile"},"Customizing the Dockerfile"),Object(i.b)("p",null,"Those who need to fully customize the Docker image build steps can customize the Dockerfile.\nThe Dockerfile is a text file containing instructions for Docker to build images.\nYou can learn more about it at Docker's ",Object(i.b)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/"},"Dockerfile documentation"),"."),Object(i.b)("p",null,"To begin, either copy the default Dockerfile from the ",Object(i.b)("inlineCode",{parentName:"p"},".polywrap/wasm/build/image")," folder or create your own."),Object(i.b)("p",null,"Then, in the ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.build.yaml")," file, add a key called ",Object(i.b)("inlineCode",{parentName:"p"},"dockerfile")," with the path of the newly created Dockerfile as the value.\nThat's it! Now, you can customize the Dockerfile to your heart's content."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\ndocker:\n  name: build-env\n  dockerfile: ./Dockerfile\n")),Object(i.b)("h3",{id:"mustache-support"},"Mustache support"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://mustache.github.io/"},"Mustache")," is a logic-less template system that can be used for HTML, config files, and more.\nYou can learn more about writing Mustache templates ",Object(i.b)("a",{parentName:"p",href:"https://mustache.github.io/mustache.5.html"},"here"),"."),Object(i.b)("p",null,"To enable Mustache capabilities for your Dockerfile, name your custom Dockerfile with a ",Object(i.b)("inlineCode",{parentName:"p"},".mustache")," file extension:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"dockerfile: ./Dockerfile.mustache\n")),Object(i.b)("p",null,"With Mustache, your Dockerfile will be able to recognize variable tags set within the ",Object(i.b)("inlineCode",{parentName:"p"},"config")," field of the Build Manifest.\nFor example, in your Build Manifest file, you could have a key such as ",Object(i.b)("inlineCode",{parentName:"p"},"foo")," with the value ",Object(i.b)("inlineCode",{parentName:"p"},"hey")," like so:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"format: 0.1.0\ndocker:\n  name: build-env\n  dockerfile: ./Dockerfile.mustache\nconfig:\n  foo: hey\n")),Object(i.b)("p",null,"To use this variable in your Mustache-enabled Dockerfile, simply reference the variable with curly braces like so:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dockerfile"},"{{ foo }}\n")))}p.isMDXComponent=!0}}]);