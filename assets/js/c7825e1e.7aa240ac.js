"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[1597],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),f=i,g=u["".concat(s,".").concat(f)]||u[f]||d[f]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},3760:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={id:"configure-client",title:"Configure the Polywrap Client"},o=void 0,l={unversionedId:"tutorials/integrate-wrappers/configure-client",id:"tutorials/integrate-wrappers/configure-client",title:"Configure the Polywrap Client",description:"The Polywrap Client accepts a ClientConfig argument at construction.",source:"@site/docs/tutorials/integrate-wrappers/configure-client.md",sourceDirName:"tutorials/integrate-wrappers",slug:"/tutorials/integrate-wrappers/configure-client",permalink:"/tutorials/integrate-wrappers/configure-client",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/integrate-wrappers/configure-client.md",tags:[],version:"current",frontMatter:{id:"configure-client",title:"Configure the Polywrap Client"},sidebar:"docs",previous:{title:"Creating the Polywrap client instance",permalink:"/tutorials/integrate-wrappers/create-client-instance"},next:{title:"Generate types for your app",permalink:"/tutorials/integrate-wrappers/types-for-app"}},s={},c=[{value:"The <code>ClientConfig</code> object",id:"the-clientconfig-object",level:2},{value:"The <code>ClientConfigBuilder</code>",id:"the-clientconfigbuilder",level:2},{value:"Redirects",id:"redirects",level:2},{value:"Plugins",id:"plugins",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Envs",id:"envs",level:2},{value:"Uri Resolvers",id:"uri-resolvers",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Polywrap Client accepts a ",(0,i.kt)("a",{parentName:"p",href:"/reference/clients/js/client-config"},(0,i.kt)("inlineCode",{parentName:"a"},"ClientConfig"))," argument at construction. "),(0,i.kt)("p",null,"While the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/polywrap/monorepo/blob/origin/packages/js/client/src/default-client-config.ts"},"default Client Config"),"\nis sufficient for some use cases, you will likely want to customize it.\nThe config you provide to the client will modify and add to the default configuration."),(0,i.kt)("h2",{id:"the-clientconfig-object"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"ClientConfig")," object"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/reference/clients/js/client-js"},(0,i.kt)("inlineCode",{parentName:"a"},"PolywrapClient"))," can be configured to redirect URIs, use different plugins,\nregister interface implementations, set environmental variables, and customize URI resolution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ClientConfig {\n  redirects: UriRedirect[]; // redirect queries from one uri to another\n  plugins: PluginRegistration[]; // declare and configure plugins\n  interfaces: InterfaceImplementations[]; // declare interface implementations\n  envs: Env[]; // set environmental variables\n  uriResolvers: UriResolver[]; // resolve custom URIs\n}\n")),(0,i.kt)("h2",{id:"the-clientconfigbuilder"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"ClientConfigBuilder")),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfigBuilder")," class present in ",(0,i.kt)("inlineCode",{parentName:"p"},"@polywrap/client-config-builder-js")," to easily build the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfig")," object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const config = new ClientConfigBuilder()\n  .addDefaults()\n  // add or remove configs here using ClientConfigBuilder methods...\n  .build();\n\n// We must specify `noDefaults: true` because they are included with the `addDefaults()` method of the ClientConfigBuilder.\nconst client = new PolywrapClient(config, { noDefaults: true });\n")),(0,i.kt)("p",null,"Alternatively, default configs will be added to the start of our custom configuration if we just pass a built ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfig")," to the client without specifying ",(0,i.kt)("inlineCode",{parentName:"p"},"{ noDefaults: true }")," in the options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const config = new ClientConfigBuilder()\n  // add or remove configs here using ClientConfigBuilder methods...\n  .build();\n\n// The PolywrapClient adds defaults as a first step, then applies our `config` object\nconst client = new PolywrapClient(config);\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If you are using any kind of custom configuration, it is recommended that you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfigBuilder")," to build your configuration objects, as the Polywrap client and its configurations are undergoing a major change from version ",(0,i.kt)("inlineCode",{parentName:"p"},"0.9")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"0.10"),". Doing so will ensure that you encounter as few breaking changes as possible - most likely none.")),(0,i.kt)("h2",{id:"redirects"},"Redirects"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/tutorials/understanding-uri-redirects"},"URI Redirects")," can be used to redirect queries from one URI to another.\nThis redirection occurs in all queries to the URI, even in cases where one wrapper calls another during its execution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const clientConfig: Partial<ClientConfig> = {\n  redirects: [\n    {\n      from: "wrap://ens/from.eth", // uri to redirect from\n      to: "wrap://ens/to.eth", // uri to redirct to\n    }\n  ],\n};\n')),(0,i.kt)("p",null,"We can also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfigBuilder")," to add a URI Redirect to our config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const config = new ClientConfigBuilder()\n  .addDefaults()\n  .addUriRedirect("wrap://ens/from.eth", "wrap://ens/to.eth")\n  .build();\n')),(0,i.kt)("h2",{id:"plugins"},"Plugins"),(0,i.kt)("p",null,"To use a ",(0,i.kt)("a",{parentName:"p",href:"/tutorials/understanding-plugins"},"plugin wrapper"),", it has to be registered in the ",(0,i.kt)("a",{parentName:"p",href:"/reference/clients/js/client-config"},(0,i.kt)("inlineCode",{parentName:"a"},"ClientConfig")),".\nEach item in the array of plugins contains the URI at which the plugin will be invoked and a ",(0,i.kt)("inlineCode",{parentName:"p"},"PluginPackage"),".\nA ",(0,i.kt)("inlineCode",{parentName:"p"},"PluginPackage")," is a factory function the ",(0,i.kt)("a",{parentName:"p",href:"/reference/clients/js/client-js"},(0,i.kt)("inlineCode",{parentName:"a"},"PolywrapClient"))," uses to create new\ninstances of the plugin.\nEach plugin can have its own configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const clientConfig: Partial<ClientConfig> = {\n  plugins: [\n    {\n      uri: "wrap://ens/ethereum.polywrap.eth",\n      plugin: ethereumPlugin({\n        networks: {\n          testnet: {\n            provider: "http://localhost:8545"\n          },\n        },\n        defaultNetwork: "testnet",\n      }),\n    },\n  ],\n};\n')),(0,i.kt)("p",null,"We can also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfigBuilder")," to add a Plugin to our config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const config = new ClientConfigBuilder()\n  .addDefaults()\n  .addPlugin(\n    "wrap://ens/ethereum.polywrap.eth", \n    ethereumPlugin({\n      networks: {\n        testnet: {\n          provider: "http://localhost:8545"\n        },\n      },\n      defaultNetwork: "testnet",\n    })\n  )\n  .build();\n')),(0,i.kt)("h2",{id:"interfaces"},"Interfaces"),(0,i.kt)("p",null,"Users can declare custom implementations for an interface by providing the interface URI and one or more URIs that resolve to implementations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const clientConfig: Partial<ClientConfig> = {\n  interfaces: [\n    {\n      interface: "wrap://ens/logger.core.polywrap.eth",\n      implementations: ["wrap://ens/js-logger.polywrap.eth"],\n    },\n  ],\n};\n')),(0,i.kt)("p",null,"We can also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfigBuilder")," to add an Interface implementation to our config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const config = new ClientConfigBuilder()\n  .addDefaults()\n  .addInterfaceImplementation("wrap://ens/logger.core.polywrap.eth", "wrap://ens/js-logger.polywrap.eth")\n  .build();\n')),(0,i.kt)("h2",{id:"envs"},"Envs"),(0,i.kt)("p",null,"Users can provide wrapper-specific environmental variables by providing the wrapper URI and an object with strings as keys.\nWrapper developers use the ",(0,i.kt)("a",{parentName:"p",href:"../wrapper-schema#environmental-variables"},"Wrapper Schema")," to specify which methods accept or require environmental variables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const clientConfig: Partial<ClientConfig> = {\n  envs: [\n    {\n      uri: "wrap://ens/wrapper.eth",\n      env: {\n        connection: {\n          networkNameOrChainId: "polygon",\n        },\n      },\n    },\n  ],\n};\n')),(0,i.kt)("p",null,"We can also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfigBuilder")," to add an Interface implementation to our config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const config = new ClientConfigBuilder()\n  .addDefaults()\n  .addEnv(\n    "wrap://ens/wrapper.eth", \n    {\n      connection: {\n        networkNameOrChainId: "polygon",\n      },\n    }\n  )\n  .build();\n')),(0,i.kt)("h2",{id:"uri-resolvers"},"Uri Resolvers"),(0,i.kt)("p",null,"By default, the Client can resolve ENS, IPFS, and filesystem URIs.\nIt is possible to use custom URI Resolvers as well.\nDocumentation on how to do so is coming soon!"))}d.isMDXComponent=!0}}]);