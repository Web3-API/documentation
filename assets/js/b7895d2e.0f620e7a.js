"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[6586],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>d});var n=o(7294);function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){i(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function p(e,t){if(null==e)return{};var o,n,i=function(e,t){if(null==e)return{};var o,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var o=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(o),h=i,d=c["".concat(l,".").concat(h)]||c[h]||m[h]||r;return o?n.createElement(d,a(a({ref:t},u),{},{components:o})):n.createElement(d,a({ref:t},u))}));function d(e,t){var o=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=o.length,a=new Array(r);a[0]=h;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:i,a[1]=p;for(var s=2;s<r;s++)a[s]=o[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}h.displayName="MDXCreateElement"},4658:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=o(7462),i=(o(7294),o(3905));const r={id:"position",title:"Position"},a=void 0,p={unversionedId:"demos/uniswapv3/queries/position",id:"demos/uniswapv3/queries/position",title:"Position",description:"createPosition",source:"@site/docs/demos/uniswapv3/queries/position.md",sourceDirName:"demos/uniswapv3/queries",slug:"/demos/uniswapv3/queries/position",permalink:"/demos/uniswapv3/queries/position",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/demos/uniswapv3/queries/position.md",tags:[],version:"current",frontMatter:{id:"position",title:"Position"}},l={},s=[{value:"createPosition",id:"createposition",level:3},{value:"createPositionFromAmounts",id:"createpositionfromamounts",level:3},{value:"createPositionFromAmount0",id:"createpositionfromamount0",level:3},{value:"createPositionFromAmount1",id:"createpositionfromamount1",level:3},{value:"positionToken0PriceLower",id:"positiontoken0pricelower",level:3},{value:"positionToken0PriceUpper",id:"positiontoken0priceupper",level:3},{value:"positionAmount0",id:"positionamount0",level:3},{value:"positionAmount1",id:"positionamount1",level:3},{value:"mintAmounts",id:"mintamounts",level:3},{value:"mintAmountsWithSlippage",id:"mintamountswithslippage",level:3},{value:"burnAmountsWithSlippage",id:"burnamountswithslippage",level:3}],u={toc:s},c="wrapper";function m(e){let{components:t,...o}=e;return(0,i.kt)(c,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"createposition"},"createPosition"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Constructs and validates a liquidity Position for a given Pool with the given liquidity")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"createPosition(\n  pool: Pool! # For which pool the liquidity is assigned\n  tickLower: Int32! # The lower tick of the position\n  tickUpper: Int32! # The upper tick of the position\n  liquidity: BigInt! # The amount of liquidity that is in the position\n): Position!\n")),(0,i.kt)("h3",{id:"createpositionfromamounts"},"createPositionFromAmounts"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Computes the maximum amount of liquidity received for a given amount of token0, token1, and the prices at the tick boundaries")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"createPositionFromAmounts(\n  pool: Pool! # The pool for which the position should be created\n  tickLower: Int32! # The lower tick of the position\n  tickUpper: Int32! # The upper tick of the position\n  amount0: BigInt! # The amount of the first token of the pool\n  amount1: BigInt! # The amount of the second token of the pool\n  useFullPrecision: Boolean! # If false, liquidity will be maximized according to what the router can calculate, not what core can theoretically support\n): Position!\n")),(0,i.kt)("h3",{id:"createpositionfromamount0"},"createPositionFromAmount0"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"createPositionFromAmount0(\n  pool: Pool! # The pool for which the position should be created\n  tickLower: Int32! # The lower tick of the position\n  tickUpper: Int32! # The upper tick of the position\n  amount0: BigInt! # The desired amount of token0\n  useFullPrecision: Boolean! # If false, liquidity will be maximized according to what the router can calculate, not what core can theoretically support\n): Position!\n")),(0,i.kt)("h3",{id:"createpositionfromamount1"},"createPositionFromAmount1"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0. Always uses full precision.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"createPositionFromAmount1(\n  pool: Pool! # The pool for which the position should be created\n  tickLower: Int32! # The lower tick of the position\n  tickUpper: Int32! # The upper tick of the position\n  amount1: BigInt! # The desired amount of token1\n): Position!\n")),(0,i.kt)("h3",{id:"positiontoken0pricelower"},"positionToken0PriceLower"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Returns the price of token0 at the lower tick")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"positionToken0PriceLower(\n  pool: Pool! # The pool for which the liquidity is assigned\n  tickLower: Int32! # The lower tick of the position\n): Price!\n")),(0,i.kt)("h3",{id:"positiontoken0priceupper"},"positionToken0PriceUpper"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Returns the price of token0 at the upper tick")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"positionToken0PriceUpper(\n  pool: Pool! # The pool for which the liquidity is assigned\n  tickUpper: Int32! # The upper tick of the position\n): Price!\n")),(0,i.kt)("h3",{id:"positionamount0"},"positionAmount0"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Returns the amount of token0 that this position's liquidity could be burned for at the current pool price")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"positionAmount0(\n  pool: Pool! # For which pool the liquidity is assigned\n  tickLower: Int32! # The lower tick of the position\n  tickUpper: Int32! # The upper tick of the position\n  liquidity: BigInt! # The amount of liquidity that is in the position\n): TokenAmount!\n")),(0,i.kt)("h3",{id:"positionamount1"},"positionAmount1"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Returns the amount of token1 that this position's liquidity could be burned for at the current pool price")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"positionAmount1(\n  pool: Pool! # For which pool the liquidity is assigned\n  tickLower: Int32! # The lower tick of the position\n  tickUpper: Int32! # The upper tick of the position\n  liquidity: BigInt! # The amount of liquidity that is in the position\n): TokenAmount!\n")),(0,i.kt)("h3",{id:"mintamounts"},"mintAmounts"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at the current price for the pool")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"mintAmounts(\n  pool: Pool! # For which pool the liquidity is assigned\n  tickLower: Int32! # The lower tick of the position\n  tickUpper: Int32! # The upper tick of the position\n  liquidity: BigInt! # The amount of liquidity that is in the position\n): MintAmounts!\n")),(0,i.kt)("h3",{id:"mintamountswithslippage"},"mintAmountsWithSlippage"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Returns the minimum amounts that must be sent in order to safely mint the amount of liquidity held by the position with the given slippage tolerance")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"mintAmountsWithSlippage(\n  position: Position! # Position for which to calculate mint amounts\n  slippageTolerance: String! # Tolerance of unfavorable slippage from the current price\n): MintAmounts!\n")),(0,i.kt)("h3",{id:"burnamountswithslippage"},"burnAmountsWithSlippage"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the position with the given slippage tolerance")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"burnAmountsWithSlippage(\n  position: Position! # Position for which to calculate burn amounts\n  slippageTolerance: String! # Tolerance of unfavorable slippage from the current price\n): MintAmounts!\n")))}m.isMDXComponent=!0}}]);