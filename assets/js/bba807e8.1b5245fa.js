(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{135:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return p})),r.d(t,"default",(function(){return u}));var n=r(3),o=r(8),a=(r(0),r(162)),c=["components"],i={id:"ecosystem-tooling",title:"Ecosystem Tooling"},s={unversionedId:"resources/ecosystem-tooling",id:"resources/ecosystem-tooling",isDocsHomePage:!1,title:"Ecosystem Tooling",description:"Check out the great tools & services the Polywrap DAO contributors have made:",source:"@site/docs/resources/ecosystem-tooling.md",slug:"/resources/ecosystem-tooling",permalink:"/resources/ecosystem-tooling",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/resources/ecosystem-tooling.md",version:"current",sidebar:"docs",previous:{title:"Talks, Podcasts, and Videos",permalink:"/resources/talks-podcasts-and-videos"},next:{title:"The Polywrap Technical Standard",permalink:"/resources/the-polywrap-technical-standard"}},p=[],l={toc:p};function u(e){var t=e.components,r=Object(o.a)(e,c);return Object(a.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Check out the great tools & services the Polywrap DAO contributors have made:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://github.com/nerfZael/abi-to-wrap"},"Ethereum ABI -> Wrapper Generator"),": is a node.js console app that can read an Ethereum smart contract abi file and generate Polywrap wrapper code for schema and AssemblyScript modules.."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://github.com/nerfZael/wrap-persistence-node"},"Wrapper Persistence Node"),": is a node.js console app with an integrated IPFS node that can crawl/listen for all ENS wrapper registrations (via content records) and automatically pin the IPFS URIs.. "),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://github.com/nerfZael/wrappers"},Object(a.b)("inlineCode",{parentName:"a"},"wrappers")," CLI for Wrapper Persistence Node"),": is a command-line tool for publishing polywrap wrappers to IPFS via a wrap-persistence-node endpoint."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://github.com/defiwrapper/defiwrapper"},Object(a.b)("inlineCode",{parentName:"a"},"Defiwrapper"))," is a collection of different DeFi related polywrap wrappers(prev web3api) like defi-sdk, coingecko, etc. With Defiwrapper, we want to create a cross-chain multi-platform suite of DeFi related polywrap wrappers.")))}u.isMDXComponent=!0},162:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return f}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=n,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return r?o.a.createElement(f,i(i({ref:t},p),{},{components:r})):o.a.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,c=new Array(a);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var p=2;p<a;p++)c[p]=r[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);