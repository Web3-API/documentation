"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[5802],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),s=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=s(t.components);return a.createElement(o.Provider,{value:e},t.children)},d="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),d=s(n),c=r,g=d["".concat(o,".").concat(c)]||d[c]||u[c]||l;return n?a.createElement(g,i(i({ref:e},m),{},{components:n})):a.createElement(g,i({ref:e},m))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=c;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p[d]="string"==typeof t?t:r,i[1]=p;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3896:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const l={id:"schema-bind",hide_title:!0},i="@polywrap/schema-bind",p={unversionedId:"reference/schema/schema-bind",id:"reference/schema/schema-bind",title:"@polywrap/schema-bind",description:"Bind WRAP ABIs to a variety of supported languages through codegen.",source:"@site/docs/reference/schema/schema-bind.md",sourceDirName:"reference/schema",slug:"/reference/schema/schema-bind",permalink:"/reference/schema/schema-bind",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/schema/schema-bind.md",tags:[],version:"current",frontMatter:{id:"schema-bind",hide_title:!0},sidebar:"docs",previous:{title:"Polywrap Schema Compose (@polywrap/schema-compose)",permalink:"/reference/schema/schema-compose"},next:{title:"Wrapper Schema",permalink:"/tutorials/wrapper-schema"}},o={},s=[{value:"Usage",id:"usage",level:2},{value:"Details",id:"details",level:2},{value:"Supported Schema Types",id:"supported-schema-types",level:2}],m={toc:s},d="wrapper";function u(t){let{components:e,...n}=t;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"polywrapschema-bind"},"@polywrap/schema-bind"),(0,r.kt)("p",null,"Bind WRAP ABIs to a variety of supported languages through codegen."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { BindOptions, BindOutput, bindSchema } from "@polywrap/schema-bind";\nimport { parseSchema } from "@polywrap/schema-parse";\n\nconst schema = fetch("schema.graphql");\nconst abi = parseSchema(schema);\n\nconst input: BindOptions = {\n  projectName: "Test",\n  bindLanguage: "wasm-as",\n  abi,\n  schema,\n  outputDirAbs: "/path/to/output/dir"\n};\n\nconst output: BindOutput = bindSchema(input);\n')),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("p",null,"Polywrap uses MessagePack as a common data interchange format between languages. This allows Polywrap WASM modules, authored in different languages, to be run within a single host language (JS, Rust, Python, Go, C#, C++)."),(0,r.kt)("p",null,"MessagePack encoded data is sent between module boundaries. Decoding of the message will happen in the destination environment, using generated binding code, created by this package."),(0,r.kt)("h2",{id:"supported-schema-types"},"Supported Schema Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"GraphQL Schema Type"),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"th",href:"https://github.com/msgpack/msgpack/blob/master/spec.md#formats"},"MessagePack Type")),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt"),(0,r.kt)("td",{parentName:"tr",align:null},"uint 32"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit unsigned integer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt8"),(0,r.kt)("td",{parentName:"tr",align:null},"uint 8"),(0,r.kt)("td",{parentName:"tr",align:null},"8-bit unsigned integer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt16"),(0,r.kt)("td",{parentName:"tr",align:null},"uint 16"),(0,r.kt)("td",{parentName:"tr",align:null},"16-bit unsigned integer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt32"),(0,r.kt)("td",{parentName:"tr",align:null},"uint 32"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit unsigned integer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int"),(0,r.kt)("td",{parentName:"tr",align:null},"int 32"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit signed integer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int8"),(0,r.kt)("td",{parentName:"tr",align:null},"int 8"),(0,r.kt)("td",{parentName:"tr",align:null},"8-bit signed integer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int16"),(0,r.kt)("td",{parentName:"tr",align:null},"int 16"),(0,r.kt)("td",{parentName:"tr",align:null},"16-bit signed integer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int32"),(0,r.kt)("td",{parentName:"tr",align:null},"int 32"),(0,r.kt)("td",{parentName:"tr",align:null},"32-bit signed integer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"fixstr or str 8/16/32"),(0,r.kt)("td",{parentName:"tr",align:null},"UTF-8 string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"true or false stored as 1 byte.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"bin 8/16/32"),(0,r.kt)("td",{parentName:"tr",align:null},"array of 8-bit unsigned integer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BigInt"),(0,r.kt)("td",{parentName:"tr",align:null},"fixstr or str 8/16/32"),(0,r.kt)("td",{parentName:"tr",align:null},"UTF-8 string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BigNumber"),(0,r.kt)("td",{parentName:"tr",align:null},"fixstr or str 8/16/32"),(0,r.kt)("td",{parentName:"tr",align:null},"UTF-8 string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSON"),(0,r.kt)("td",{parentName:"tr",align:null},"fixstr or str 8/16/32"),(0,r.kt)("td",{parentName:"tr",align:null},"UTF-8 string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Type]"),(0,r.kt)("td",{parentName:"tr",align:null},"fixarray or array 16/32"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of elements.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map"),(0,r.kt)("td",{parentName:"tr",align:null},"Msgpack extention type"),(0,r.kt)("td",{parentName:"tr",align:null},"Map of key-value pairs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type CustomObject {",(0,r.kt)("br",null),"\xa0","\xa0","prop: Type",(0,r.kt)("br",null),"}"),(0,r.kt)("td",{parentName:"tr",align:null},"fixmap or map 16/32"),(0,r.kt)("td",{parentName:"tr",align:null},"Structured object.")))))}u.isMDXComponent=!0}}]);