"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[4468],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(a),g=r,d=u["".concat(p,".").concat(g)]||u[g]||m[g]||l;return a?n.createElement(d,o(o({ref:t},c),{},{components:a})):n.createElement(d,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=g;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,o),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(7462),r=a(7294),l=a(6010),o=a(2466),i=a(6550),p=a(1980),s=a(7392),c=a(12);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function m(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??u(a);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function g(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,p._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=m(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[p,s]=d({queryString:a,groupId:n}),[u,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,c.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),h=(()=>{const e=p??u;return g({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!g({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),y(e)}),[s,y,l]),tabValues:l}}var h=a(2389);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:a,selectedValue:i,selectValue:p,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),m=e=>{const t=e.currentTarget,a=c.indexOf(t),n=s[a].value;n!==i&&(u(t),p(n))},g=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},s.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:g,onClick:m},o,{className:(0,l.Z)("tabs__item",w.tabItem,o?.className,{"tabs__item--active":i===t})}),a??t)})))}function k(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function b(e){const t=y(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",w.tabList)},r.createElement(f,(0,n.Z)({},e,t)),r.createElement(k,(0,n.Z)({},e,t)))}function v(e){const t=(0,h.Z)();return r.createElement(b,(0,n.Z)({key:String(t)},e))}},7905:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),l=a(4866),o=a(5162);const i={id:"cli",title:"The Polywrap CLI"},p=void 0,s={unversionedId:"cli",id:"cli",title:"The Polywrap CLI",description:"Now that we have a basic understanding of the Polywrap Client, it's time to see how we can use the Polywrap CLI to create an amazing experience when working with Wraps.",source:"@site/docs/cli.md",sourceDirName:".",slug:"/cli",permalink:"/cli",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/cli.md",tags:[],version:"current",frontMatter:{id:"cli",title:"The Polywrap CLI"},sidebar:"docs",previous:{title:"Available Clients",permalink:"/clients"},next:{title:"Use case: Web3",permalink:"/use-cases/web3"}},c={},u=[{value:"Installation",id:"installation",level:2},{value:"Overview",id:"overview",level:2},{value:"Create a Polywrap-powered application",id:"create-a-polywrap-powered-application",level:2},{value:"The Polywrap Manifest (<code>polywrap.yaml</code>)",id:"the-polywrap-manifest-polywrapyaml",level:3},{value:"The Schema File (<code>polywrap.graphql</code>)",id:"the-schema-file-polywrapgraphql",level:3},{value:"Generating types (<code>codegen</code>)",id:"generating-types-codegen",level:3},{value:"Introduce type-safety into your code",id:"introduce-type-safety-into-your-code",level:2}],m={toc:u},g="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(g,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Now that we have a basic understanding of the Polywrap Client, it's time to see how we can use the Polywrap CLI to create an amazing experience when working with Wraps."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For all possible ways to install the Polywrap CLI, please refer to its ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/polywrap/cli/blob/origin-dev/packages/cli/README.md#the-polywrap-cli-polywrap"},"README"),".")),(0,r.kt)("p",null,"There are two main ways to install the Polywrap CLI:"),(0,r.kt)("p",null,"If you're developing in Javascript/Typescript and using Node, you can install the CLI globally:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-sesssion"},"npm i -g polywrap\n")),(0,r.kt)("p",null,"Alternatively, you can use the standalone version by downloading and running its install script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ sh <(curl https://raw.githubusercontent.com/polywrap/cli/origin-dev/install.sh)\n\n# Installs to `~/.polywrap`\n# If polywrap is already installed, the script instead checks for updates\n")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The Polywrap CLI allows us not only to build, test, and deploy Wraps, but also generate types for our applications which use the Polywrap Client."),(0,r.kt)("p",null,"This tutorial assumes that you installed ",(0,r.kt)("inlineCode",{parentName:"p"},"polywrap")," globally."),(0,r.kt)("p",null,"You can see all available commands by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"polywrap help\n")),(0,r.kt)("h2",{id:"create-a-polywrap-powered-application"},"Create a Polywrap-powered application"),(0,r.kt)("p",null,"Polywrap allows you to integrate wraps into your app in a type-safe manner for supported languages."),(0,r.kt)("p",null,"Currently, Polywrap has type-safety support for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Typescript"),(0,r.kt)("li",{parentName:"ul"},"Rust"),(0,r.kt)("li",{parentName:"ul"},"Python"),(0,r.kt)("li",{parentName:"ul"},"Kotlin"),(0,r.kt)("li",{parentName:"ul"},"Swift")),(0,r.kt)("p",null,"The Polywrap CLI allows you to create a template project in any of these languages with type safety built in."),(0,r.kt)("p",null,"Let's start with creating a new project using the Polywrap CLI:"),(0,r.kt)(l.Z,{groupId:"project",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",label:"Typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap create app typescript my-app\n"))),(0,r.kt)(o.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap create app rust my-app\n"))),(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap create app python my-app\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin/Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap create app android my-app\n"))),(0,r.kt)(o.Z,{value:"swift",label:"Swift/iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap create app ios my-app\n")))),(0,r.kt)("p",null,"This will create a basic application in the language of your choice.\nThere are two key files we want to take a look at, which define our Polywrap-powered project and allow us to perform code generation for type-safety. Let's take a look at them:"),(0,r.kt)("h3",{id:"the-polywrap-manifest-polywrapyaml"},"The Polywrap Manifest (",(0,r.kt)("inlineCode",{parentName:"h3"},"polywrap.yaml"),")"),(0,r.kt)("p",null,"In order for the Polywrap CLI to know what kind of project it's working with, it needs a Polywrap Manifest file to obtain some basic information about your project. This is the ",(0,r.kt)("inlineCode",{parentName:"p"},"polywrap.yaml")," file."),(0,r.kt)("p",null,"It has a structure similar to this:"),(0,r.kt)(l.Z,{groupId:"project",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",label:"Typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.yaml"',title:'"polywrap.yaml"'},"format: 0.5.0\nproject:\n  name: Sample\n  type: app/typescript\nsource:\n  schema: ./polywrap.graphql\n"))),(0,r.kt)(o.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.yaml"',title:'"polywrap.yaml"'},"format: 0.5.0\nproject:\n  name: Sample\n  type: app/rust\nsource:\n  schema: ./polywrap.graphql\n"))),(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.yaml"',title:'"polywrap.yaml"'},"format: 0.5.0\nproject:\n  name: Sample\n  type: app/python\nsource:\n  schema: ./polywrap.graphql\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin/Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.yaml"',title:'"polywrap.yaml"'},"format: 0.5.0\nproject:\n  name: Sample\n  type: app/kotlin\nsource:\n  schema: ./polywrap.graphql\n"))),(0,r.kt)(o.Z,{value:"swift",label:"Swift/iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.yaml"',title:'"polywrap.yaml"'},"format: 0.5.0\nproject:\n  name: Sample\n  type: app/swift\nsource:\n  schema: ./polywrap.graphql\n")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," property denotes the version of the Polywrap Manifest format. Under ",(0,r.kt)("inlineCode",{parentName:"p"},"project"),", you can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field to the name of your application, while the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," field describes the project type, thus letting the CLI know how to interact with the application code."),(0,r.kt)("p",null,"Under the ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," section, we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," field with a path that leads to a Schema file."),(0,r.kt)("h3",{id:"the-schema-file-polywrapgraphql"},"The Schema File (",(0,r.kt)("inlineCode",{parentName:"h3"},"polywrap.graphql"),")"),(0,r.kt)("p",null,"Every Polywrap project has a Schema file - it defines the types found within the project, what Wraps the project imports, and, in the context of a Wrap project, the methods that Wrap exposes."),(0,r.kt)("p",null,"In the context of an application project, the Schema file defines which Wraps our application imports and is used by the CLI to generate code with which we can invoke our Wraps in a type-safe manner."),(0,r.kt)("p",null,"Taking a look at the file, we can see ",(0,r.kt)("inlineCode",{parentName:"p"},"import")," statements:"),(0,r.kt)(l.Z,{groupId:"project",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",label:"Typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.graphql"',title:'"polywrap.graphql"'},'#import * into Logging from "wrapscan.io/polywrap/logging@1"\n#import * into Ethers from "wrapscan.io/polywrap/ethers@1.0"\n'))),(0,r.kt)(o.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.graphql"',title:'"polywrap.graphql"'},'#import * into Ipfs from "wrapscan.io/polywrap/ipfs-http-client@1.0"\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.graphql"',title:'"polywrap.graphql"'},'#import * into EthersUtils from "wrapscan.io/polywrap/ethers-utils@1"\n'))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin/Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.graphql"',title:'"polywrap.graphql"'},'#import * into Logging from "wrapscan.io/polywrap/logger@1.0"\n#import * into Ethereum from "wrapscan.io/polywrap/ethers@1.1.0"\n'))),(0,r.kt)(o.Z,{value:"swift",label:"Swift/iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="polywrap.graphql"',title:'"polywrap.graphql"'},'#import * into Logging from "wrapscan.io/polywrap/logger@1.0"\n#import * into Ethers from "wrapscan.io/polywrap/ethers@1.1"\n')))),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"import")," statement defines which Wraps we are importing, therefore using within our application."),(0,r.kt)("h3",{id:"generating-types-codegen"},"Generating types (",(0,r.kt)("inlineCode",{parentName:"h3"},"codegen"),")"),(0,r.kt)("p",null,'Now that we know how we can "import" Wraps into our application, we can use the ',(0,r.kt)("inlineCode",{parentName:"p"},"codegen")," command inside the Polywrap CLI to generate types that represent our Wraps which we can use within our application."),(0,r.kt)("p",null,"To generate types, all we need to do is run the ",(0,r.kt)("inlineCode",{parentName:"p"},"codegen")," command inside our project's root directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell-session"},"polywrap codegen\n")),(0,r.kt)("p",null,"This will generate types inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"wrap")," directory which you will be able to import within your application."),(0,r.kt)("h2",{id:"introduce-type-safety-into-your-code"},"Introduce type-safety into your code"),(0,r.kt)("p",null,"Now that we have our types generated, we can take a look at our sample application's main file."),(0,r.kt)("p",null,"Let's first take a look at some of the imports:"),(0,r.kt)(l.Z,{groupId:"project",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",label:"Typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},'import { Ethers, Logging } from "./wrap";\n'))),(0,r.kt)(o.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="lib.rs"',title:'"lib.rs"'},"use wrap::types::*;\n"))),(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="__main__.py"',title:'"__main__.py"'},"from .wrap import EthersUtils\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin/Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="PolywrapDemoViewModel.kt"',title:'"PolywrapDemoViewModel.kt"'},"import wrap.Ethereum\nimport wrap.EthereumArgsEncodeParams\nimport wrap.Logging\nimport wrap.LoggingArgsLog\nimport wrap.LoggingLogLevel\n"))),(0,r.kt)(o.Z,{value:"swift",label:"Swift/iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="PolywrapDemo.swift"',title:'"PolywrapDemo.swift"'},"// There is no need for imports in Swift, as all classes are in the app's namespace\n")))),(0,r.kt)("p",null,"Here we can see that we've imported Module types that represent our Wraps, according to their specified namespace. Using these types, we can invoke our Wraps in a type-safe manner, without having to repeatedly specify the Wrap URI or do any guesswork regarding invoke argument/return types:"),(0,r.kt)(l.Z,{groupId:"project",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",label:"Typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},'async function main() {\n  console.log("Invoking: Logging.info(...)");\n\n  const logger = new Logging();\n\n  await logger.info({\n    message: "Hello there",\n  });\n\n  await logger.info({\n    message: "Hello again",\n  });\n\n  await logger.info({\n    message: "One last time...",\n  });\n\n  console.log("Invoking: Ethereum.encodeParams(...)");\n\n  const eth = new Ethers();\n\n  const result = await eth.encodeParams({\n    types: ["address", "uint256"],\n    values: ["0xB1B7586656116D546033e3bAFF69BFcD6592225E", "500"],\n  });\n\n  if (result.ok) {\n    console.log(`Ethers.encodeParams:\\n${result.value}`);\n  } else {\n    console.log(`Error - Ethereum.encodeParams:\\n${result.error}`);\n  }\n}\n'))),(0,r.kt)(o.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="lib.rs"',title:'"lib.rs"'},'  let ipfs_provider = "https://ipfs.io";\n  let cid = "Qmc5gCcjYypU7y28oCALwfSvxCBskLuPKWpK4qpterKC7z";\n  let ipfs = Ipfs::new(None);\n\n  let data = ipfs.cat(&IpfsArgsCat{\n    cid: cid.to_string(),\n    ipfs_provider: ipfs_provider.to_string(),\n    timeout: None,\n    cat_options: None\n  }, None).unwrap();\n'))),(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="__main__.py"',title:'"__main__.py"'},'if __name__ == "__main__":\n    eth = EthersUtils()\n\n    print("Invoking: EthersUtils.encodeParams(...)")\n\n    result = eth.encode_params({\n        "types": ["address", "uint256"],\n        "values": ["0xB1B7586656116D546033e3bAFF69BFcD6592225E", "500"]\n    })\n\n    print(f"EthersUtils.encodeParams:\\n{result}")\n'))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin/Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="PolywrapDemoViewModel.kt"',title:'"PolywrapDemoViewModel.kt"'},'class PolywrapDemoViewModel: ViewModel() {\n    // we can create a custom client\n    val loggerInterfaceUri = "wrapscan.io/polywrap/logger@1.0"\n    private val client = polywrapClient {\n        addDefaults()\n        setPackage("plugin/logger" to loggerPlugin(null))\n        addInterfaceImplementation(loggerInterfaceUri, "plugin/logger")\n        setRedirect(loggerInterfaceUri to "plugin/logger")\n    }\n\n    // and use the custom client to create an SDK class instance\n    private val logger = Logging(client)\n    // the client can be shared across SDK instances\n    private val ethereum = Ethereum(client)\n\n    // Because their lifetimes are tied to the client, SDK instances work well as extension properties\n    val PolywrapClient.eth\n        get() = ethereum\n\n    // or we can create an SDK class instance with a new client using default configuration\n    private val defaultEth = Ethereum()\n\n    fun polywrapDemo() = viewModelScope.launch {\n        Log.i("polywrapDemo","Invoking: Logging.info(...)")\n\n        logger.log(LoggingArgsLog(LoggingLogLevel.INFO, "Hello there")).getOrThrow()\n        logger.log(LoggingArgsLog(LoggingLogLevel.INFO, "Hello again")).getOrThrow()\n        logger.log(LoggingArgsLog(LoggingLogLevel.INFO, "One last time...")).getOrThrow()\n\n        Log.i("polywrapDemo","Invoking: Ethereum.encodeParams(...)")\n\n        val encodeArgs = EthereumArgsEncodeParams(\n            types = listOf("address", "uint256"),\n            values = listOf("0xB1B7586656116D546033e3bAFF69BFcD6592225E", "500")\n        )\n        val result = client.eth.encodeParams(encodeArgs)\n\n        if (result.isSuccess) {\n            println("Ethereum.encodeParams:\\n${result.getOrThrow()}")\n        } else {\n            println("Error - Ethereum.encodeParams:\\n${result.exceptionOrNull()}")\n        }\n    }\n\n    override fun onCleared() {\n        super.onCleared()\n        // remember to close clients to prevent memory leaks when you\'re done using them\n        client.close()\n        defaultEth.client.close()\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"swift",label:"Swift/iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="PolywrapDemo.swift"',title:'"PolywrapDemo.swift"'},'func polywrapDemo() {\n    print("Invoking: Logging.info(...)")\n\n    let logger = Logging()\n    let logArgs = LoggingArgsLog(level: .INFO, message: "Hello there")\n    try? logger.log(args: logArgs)\n\n    // Ethers.encodeParams\n    print("Invoking: Ethers.encodeParams(...)")\n\n    let eth = Ethers()\n    let encodeArgs = EthersArgsEncodeParams(\n            types: ["address", "uint256"],\n            values: ["0xB1B7586656116D546033e3bAFF69BFcD6592225E", "500"]\n    )\n    do {\n        let encoded = try eth.encodeParams(args: encodeArgs)\n        print("Ethers.encodeParams:\\n\\(encoded)")\n    } catch {\n        let logArgs = LoggingArgsLog(level: .ERROR, message: "Error - Ethers.encodeParams: \\(error)")\n        try? logger.log(args: logArgs)\n        return\n    }\n}\n')))),(0,r.kt)("p",null,"This allows us to write all of our code in a type-safe manner, and allows for IDEs like VS Code to give us autocompletion suggestions via IntelliSense. Now we can explore our Wraps by simply importing them and trying them out!"))}d.isMDXComponent=!0}}]);