(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{194:function(e,n,r){"use strict";r.d(n,"a",(function(){return u})),r.d(n,"b",(function(){return m}));var t=r(0),a=r.n(t);function c(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){c(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},c=Object.keys(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},f=a.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,c=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),f=t,m=u["".concat(i,".").concat(f)]||u[f]||y[f]||c;return r?a.a.createElement(m,o(o({ref:n},l),{},{components:r})):a.a.createElement(m,o({ref:n},l))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=r.length,i=new Array(c);i[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:t,i[1]=o;for(var l=2;l<c;l++)i[l]=r[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},86:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return c})),r.d(n,"metadata",(function(){return i})),r.d(n,"toc",(function(){return o})),r.d(n,"default",(function(){return l}));var t=r(3),a=(r(0),r(194));const c={id:"asyncify-js",hide_title:!0},i={unversionedId:"reference/clients/js/libraries/asyncify-js",id:"reference/clients/js/libraries/asyncify-js",isDocsHomePage:!1,title:"asyncify-js",description:"@polywrap/asyncify-js",source:"@site/docs/reference/clients/js/libraries/asyncify-js.md",slug:"/reference/clients/js/libraries/asyncify-js",permalink:"/reference/clients/js/libraries/asyncify-js",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/clients/js/libraries/asyncify-js.md",version:"current",sidebar:"docs",previous:{title:"Client Config",permalink:"/reference/clients/js/client-config"},next:{title:"core-js",permalink:"/reference/clients/js/libraries/core-js"}},o=[{value:"Usage",id:"usage",children:[]}],s={toc:o};function l(e){let{components:n,...r}=e;return Object(a.b)("wrapper",Object(t.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"polywrapasyncify-js"},"@polywrap/asyncify-js"),Object(a.b)("p",null,"A 0 dependency wrapper around the Node.JS & Browser ",Object(a.b)("inlineCode",{parentName:"p"},"WebAssembly")," instance, which adds support for ",Object(a.b)("a",{parentName:"p",href:"https://emscripten.org/docs/porting/asyncify.html"},Object(a.b)("inlineCode",{parentName:"a"},"asyncify")),", enabling the use of async host import functions."),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'import { AsyncWasmInstance } from "@polywrap/asyncify-js";\n\n// module.wasm must be asyncify enabled\nconst module: ArrayBuffer = getModule("./module.wasm");\nconst memory = new WebAssembly.Memory({ initial: 1 });\n\nconst instance = await AsyncWasmInstance.createInstance({\n  module,\n  imports: {\n    my: {\n      custom_import: async (arg: number): Promise<number> => {\n        return await someAsyncCall(arg);\n      }\n    },\n    env: {\n      memory\n    }\n  }\n});\n\nawait instance.exports.main();\n')))}l.isMDXComponent=!0}}]);