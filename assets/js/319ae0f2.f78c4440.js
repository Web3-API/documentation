"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[730],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),h=a,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||i;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},1234:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={id:"rust",title:"Rust"},o=void 0,l={unversionedId:"quick-start/rust",id:"quick-start/rust",title:"Rust",description:"The Polywrap Client",source:"@site/docs/quick-start/rust.md",sourceDirName:"quick-start",slug:"/quick-start/rust",permalink:"/quick-start/rust",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/quick-start/rust.md",tags:[],version:"current",frontMatter:{id:"rust",title:"Rust"},sidebar:"docs",previous:{title:"Javascript",permalink:"/quick-start/javascript"},next:{title:"Python",permalink:"/quick-start/python"}},s={},p=[{value:"The Polywrap Client",id:"the-polywrap-client",level:2},{value:"Rust application boilerplate",id:"rust-application-boilerplate",level:3},{value:"Adding Polywrap to your application",id:"adding-polywrap-to-your-application",level:3},{value:"Invoking your first Wrap",id:"invoking-your-first-wrap",level:3},{value:"What&#39;s going on here?",id:"whats-going-on-here",level:4},{value:"The invocation result",id:"the-invocation-result",level:4},{value:"Universal SDKs",id:"universal-sdks",level:3},{value:"Compose everything",id:"compose-everything",level:3}],u={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"the-polywrap-client"},"The Polywrap Client"),(0,a.kt)("p",null,"To use ",(0,a.kt)("a",{parentName:"p",href:"/concepts/wraps"},"Wraps")," in your app, all you need is the ",(0,a.kt)("a",{parentName:"p",href:"/clients"},"Polywrap Client"),"!"),(0,a.kt)("h3",{id:"rust-application-boilerplate"},"Rust application boilerplate"),(0,a.kt)("p",null,"We'll be using a simple console application boilerplate for this guide."),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo init")," within a directory, initialize a Rust project."),(0,a.kt)("h3",{id:"adding-polywrap-to-your-application"},"Adding Polywrap to your application"),(0,a.kt)("p",null,"Within ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo.toml"),", add dependencies for ",(0,a.kt)("inlineCode",{parentName:"p"},"polywrap")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"serde"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="cargo.toml"',title:'"cargo.toml"'},'[dependencies]\npolywrap = "0.1.9-beta.2"\nserde = { version = "1.0.188", features = ["derive"] }\n')),(0,a.kt)("h3",{id:"invoking-your-first-wrap"},"Invoking your first Wrap"),(0,a.kt)("p",null,"In order to invoke a Wrap, we first need to instantiate the Polywrap Client:"),(0,a.kt)("p",null,"At the top of your ",(0,a.kt)("inlineCode",{parentName:"p"},"main.rs")," file, import ",(0,a.kt)("inlineCode",{parentName:"p"},"polywrap"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="main.rs"',title:'"main.rs"'},"use polywrap::*;\n")),(0,a.kt)("p",null,"Now, before invoking wraps, we need to define ",(0,a.kt)("inlineCode",{parentName:"p"},"struct"),"s that describe the arguments we're passing to the invocation, and, if applicable, the invocation return types."),(0,a.kt)("p",null,"In our first example, we will be invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"sha3_256")," function of the SHA3 Wrap, so we will define the following struct:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="main.rs"',title:'"main.rs"'},"#[derive(Serialize)]\nstruct Sha3_256Args {\n    message: String,\n}\n")),(0,a.kt)("p",null,"Within our ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function, we now want to initialize the Polywrap Client:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="main.rs"',title:'"main.rs"'},"    let mut config = PolywrapClientConfig::new();\n    config\n        .add(SystemClientConfig::default().into())\n        .add(Web3ClientConfig::default().into());\n\n    let client = PolywrapClient::new(config.build());\n")),(0,a.kt)("p",null,"At this point, you can invoke Wraps! In the example below, we will invoke the SHA3 wrap within our ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="main.rs"',title:'"main.rs"'},'    let result = client.invoke::<String>(\n        &uri!("wrapscan.io/polywrap/sha3@1.0"),\n        "sha3_256",\n        Some(\n            &to_vec(&Sha3_256Args {\n                message: "test".to_string(),\n            })\n            .unwrap(),\n        ),\n        None,\n        None,\n    );\n\n    match result {\n        Ok(v) => println!("{}", v),\n        Err(e) => panic!("{}", e),\n    };\n')),(0,a.kt)("p",null,"Running the application using ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run"),", you should now see the following appear in your console:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ba5a5d5fb7674f5975f0ecd0cd9a2f4bcadc9c04f5ac2ab3a887d8f10355fc38\n")),(0,a.kt)("p",null,"This is the return value of our invocation."),(0,a.kt)("h4",{id:"whats-going-on-here"},"What's going on here?"),(0,a.kt)("p",null,"Using the Polywrap Client, we are invoking the ",(0,a.kt)("inlineCode",{parentName:"p"},"sha3_256")," method of a Wrap found under the ",(0,a.kt)("a",{parentName:"p",href:"/concepts/uris"},"WRAP URI")," ",(0,a.kt)("inlineCode",{parentName:"p"},"wrapscan.io/polywrap/sha3@1.0")," called the SHA3 Wrap."),(0,a.kt)("p",null,"Under the hood, through a process we call URI Resolution, the Polywrap Client knows how to fetch and execute the Wrap from decentralized storage."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"PolywrapClient")," comes pre-configured with everything you need for most Web2 and Web3 use-cases by default."),(0,a.kt)("h4",{id:"the-invocation-result"},"The invocation result"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"invoke")," function returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum, from which you can:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Extract the return value of the Wrap invocation. This can be anything - a boolean value, a string, an object, etc."),(0,a.kt)("li",{parentName:"ul"},"A failed Wrap invocation returns an ",(0,a.kt)("inlineCode",{parentName:"li"},"Err()")," describing the reason for invocation failure.")),(0,a.kt)("h3",{id:"universal-sdks"},"Universal SDKs"),(0,a.kt)("p",null,"Now that we know how a Wrap is invoked, let's see Polywrap's true power: ",(0,a.kt)("strong",{parentName:"p"},"universal SDKs"),"!"),(0,a.kt)("p",null,"One of the greatest benefits of Polywrap for the end-user (you!) lies in the fact that you can use the Polywrap Client to invoke the same Wrap from a variety of platforms and languages. If there's a Polywrap Client for your language, you can invoke any Wrap. This means that you can use the same SDK across multiple languages!"),(0,a.kt)("p",null,"Another important benefit of using Polywrap is that, since Wraps are downloaded from various sources, you can automatically receive patches and updates to your SDKs without having to update your codebase."),(0,a.kt)("p",null,"Now we'll invoke the Uniswap V3 Wrap which is a port of the Uniswap SDK, but written as a Wrap."),(0,a.kt)("p",null,"We can use the Uniswap Wrap to fetch Uniswap's basic data related to the WETH and USDC tokes, find the address of the pool for those two tokens. We are also checking each result for errors."),(0,a.kt)("p",null,"Again, before invoking, we want to define the ",(0,a.kt)("inlineCode",{parentName:"p"},"struct"),"s we'll be using:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="main.rs"',title:'"main.rs"'},'#[derive(Serialize)]\nstruct FetchTokenArgs {\n    address: String,\n    #[serde(rename = "chainId")]\n    chain_id: String,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Currency {\n    decimals: u32,\n    symbol: String,\n    name: String,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Token {\n    address: String,\n    #[serde(rename = "chainId")]\n    chain_id: u32,\n    currency: Currency,\n}\n\n#[derive(Serialize)]\nstruct GetPoolAddressArgs {\n    #[serde(rename = "tokenA")]\n    token_a: Token,\n    #[serde(rename = "tokenB")]\n    token_b: Token,\n    fee: String,\n}\n')),(0,a.kt)("p",null,"After that, we can start using the Uniswap V3 Wrap within our ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="main.rs"',title:'"main.rs"'},'    let weth_result = client.invoke::<Token>(\n        &uri!("wrapscan.io/polywrap/uniswap-v3@1.0"),\n        "fetchToken",\n        Some(\n            &to_vec(&FetchTokenArgs {\n                address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2".to_string(),\n                chain_id: "MAINNET".to_string(),\n            })\n            .unwrap(),\n        ),\n        None,\n        None,\n    );\n\n    let weth = match weth_result {\n        Ok(v) => {\n            println!("WETH: {:#?}", v);\n            v\n        }\n        Err(e) => panic!("{}", e),\n    };\n\n    let usdc_result = client.invoke::<Token>(\n        &uri!("wrapscan.io/polywrap/uniswap-v3@1.0"),\n        "fetchToken",\n        Some(\n            &to_vec(&FetchTokenArgs {\n                address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48".to_string(),\n                chain_id: "MAINNET".to_string(),\n            })\n            .unwrap(),\n        ),\n        None,\n        None,\n    );\n\n    let usdc = match usdc_result {\n        Ok(v) => {\n            println!("USDC: {:#?}", v);\n            v\n        }\n        Err(e) => panic!("{}", e),\n    };\n\n    let pool_address_result = client.invoke::<String>(\n        &uri!("wrapscan.io/polywrap/uniswap-v3@1.0"),\n        "getPoolAddress",\n        Some(\n            &to_vec(&GetPoolAddressArgs {\n                token_a: weth,\n                token_b: usdc,\n                fee: "MEDIUM".to_string(),\n            })\n            .unwrap(),\n        ),\n        None,\n        None,\n    );\n\n    match pool_address_result {\n        Ok(v) => println!("Pool address: {}", v),\n        Err(e) => panic!("{}", e),\n    };\n')),(0,a.kt)("p",null,"You can see more examples on how to use the Uniswap V3 Wrap in its ",(0,a.kt)("a",{parentName:"p",href:"https://uniswap.docs.wrappers.io/"},"docs page"),"."),(0,a.kt)("h3",{id:"compose-everything"},"Compose everything"),(0,a.kt)("p",null,"So far, we've only invoked a single Wrap, essentially using Polywrap to access a single SDK."),(0,a.kt)("p",null,"Using the Polywrap Client, we can invoke any number of SDKs, allowing us to build infinitely composable applications. If there's a Wrap for it, we can invoke it and use its functionality."),(0,a.kt)("p",null,"Visit ",(0,a.kt)("a",{parentName:"p",href:"https://www.wrapscan.io/"},"Wrapscan")," and the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polywrap/awesome-polywrap"},"awesome-polywrap")," repository to find a curated list of Wraps we and our community have developed."))}d.isMDXComponent=!0}}]);