(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{162:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return f}));var r=a(0),n=a.n(r);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=n.a.createContext({}),s=function(e){var t=n.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},d=function(e){var t=s(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,f=d["".concat(o,".").concat(u)]||d[u]||m[u]||i;return a?n.a.createElement(f,p(p({ref:t},l),{},{components:a})):n.a.createElement(f,p({ref:t},l))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=a[l];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},99:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return p})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return d}));var r=a(3),n=a(8),i=(a(0),a(162)),o=["components"],p={id:"adding-metadata",title:"Adding Metadata"},c={unversionedId:"quick-start/create-wasm-wrappers/adding-metadata",id:"quick-start/create-wasm-wrappers/adding-metadata",isDocsHomePage:!1,title:"Adding Metadata",description:"Wrapper developers can add metadata to their wrappers by writing a Meta Manifest file named polywrap.meta.yaml.",source:"@site/docs/quick-start/create-wasm-wrappers/adding-metadata.md",slug:"/quick-start/create-wasm-wrappers/adding-metadata",permalink:"/quick-start/create-wasm-wrappers/adding-metadata",editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/quick-start/create-wasm-wrappers/adding-metadata.md",version:"current",sidebar:"docs",previous:{title:"Configure Polywrap build pipeline",permalink:"/quick-start/create-wasm-wrappers/build-pipeline"},next:{title:"Case study: Uniswap v3 Wrapper",permalink:"/quick-start/create-wasm-wrappers/uniswapv3-to-polywrap"}},l=[{value:"Declaration",id:"declaration",children:[]},{value:"Content",id:"content",children:[]},{value:"Example",id:"example",children:[]}],s={toc:l};function d(e){var t=e.components,a=Object(n.a)(e,o);return Object(i.b)("wrapper",Object(r.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Wrapper developers can add metadata to their wrappers by writing a Meta Manifest file named ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.meta.yaml"),".\nMetadata makes it easier for application developers to display a wrapper, make it searchable, and find helpful links."),Object(i.b)("h2",{id:"declaration"},"Declaration"),Object(i.b)("p",null,"Its location must be referenced in the ",Object(i.b)("inlineCode",{parentName:"p"},"polywrap.yaml")," manifest with a field labeled ",Object(i.b)("em",{parentName:"p"},"meta"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:'language-yaml"'},"meta: ./polywrap.meta.yaml\n")),Object(i.b)("h2",{id:"content"},"Content"),Object(i.b)("p",null,"The content of a Meta Manifest can be represented in pseudocode as an interface with the fields that can\n(or must) be populated in the manifest file. Here we represent the manifest as a TypeScript interface, with explanatory\ncomments next to each property."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Meta Manifest represented as TypeScript object"',title:'"Meta',Manifest:!0,represented:!0,as:!0,TypeScript:!0,'object"':!0},'interface MetaManifest {\n  format: "0.0.1-prealpha.3"; // determines which fields are expected or required.\n  displayName?: string; // name of the wrapper that users should use for presentation\n  subtext?: string; // subtext of display name; brief description of the wrapper\n  description?: string; // full description of the wrapper\n  repository?: string; // repository URL\n  tags?: string[]; // terms that can help find your wrapper in search\n  icon?: string; // path to wrapper icon or logo\n  links?: { // links relevant to your wrapper\n    name: string; // name of link\n    icon?: string; // icon associated with link\n    url: string; // link URL\n  }[];\n}\n')),Object(i.b)("p",null,"Most fields of the Meta Manifest are optional.\nThe required fields (indicated in the TypeScript example above with ",Object(i.b)("em",{parentName:"p"},"?")," symbols) are as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"format"),Object(i.b)("li",{parentName:"ul"},"If a link is specified, the name of the link and its URL are required")),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Fully configured Meta Manifest"',title:'"Fully',configured:!0,Meta:!0,'Manifest"':!0},"format: 0.1.0\ndisplayName: Simple Storage\nsubtext: Simple Storage on Ethereum\ndescription: Set and get a value on an Ethereum smart contract using Polywrap.\nrepository: https://github.com/polywrap/demos\nicon: ./meta/icon.png\nlinks:\n  - name: dApp\n    icon: ./meta/link.svg\n    url: https://demo.simplestorage.polywrap.io\n  - name: Polywrap\n    icon: ./meta/link.svg\n    url: https://polywrap.io\n")))}d.isMDXComponent=!0}}]);