"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[5090],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294),a=n(6010);const s={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>k});var r=n(7462),a=n(7294),s=n(6010),o=n(2466),i=n(6550),l=n(1980),u=n(7392),p=n(12);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=d(e),[o,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[l,u]=h({queryString:n,groupId:r}),[c,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),f=(()=>{const e=l??c;return m({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),g(e)}),[u,g,s]),tabValues:s}}var f=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),r=u[n].value;r!==i&&(c(t),l(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},o,{className:(0,s.Z)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=g(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",y.tabList)},a.createElement(w,(0,r.Z)({},e,t)),a.createElement(b,(0,r.Z)({},e,t)))}function k(e){const t=(0,f.Z)();return a.createElement(v,(0,r.Z)({key:String(t)},e))}},8805:(e,t,n)=>{n.d(t,{f:()=>s});var r=n(9960),a=n(7294);const s=e=>a.createElement(r.Z,{to:e.to},a.createElement("button",{className:"tutorial-nav-button"},e.text," \u2794"))},8431:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>w,frontMatter:()=>c,metadata:()=>m,toc:()=>g});var r=n(7462),a=(n(7294),n(3905)),s=n(8805),o=n(4866),i=n(5162);const l={toc:[]},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{groupId:"complete-code",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/lib.rs",title:"src/lib.rs"},'pub mod wrap;\npub use wrap::prelude::*;\nuse crate::wrap::imported::{ArgsKeccak256, ArgsPost};\nuse polywrap_wasm_rs::Map;\n\nimpl ModuleTrait for Module {\n    fn obscure(args: ArgsObscure) -> Result<String, String> {\n        // handle default values\n        let chaos_level = args.chaos_level.unwrap_or(1).max(1);\n\n        let mut obscured = String::new();\n        for data in &args.data {\n            let mut message = data.clone();\n            for _ in 0..chaos_level {\n                message = Sha3Module::keccak_256(&ArgsKeccak256 { message })?;\n            }\n            obscured += &message;\n        }\n        Ok(obscured)\n    }\n\n    fn enlighten(args: ArgsEnlighten) -> Result<String, String> {\n        let mut headers = Map::new();\n        headers.insert("accept".to_string(), "application/json".to_string());\n        headers.insert("content-type".to_string(), "application/json".to_string());\n        headers.insert("Authorization".to_string(), format!("Bearer {}", args.api_key));\n\n        let body = format!(r#"{{\n    "model": "mistral-7b-instruct",\n    "messages": [\n        {{"role": "system", "content": "Be precise and concise."}},\n        {{"role": "user", "content": "{}"}}\n    ]\n}}"#, args.question);\n\n        let response = HttpModule::post(&ArgsPost {\n            url: "https://api.perplexity.ai/chat/completions".to_string(),\n            request: Some(HttpRequest {\n                headers: Some(headers),\n                response_type: HttpResponseType::TEXT,\n                body: Some(body),\n                url_params: None,\n                form_data: None,\n                timeout: None,\n            }),\n        })?.ok_or("request failed with null body".to_string())?;\n\n        if response.status != 200 {\n            return Err(format!("request failed with status {}", response.status));\n        }\n        response.body.ok_or("request failed with null body".to_string())\n    }\n}\n'))),(0,a.kt)(i.Z,{value:"golang",label:"Go",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"title=module/module.go",title:"module/module.go"},'package module\n\nimport (\n    "example.com/template-wasm-go/module/wrap/types"\n    "example.com/template-wasm-go/module/wrap/imported/sha3"\n    "example.com/template-wasm-go/module/wrap/imported/http"\n    "fmt"\n)\n\nfunc Obscure(args *types.ArgsObscure) string {\n    // Handle default values\n    chaosLevel := int32(1)\n    if args.ChaosLevel != nil && *args.ChaosLevel >= 1 {\n        chaosLevel = *args.ChaosLevel\n    }\n\n    var obscured string\n    for _, data := range args.Data {\n        tempData := data\n        for i := int32(0); i < chaosLevel; i++ {\n            hashArgs := &sha3.Sha3_ArgsKeccak_256 { Message: tempData }\n            hashed, err := sha3.Sha3_Keccak_256(hashArgs)\n            if err != nil {\n                return ""\n            }\n            tempData = hashed\n        }\n        obscured += tempData\n    }\n    return obscured\n}\n\nfunc Enlighten(args *types.ArgsEnlighten) string {\n    headers := map[string]string{\n        "accept":       "application/json",\n        "content-type": "application/json",\n        "Authorization": fmt.Sprintf("Bearer %s", args.ApiKey),\n    }\n\n    body := fmt.Sprintf(`{\n        "model": "mistral-7b-instruct",\n        "messages": [\n            {"role": "system", "content": "Be precise and concise."},\n            {"role": "user", "content": "%s"}\n        ]\n    }`, args.Question)\n\n    httpArgs := &http.Http_ArgsPost{\n        Url: "https://api.perplexity.ai/chat/completions",\n        Request: &http.Http_Request{\n            Headers:      headers,\n            ResponseType: http.Http_ResponseTypeTEXT,\n            Body:         &body,\n        },\n    }\n\n    response, err := http.Http_Post(httpArgs)\n    if err != nil {\n        return ""\n    }\n\n    if response.Status != 200 {\n        return fmt.Sprintf("request failed with status %d", response.Status)\n    }\n\n    if response.Body == nil {\n        return "request failed with null body"\n    }\n\n    return *response.Body\n}\n'))),(0,a.kt)(i.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/index.ts",title:"src/index.ts"},"import {\n  Args_enlighten,\n  Args_obscure,\n  Http_Module,\n  Http_Request,\n  Http_Response,\n  Http_ResponseType,\n  ModuleBase,\n  Sha3_Module\n} from './wrap';\n\nexport class Module extends ModuleBase {\n  obscure(args: Args_obscure): string {\n    // handle default values\n    const chaosLevel = args.chaosLevel || 1;\n\n    // obscure the data with chaos\n    let obscured: string = \"\";\n    for (let i = 0; i < args.data.length; ++i) {\n      let data = args.data[i];\n      for (let j = 0; j < chaosLevel; ++j) {\n        const result = Sha3_Module.keccak_256({ message: data })\n        if (!result.ok) throw Error(\"hash failed\");\n        data = result.value!!;\n      }\n      obscured += data;\n    }\n    return obscured;\n  }\n\n  enlighten(args: Args_enlighten): string {\n    const request: Http_Request = {\n      headers: new Map<string, string>()\n        .set('accept', 'application/json')\n        .set('content-type', 'application/json')\n        .set(\"Authorization\", `Bearer ${args.apiKey}`),\n      responseType: Http_ResponseType.TEXT,\n      body: JSON.stringify({\n        model: 'mistral-7b-instruct',\n        messages: [\n          {role: 'system', content: 'Be precise and concise.'},\n          {role: 'user', content: args.question}\n        ]\n      }),\n      urlParams: null,\n      formData: null,\n      timeout: null,\n    };\n\n    const result: Result<Http_Response | null> = Http_Module.post({\n      url: \"https://api.perplexity.ai/chat/completions\",\n      request,\n    });\n\n    if (!result.ok) throw result.error;\n    const response = result.value;\n\n    if (response == null) {\n      throw new Error(\"request failed with null response\");\n    }\n\n    if (response.status != 200) {\n      throw new Error(`request failed with status ${response.status}`);\n    }\n\n    if (response.body == null) {\n      throw new Error(\"request failed with null body\");\n    }\n\n    return response.body;\n  }\n}\n"))),(0,a.kt)(i.Z,{value:"assemblyscript",label:"AssemblyScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/index.ts",title:"src/index.ts"},'import {\n  Args_enlighten,\n  Args_obscure,\n  Http_Module,\n  Http_Request,\n  Http_Response,\n  Http_ResponseType,\n  ModuleBase,\n  Sha3_Module\n} from \'./wrap\';\n\nexport class Module extends ModuleBase {\n  obscure(args: Args_obscure): string {\n    // handle default values\n    const chaosLevel: i32 = (args.chaosLevel == null || args.chaosLevel!!.unwrap() < 1)\n      ? 1\n      : args.chaosLevel!!.unwrap();\n\n    let obscured: string = "";\n    for (let i = 0; i < args.data.length; ++i) {\n      let data = args.data[i];\n      for (let j = 0; j < chaosLevel; ++j) {\n        data = Sha3_Module.keccak_256({ message: data }).expect("hash failed");\n      }\n      obscured += data;\n    }\n    return obscured;\n  }\n\n  enlighten(args: Args_enlighten): string {\n    const request: Http_Request = {\n      headers: new Map<string, string>()\n        .set(\'accept\', \'application/json\')\n        .set(\'content-type\', \'application/json\')\n        .set("Authorization", `Bearer ${args.apiKey}`),\n      responseType: Http_ResponseType.TEXT,\n      body: `{\n  "model": "mistral-7b-instruct",\n  "messages": [\n    {\n      "role": "system",\n      "content": "Be precise and concise."\n    },\n    {\n      "role": "user",\n      "content": "${args.question}"\n    }\n  ]\n}`\n    };\n\n    const response: Http_Response | null = Http_Module.post({\n      url: "https://api.perplexity.ai/chat/completions",\n      request,\n    }).unwrap();\n\n    if (response == null) {\n      throw new Error("request failed with null response");\n    }\n\n    if (response.status != 200) {\n      throw new Error(`request failed with status ${response.status}`);\n    }\n\n    if (response.body == null) {\n      throw new Error("request failed with null body");\n    }\n\n    return response.body!!;\n  }\n}\n')))))}p.isMDXComponent=!0;const c={id:"interfaces-and-plugins",title:"Interfaces and Plugins"},d=void 0,m={unversionedId:"tutorials/create-wraps/part-one/interfaces-and-plugins",id:"tutorials/create-wraps/part-one/interfaces-and-plugins",title:"Interfaces and Plugins",description:"You're reading Part One of the Create Wraps tutorial, where we learn everything you need to know to productively develop Polywrap wraps.",source:"@site/docs/tutorials/create-wraps/part-one/interfaces-and-plugins.mdx",sourceDirName:"tutorials/create-wraps/part-one",slug:"/tutorials/create-wraps/part-one/interfaces-and-plugins",permalink:"/tutorials/create-wraps/part-one/interfaces-and-plugins",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/create-wraps/part-one/interfaces-and-plugins.mdx",tags:[],version:"current",frontMatter:{id:"interfaces-and-plugins",title:"Interfaces and Plugins"},sidebar:"docs",previous:{title:"Import and Subinvoke",permalink:"/tutorials/create-wraps/part-one/import-and-subinvoke"},next:{title:"Integration Testing",permalink:"/tutorials/create-wraps/part-one/integration-testing"}},h={},g=[{value:"<strong>Interfaces</strong>",id:"interfaces",level:2},{value:"<strong>Plugins</strong>",id:"plugins",level:2},{value:"<strong>Implementation</strong>",id:"implementation",level:2},{value:"<strong>Update the schema</strong>",id:"update-the-schema",level:3},{value:"<strong>Implement the method</strong>",id:"implement-the-method",level:3},{value:"<strong>Next Steps</strong>",id:"next-steps",level:2}],f={toc:g},y="wrapper";function w(e){let{components:t,...n}=e;return(0,a.kt)(y,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You're reading Part One of the ",(0,a.kt)("a",{parentName:"p",href:"../introduction"},"Create Wraps")," tutorial, where we learn everything you need to know to productively develop Polywrap wraps.")),(0,a.kt)("p",null,"Now that our Oracle Wrap can hide data with the ",(0,a.kt)("inlineCode",{parentName:"p"},"obscure")," method, we're ready to add the ",(0,a.kt)("inlineCode",{parentName:"p"},"enlighten")," method and illuminate new knowledge with generative AI. The ",(0,a.kt)("inlineCode",{parentName:"p"},"enlighten")," method will allow users to ask a question, and it will return an answer generated by an AI model. We're going to import the HTTP interface and use it to send HTTP requests to the ",(0,a.kt)("a",{parentName:"p",href:"https://blog.perplexity.ai/blog/introducing-pplx-api"},"Perplexity API")," for open-source large language models."),(0,a.kt)("p",null,"Let's learn a bit about interface wraps and plugins to see how they can help us."),(0,a.kt)("h2",{id:"interfaces"},(0,a.kt)("strong",{parentName:"h2"},"Interfaces")),(0,a.kt)("p",null,"An interface wrap defines a schema without implementing a module. Other wraps and plugins can implement the interface instead. An interface doesn't have knowledge of its implementations. Instead, users of the Polywrap Client can choose which wraps or plugins to register as known implementations."),(0,a.kt)("p",null,"We're going to use the HTTP interface, imported using the Wrap URI ",(0,a.kt)("inlineCode",{parentName:"p"},'"wrapscan.io/polywrap/http@1.0"'),"."),(0,a.kt)("p",null,"It is considered a best practice for users to register a URI Redirect for each interface in their Polywrap Client configuration that redirects from the interface URI to the URI of their primary implementation. This allows wrap users to directly invoke the interface URI--as if it were a Wasm wrap--without needing to know the URI of the primary implementation. In Polywrap's default Polywrap Client configuration, each interface URI is redirected to the URI of its default implementation."),(0,a.kt)("p",null,"What if it doesn't make sense to redirect to any one default implementation? What if the Polywrap Client user did not do so? Wraps can get a list of registered implementations at runtime and invoke one or more of them. You can learn how to do this in ",(0,a.kt)("a",{parentName:"p",href:"tutorials/advanced/interfaces/interface-instances"},"Interface Instances"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Polywrap's URI Resolution system uses the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polywrap/uri-resolver-extensions"},"URI Resolver Extension")," wrap interface to resolve URIs.")),(0,a.kt)("p",null,"Let's talk about two cases where interfaces are useful."),(0,a.kt)("p",null,"First, interfaces are useful when you want to allow for multiple, fungible implementations of an interface. For example, you might want to allow users to register multiple implementations of an interface that resolves URIs. This is the case with Polywrap's URI Resolution system. Users can register multiple implementations of the URI Resolver Extension interface, and the Polywrap Client will invoke all of them when trying to resolve a URI."),(0,a.kt)("p",null,"Another case is when you want your wrap to play nicely with plugins. Plugins are ordinary, language-specific packages that cannot necessarily be resolved by immutable Wrap URIs. Users can install a plugin using a package manager (e.g. JavaScript's NPM or Python's PyPi) and register it in the Polywrap Client with an arbitrary URI."),(0,a.kt)("p",null,"If a plugin implements an interface, users are expected to either redirect the interface URI to point to the registered plugin URI, or to register the plugin as an interface implementation that can be obtained at runtime. For example, the default Polywrap Client configuration uses the URI ",(0,a.kt)("inlineCode",{parentName:"p"},'"plugin/http@1.1.0"')," to register the HTTP plugin and registers a redirect from the HTTP interface URI to the plugin URI."),(0,a.kt)("h2",{id:"plugins"},(0,a.kt)("strong",{parentName:"h2"},"Plugins")),(0,a.kt)("p",null,"Plugins extend the Polywrap Client to give wraps access to host capabilities while keeping users in control. Plugins are a more powerful and secure alternative to the Wasi standard used in many WebAssembly modules."),(0,a.kt)("p",null,"Standard WebAssembly modules are securely sandboxed and cannot access host capabilities like a user's filesystem. This is a feature, not a bug, because it prevents malicious behaviors. However, many useful modules need to access host capabilities. For example, a database module needs to read and write to the filesystem. A module that implements a web server needs to listen on a port. These capabilities can be implemented in plugins."),(0,a.kt)("p",null,"Users register plugins in the Polywrap Client, choosing which plugins they want to allow their wraps to use. Plugins are implemented as language-specific packages. For example, a plugin for the JavaScript Polywrap Client is just a JavaScript package."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"From the perspective of a wrap developer, a plugin behaves like a wrap.")," Plugins are imported into schemas from URIs--typically by importing an interface--and are subinvoked just like a Wasm wrap module."),(0,a.kt)("h2",{id:"implementation"},(0,a.kt)("strong",{parentName:"h2"},"Implementation")),(0,a.kt)("p",null,"Enough talk! Let's implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"enlighten")," method."),(0,a.kt)("h3",{id:"update-the-schema"},(0,a.kt)("strong",{parentName:"h3"},"Update the schema")),(0,a.kt)("p",null,"Let's add the ",(0,a.kt)("inlineCode",{parentName:"p"},"enlighten")," method and an import statement for the HTTP interface to the schema. The method will take a question and a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.perplexity.ai/"},"Perplexity")," API key as arguments, and will return a response. Remember to run codegen after updating the schema."),(0,a.kt)("p",null,"You can view the HTTP interface wrap's schema on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polywrap/http/blob/main/interface/polywrap.graphql"},"GitHub"),".;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'#import { Module } into Sha3 from "wrapscan.io/polywrap/sha3@1.0.0"\n#import { Module } into Http from "wrapscan.io/polywrap/http@1.0"\n\ntype Module {\n    obscure(data: [String!]!, chaosLevel: Int): String!\n    enlighten(question: String!, apiKey: String!): String!\n}\n')),(0,a.kt)("h3",{id:"implement-the-method"},(0,a.kt)("strong",{parentName:"h3"},"Implement the method")),(0,a.kt)("p",null,"Now we can import the generated Http Module class to send HTTP requests."),(0,a.kt)("p",null,"To call the HTTP ",(0,a.kt)("inlineCode",{parentName:"p"},"post")," method, we need to use some custom types defined in the HTTP interface schema. Polywrap's codegen is smart enough to generate these types for us, even though we didn't list them in an import statement, because the Http Module class depends on them."),(0,a.kt)("p",null,"In order to focus on learning Polywrap, we aren't going to parse the HTTP response. We'll just return the raw response body as a string."),(0,a.kt)(p,{mdxType:"CompleteCode"}),(0,a.kt)("h2",{id:"next-steps"},(0,a.kt)("strong",{parentName:"h2"},"Next Steps")),(0,a.kt)("p",null,"Our Oracle Wrap is now complete! But we're not quite done yet. We still need to test our wrap and publish it so others can use it. We'll test our wrap in the next section. Make sure to build your wrap and fix any compilation errors before moving on."),(0,a.kt)(s.f,{to:"./integration-testing",text:"Integration Testing",mdxType:"NavButton"}))}w.isMDXComponent=!0}}]);