"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[4067],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||o;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2179:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={id:"invoke",title:"Invoke"},i=void 0,p={unversionedId:"concepts/invoke",id:"concepts/invoke",title:"Invoke",description:'The term "invoke" (or "invocation") refers to the act of executing a method exposed by a Wrap. This can be done by using a client library that supports the WRAP Standard.',source:"@site/docs/concepts/invoke.md",sourceDirName:"concepts",slug:"/concepts/invoke",permalink:"/concepts/invoke",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/concepts/invoke.md",tags:[],version:"current",frontMatter:{id:"invoke",title:"Invoke"},sidebar:"docs",previous:{title:"Client",permalink:"/concepts/client"},next:{title:"Envs",permalink:"/concepts/envs"}},c={},l=[],s={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'The term "invoke" (or "invocation") refers to the act of executing a method exposed by a ',(0,a.kt)("a",{parentName:"p",href:"./wraps"},"Wrap"),". This can be done by using a client library that supports the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polywrap/specification/blob/main/standards/00_WRAP.md"},"WRAP Standard"),"."),(0,a.kt)("p",null,'Essentially, "Invoke" refers to any call to a method exposed by a Wrap, be it a ',(0,a.kt)("a",{parentName:"p",href:"./wasm-wraps"},"WASM Wrap"),", a ",(0,a.kt)("a",{parentName:"p",href:"./plugin-wraps"},"Plugin Wrap")," or an ",(0,a.kt)("a",{parentName:"p",href:"./interface-wraps"},"Interface Wrap"),", by a ",(0,a.kt)("a",{parentName:"p",href:"./wrap-standard"},"WRAP-compliant")," client such as the ",(0,a.kt)("a",{parentName:"p",href:"/reference/clients/js/client-js"},"Polywrap Client"),"."),(0,a.kt)("p",null,"Any WRAP-compatible client can perform an Invocation with the following information:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("a",{parentName:"li",href:"./uris"},"WRAP URI")," of the Wrap being invoked"),(0,a.kt)("li",{parentName:"ul"},"the name of the method being invoked"),(0,a.kt)("li",{parentName:"ul"},"the method arguments")),(0,a.kt)("p",null,"For more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polywrap/specification/blob/main/standards/02_Invocation.md"},"Invocation standard"),"."))}m.isMDXComponent=!0}}]);