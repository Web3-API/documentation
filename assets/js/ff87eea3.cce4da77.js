"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[5072],{3905:(e,r,t)=>{t.d(r,{Zo:()=>i,kt:()=>f});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),m=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},i=function(e){var r=m(e.components);return n.createElement(p.Provider,{value:r},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),l=m(t),h=o,f=l["".concat(p,".").concat(h)]||l[h]||u[h]||a;return t?n.createElement(f,s(s({ref:r},i),{},{components:t})):n.createElement(f,s({ref:r},i))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=h;var c={};for(var p in r)hasOwnProperty.call(r,p)&&(c[p]=r[p]);c.originalType=e,c[l]="string"==typeof e?e:o,s[1]=c;for(var m=2;m<a;m++)s[m]=t[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8666:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>m});var n=t(7462),o=(t(7294),t(3905));const a={id:"schema-compose",hide_title:!0},s="Polywrap Schema Compose (@polywrap/schema-compose)",c={unversionedId:"reference/schema/schema-compose",id:"reference/schema/schema-compose",title:"Polywrap Schema Compose (@polywrap/schema-compose)",description:"Composes GraphQL schema source and typings for passing to schema-bind.",source:"@site/docs/reference/schema/schema-compose.md",sourceDirName:"reference/schema",slug:"/reference/schema/schema-compose",permalink:"/reference/schema/schema-compose",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/schema/schema-compose.md",tags:[],version:"current",frontMatter:{id:"schema-compose",hide_title:!0},sidebar:"docs",previous:{title:"@polywrap/schema-parse",permalink:"/reference/schema/schema-parse"},next:{title:"@polywrap/schema-bind",permalink:"/reference/schema/schema-bind"}},p={},m=[{value:"Usage",id:"usage",level:2}],i={toc:m},l="wrapper";function u(e){let{components:r,...t}=e;return(0,o.kt)(l,(0,n.Z)({},i,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"polywrap-schema-compose-polywrapschema-compose"},"Polywrap Schema Compose (@polywrap/schema-compose)"),(0,o.kt)("p",null,"Composes GraphQL schema source and typings for passing to schema-bind."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import path from "path";\nimport { readFileSync } from "fs";\nimport { ComposerOptions, ComposeFilter, composeSchema } from "@polywrap/schema-compose";\nimport { TypeInfo } from "@polywrap/schema-parse";\n\nconst schemaPath = "input/module.graphql"\n\nconst schema = readFileSync(schemaPath);\n\nconst resolveExternal = (uri: string): Promise<string> => {\n  return Promise.resolve(readFileSync(`imports-ext/${uri}/schema.graphql`) || "");\n};\n\nconst resolveLocal = (path: string): Promise<string> => {\n  return Promise.resolve(readFileSync(path) || "");\n};\n\nconst input: ComposerOptions = {\n  schemas: [{\n    schema,\n    absolutePath,\n  }],\n  resolvers: {\n    external: resolveExternal,\n    local: resolveLocal,\n  },\n  output: ComposerFilter.All\n};\n\nconst output: ComposerOutput = composeSchema(input);\n\nconst { schema: string, typeInfo: TypeInfo } = output;\n\n')))}u.isMDXComponent=!0}}]);