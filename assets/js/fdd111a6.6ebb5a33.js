"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[5579],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),d=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(a.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=d(t),f=i,g=u["".concat(a,".").concat(f)]||u[f]||p[f]||l;return t?r.createElement(g,o(o({ref:n},s),{},{components:t})):r.createElement(g,o({ref:n},s))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=f;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c[u]="string"==typeof e?e:i,o[1]=c;for(var d=2;d<l;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1804:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const l={id:"client-config-builder-js",hide_title:!0},o="PolywrapClient Config Builder",c={unversionedId:"reference/clients/js/client-config-builder-js",id:"reference/clients/js/client-config-builder-js",title:"PolywrapClient Config Builder",description:"A DSL for building the PolywrapClient config object.",source:"@site/docs/reference/clients/js/client-config-builder-js.md",sourceDirName:"reference/clients/js",slug:"/reference/clients/js/client-config-builder-js",permalink:"/reference/clients/js/client-config-builder-js",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/clients/js/client-config-builder-js.md",tags:[],version:"current",frontMatter:{id:"client-config-builder-js",hide_title:!0},sidebar:"docs",previous:{title:"@polywrap/client-js",permalink:"/reference/clients/js/client-js"},next:{title:"Client Config",permalink:"/reference/clients/js/client-config"}},a={},d=[{value:"Methods",id:"methods",level:2},{value:"<code>add(config: Partial&lt;ClientConfig&gt;)</code>",id:"addconfig-partialclientconfig",level:4},{value:"<code>addDefaults()</code>",id:"adddefaults",level:4},{value:"<code>build()</code>",id:"build",level:4}],s={toc:d},u="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"polywrapclient-config-builder"},"PolywrapClient Config Builder"),(0,i.kt)("p",null,"A DSL for building the PolywrapClient config object. "),(0,i.kt)("p",null,"Supports building configs using method chaining or imperatively."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript="},'import { ClientConfigBuilder } from "@polywrap/client-config-builder-js";\nimport { PolywrapClient } from "@polywrap/client-js";\n\nconst config = new ClientConfigBuilder()\n  .add({\n    envs: [/*...*/],\n    interfaces: [/*...*/],\n    plugins: [/*...*/],\n    redirects: [/*...*/],\n    uriResolvers: [/*...*/],\n  })\n  .add({/*...*/})\n  .build();\n\n// ...\n\nconst builder = new ClientConfigBuilder();\n\nbuilder.addDefaults();\n\nbuilder.add({\n  plugins: [/*...*/]\n});\n\nbuilder.add({\n  envs: [/*...*/]\n});\n\nconst config = builder.build();\n\n\n// ...\n\nlet client = new PolywrapClient(config);\n')),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("p",null,"The config builder currently supports 3 methods:"),(0,i.kt)("h4",{id:"addconfig-partialclientconfig"},(0,i.kt)("inlineCode",{parentName:"h4"},"add(config: Partial<ClientConfig>)")),(0,i.kt)("p",null,"Appends each property of the supplied config object to the corresponding array of the builder's config."),(0,i.kt)("h4",{id:"adddefaults"},(0,i.kt)("inlineCode",{parentName:"h4"},"addDefaults()")),(0,i.kt)("p",null,"Adds the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultClientConfig")," object."),(0,i.kt)("h4",{id:"build"},(0,i.kt)("inlineCode",{parentName:"h4"},"build()")),(0,i.kt)("p",null,"Returns a sanitized config object from the builder's config."))}p.isMDXComponent=!0}}]);