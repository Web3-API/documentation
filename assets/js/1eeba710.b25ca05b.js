"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[8672],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},y="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),y=l(r),u=a,m=y["".concat(c,".").concat(u)]||y[u]||f[u]||s;return r?t.createElement(m,i(i({ref:n},p),{},{components:r})):t.createElement(m,i({ref:n},p))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[y]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7029:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=r(7462),a=(r(7294),r(3905));const s={id:"asyncify-js",hide_title:!0},i="@polywrap/asyncify-js",o={unversionedId:"reference/clients/js/libraries/asyncify-js",id:"reference/clients/js/libraries/asyncify-js",title:"@polywrap/asyncify-js",description:"A 0 dependency wrapper around the Node.JS & Browser WebAssembly instance, which adds support for asyncify, enabling the use of async host import functions.",source:"@site/docs/reference/clients/js/libraries/asyncify-js.md",sourceDirName:"reference/clients/js/libraries",slug:"/reference/clients/js/libraries/asyncify-js",permalink:"/reference/clients/js/libraries/asyncify-js",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/clients/js/libraries/asyncify-js.md",tags:[],version:"current",frontMatter:{id:"asyncify-js",hide_title:!0},sidebar:"docs",previous:{title:"Client Config",permalink:"/reference/clients/js/client-config"},next:{title:"@polywrap/core-js",permalink:"/reference/clients/js/libraries/core-js"}},c={},l=[{value:"Usage",id:"usage",level:2}],p={toc:l},y="wrapper";function f(e){let{components:n,...r}=e;return(0,a.kt)(y,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"polywrapasyncify-js"},"@polywrap/asyncify-js"),(0,a.kt)("p",null,"A 0 dependency wrapper around the Node.JS & Browser ",(0,a.kt)("inlineCode",{parentName:"p"},"WebAssembly")," instance, which adds support for ",(0,a.kt)("a",{parentName:"p",href:"https://emscripten.org/docs/porting/asyncify.html"},(0,a.kt)("inlineCode",{parentName:"a"},"asyncify")),", enabling the use of async host import functions."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { AsyncWasmInstance } from "@polywrap/asyncify-js";\n\n// module.wasm must be asyncify enabled\nconst module: ArrayBuffer = getModule("./module.wasm");\nconst memory = new WebAssembly.Memory({ initial: 1 });\n\nconst instance = await AsyncWasmInstance.createInstance({\n  module,\n  imports: {\n    my: {\n      custom_import: async (arg: number): Promise<number> => {\n        return await someAsyncCall(arg);\n      }\n    },\n    env: {\n      memory\n    }\n  }\n});\n\nawait instance.exports.main();\n')))}f.isMDXComponent=!0}}]);