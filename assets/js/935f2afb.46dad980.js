"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Introduction","href":"/introduction","docId":"introduction"},{"type":"category","label":"Quick Start","items":[{"type":"link","label":"Polywrap Client","href":"/quick-start/polywrap-client","docId":"quick-start/polywrap-client"},{"type":"link","label":"Polywrap CLI","href":"/quick-start/polywrap-cli","docId":"quick-start/polywrap-cli"},{"type":"link","label":"What Wraps are available?","href":"/quick-start/what-wraps-are-available","docId":"quick-start/what-wraps-are-available"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Concepts","items":[{"type":"link","label":"Wraps","href":"/concepts/wraps","docId":"concepts/wraps"},{"type":"link","label":"WASM Wraps","href":"/concepts/wasm-wraps","docId":"concepts/wasm-wraps"},{"type":"link","label":"Plugin Wraps","href":"/concepts/plugin-wraps","docId":"concepts/plugin-wraps"},{"type":"link","label":"Interface Wraps","href":"/concepts/interface-wraps","docId":"concepts/interface-wraps"},{"type":"link","label":"WRAP Standard","href":"/concepts/wrap-standard","docId":"concepts/wrap-standard"},{"type":"link","label":"WASM","href":"/concepts/wasm","docId":"concepts/wasm"},{"type":"link","label":"ABI","href":"/concepts/abi","docId":"concepts/abi"},{"type":"link","label":"URIs","href":"/concepts/uris","docId":"concepts/uris"},{"type":"link","label":"Client","href":"/concepts/client","docId":"concepts/client"},{"type":"link","label":"Invoke","href":"/concepts/invoke","docId":"concepts/invoke"},{"type":"link","label":"Envs","href":"/concepts/envs","docId":"concepts/envs"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Reference","items":[{"type":"link","label":"Glossary","href":"/reference/glossary","docId":"reference/glossary"},{"type":"category","label":"CLI","items":[{"type":"link","label":"The Polywrap CLI (polywrap)","href":"/reference/cli/polywrap-cli","docId":"reference/cli/polywrap-cli"},{"type":"category","label":"Commands","items":[{"type":"link","label":"Create","href":"/reference/cli/commands/create","docId":"reference/cli/commands/create"},{"type":"link","label":"Codegen","href":"/reference/cli/commands/codegen","docId":"reference/cli/commands/codegen"},{"type":"link","label":"Build","href":"/reference/cli/commands/build","docId":"reference/cli/commands/build"},{"type":"link","label":"Test","href":"/reference/cli/commands/test","docId":"reference/cli/commands/test"},{"type":"link","label":"Deploy","href":"/reference/cli/commands/deploy","docId":"reference/cli/commands/deploy"},{"type":"link","label":"Manifest","href":"/reference/cli/commands/manifest","docId":"reference/cli/commands/manifest"},{"type":"link","label":"Docgen","href":"/reference/cli/commands/docgen","docId":"reference/cli/commands/docgen"},{"type":"link","label":"Infra","href":"/reference/cli/commands/infra","docId":"reference/cli/commands/infra"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Clients","items":[{"type":"category","label":"JavaScript","items":[{"type":"link","label":"@polywrap/client-js","href":"/reference/clients/js/client-js","docId":"reference/clients/js/client-js"},{"type":"link","label":"PolywrapClient Config Builder","href":"/reference/clients/js/client-config-builder-js","docId":"reference/clients/js/client-config-builder-js"},{"type":"category","label":"Libraries","items":[{"type":"link","label":"@polywrap/asyncify-js","href":"/reference/clients/js/libraries/asyncify-js","docId":"reference/clients/js/libraries/asyncify-js"},{"type":"link","label":"@polywrap/core-js","href":"/reference/clients/js/libraries/core-js","docId":"reference/clients/js/libraries/core-js"},{"type":"link","label":"@polywrap/msgpack-js","href":"/reference/clients/js/libraries/msgpack-js","docId":"reference/clients/js/libraries/msgpack-js"},{"type":"link","label":"@polywrap/result","href":"/reference/clients/js/libraries/result","docId":"reference/clients/js/libraries/result"},{"type":"link","label":"@polywrap/tracing-js","href":"/reference/clients/js/libraries/tracing-js","docId":"reference/clients/js/libraries/tracing-js"},{"type":"link","label":"@polywrap/uri-resolver-extensions-js","href":"/reference/clients/js/libraries/uri-resolver-extensions-js","docId":"reference/clients/js/libraries/uri-resolver-extensions-js"},{"type":"link","label":"@polywrap/uri-resolvers","href":"/reference/clients/js/libraries/uri-resolvers-js","docId":"reference/clients/js/libraries/uri-resolvers-js"},{"type":"link","label":"@polywrap/wasm-js","href":"/reference/clients/js/libraries/wasm-js","docId":"reference/clients/js/libraries/wasm-js"},{"type":"link","label":"@polywrap/wrap-manifest-types-js","href":"/reference/clients/js/libraries/wrap-manifest-types-js","docId":"reference/clients/js/libraries/wrap-manifest-types-js"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Schema","items":[{"type":"link","label":"@polywrap/schema-parse","href":"/reference/schema/schema-parse","docId":"reference/schema/schema-parse"},{"type":"link","label":"Polywrap Schema Compose (@polywrap/schema-compose)","href":"/reference/schema/schema-compose","docId":"reference/schema/schema-compose"},{"type":"link","label":"@polywrap/schema-bind","href":"/reference/schema/schema-bind","docId":"reference/schema/schema-bind"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Tutorials","items":[{"type":"link","label":"Wrapper Schema","href":"/tutorials/wrapper-schema","docId":"tutorials/wrapper-schema"},{"type":"link","label":"Understanding plugins","href":"/tutorials/understanding-plugins","docId":"tutorials/understanding-plugins"},{"type":"link","label":"URI redirects","href":"/tutorials/understanding-uri-redirects","docId":"tutorials/understanding-uri-redirects"},{"type":"link","label":"Environmental variables","href":"/tutorials/env-variables","docId":"tutorials/env-variables"},{"type":"category","label":"Integrate Wrappers","items":[{"type":"link","label":"Installing the Polywrap JS client","href":"/tutorials/integrate-wrappers/install-client","docId":"tutorials/integrate-wrappers/install-client"},{"type":"link","label":"Creating the Polywrap client instance","href":"/tutorials/integrate-wrappers/create-client-instance","docId":"tutorials/integrate-wrappers/create-client-instance"},{"type":"link","label":"Configuring the Polywrap Client","href":"/tutorials/integrate-wrappers/configure-client","docId":"tutorials/integrate-wrappers/configure-client"},{"type":"link","label":"Generate types for your app","href":"/tutorials/integrate-wrappers/types-for-app","docId":"tutorials/integrate-wrappers/types-for-app"},{"type":"link","label":"React integration","href":"/tutorials/integrate-wrappers/react-integration","docId":"tutorials/integrate-wrappers/react-integration"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Create Wasm Wrappers","items":[{"type":"category","label":"Tutorial","items":[{"type":"link","label":"Project setup","href":"/tutorials/create-wasm-wrappers/tutorial/project-setup","docId":"tutorials/create-wasm-wrappers/tutorial/project-setup"},{"type":"link","label":"The Polywrap project folder","href":"/tutorials/create-wasm-wrappers/tutorial/project-folder","docId":"tutorials/create-wasm-wrappers/tutorial/project-folder"},{"type":"link","label":"Build, deploy and test","href":"/tutorials/create-wasm-wrappers/tutorial/build-deploy-test","docId":"tutorials/create-wasm-wrappers/tutorial/build-deploy-test"},{"type":"link","label":"Adding new Methods","href":"/tutorials/create-wasm-wrappers/tutorial/adding-new-methods","docId":"tutorials/create-wasm-wrappers/tutorial/adding-new-methods"},{"type":"link","label":"Writing tests with workflows","href":"/tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows","docId":"tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows"},{"type":"link","label":"Deploy locally & run tests","href":"/tutorials/create-wasm-wrappers/tutorial/deploy-locally-and-test","docId":"tutorials/create-wasm-wrappers/tutorial/deploy-locally-and-test"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Configure a Polywrap Manifest","href":"/tutorials/create-wasm-wrappers/polywrap-manifest","docId":"tutorials/create-wasm-wrappers/polywrap-manifest"},{"type":"link","label":"Default plugins","href":"/tutorials/create-wasm-wrappers/default-plugins","docId":"tutorials/create-wasm-wrappers/default-plugins"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Testing Wrappers","items":[{"type":"link","label":"Testing Wrappers In TypeScript","href":"/tutorials/testing-wrappers/in-typescript","docId":"tutorials/testing-wrappers/in-typescript"},{"type":"link","label":"Configure Polywrap infrastructure pipeline","href":"/tutorials/testing-wrappers/infra-pipeline","docId":"tutorials/testing-wrappers/infra-pipeline"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Build & Deploy Wasm Wrappers","items":[{"type":"link","label":"Configure Polywrap build pipeline","href":"/tutorials/build-and-deploy-wasm-wrappers/build-pipeline","docId":"tutorials/build-and-deploy-wasm-wrappers/build-pipeline"},{"type":"link","label":"Deploy to IPFS","href":"/tutorials/build-and-deploy-wasm-wrappers/deploy-to-ipfs","docId":"tutorials/build-and-deploy-wasm-wrappers/deploy-to-ipfs"},{"type":"link","label":"Publish to ENS","href":"/tutorials/build-and-deploy-wasm-wrappers/publish-to-ens","docId":"tutorials/build-and-deploy-wasm-wrappers/publish-to-ens"},{"type":"link","label":"Configure Polywrap deployment pipeline","href":"/tutorials/build-and-deploy-wasm-wrappers/deploy-pipeline","docId":"tutorials/build-and-deploy-wasm-wrappers/deploy-pipeline"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Create Plugin Wrappers","items":[{"type":"link","label":"Plugin an existing JS SDK","href":"/tutorials/create-plugin-wrappers/create-js-plugin","docId":"tutorials/create-plugin-wrappers/create-js-plugin"},{"type":"link","label":"Configure a Plugin Manifest","href":"/tutorials/create-plugin-wrappers/plugin-manifest","docId":"tutorials/create-plugin-wrappers/plugin-manifest"},{"type":"link","label":"Plugin Architecture","href":"/tutorials/create-plugin-wrappers/plugin-architecture","docId":"tutorials/create-plugin-wrappers/plugin-architecture"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Interfaces","items":[{"type":"link","label":"Configure interfaces in the client","href":"/tutorials/interfaces/client-config-interfaces","docId":"tutorials/interfaces/client-config-interfaces"},{"type":"link","label":"Define and implement interfaces","href":"/tutorials/interfaces/define-implement-interfaces","docId":"tutorials/interfaces/define-implement-interfaces"},{"type":"link","label":"Interface instances","href":"/tutorials/interfaces/interface-instances","docId":"tutorials/interfaces/interface-instances"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Workflows","items":[{"type":"link","label":"Running Workflows","href":"/tutorials/workflows/running-workflows","docId":"tutorials/workflows/running-workflows"},{"type":"link","label":"Workflow Validation","href":"/tutorials/workflows/workflow-validation","docId":"tutorials/workflows/workflow-validation"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Resources","items":[{"type":"link","label":"Talks, Podcasts, and Videos","href":"/resources/talks-podcasts-and-videos","docId":"resources/talks-podcasts-and-videos"},{"type":"link","label":"Ecosystem Tooling","href":"/resources/ecosystem-tooling","docId":"resources/ecosystem-tooling"},{"type":"link","label":"The Polywrap Technical Standard","href":"/resources/the-polywrap-technical-standard","docId":"resources/the-polywrap-technical-standard"}],"collapsed":true,"collapsible":true}]},"docs":{"concepts/abi":{"id":"concepts/abi","title":"ABI","description":"In computer software, an application binary interface (ABI) is an interface between two binary program modules. Often, one of these modules is a library or operating system facility, and the other is a program that is being run by a user.","sidebar":"docs"},"concepts/client":{"id":"concepts/client","title":"Client","description":"A Client is any library that supports to the WRAP Standard.","sidebar":"docs"},"concepts/envs":{"id":"concepts/envs","title":"Envs","description":"Envs or \\"Environment Variables\\" are WRAP URI-mapped objects containing settings that are passed into a Wrap with the corresponding URI.","sidebar":"docs"},"concepts/interface-wraps":{"id":"concepts/interface-wraps","title":"Interface Wraps","description":"An Interface Wrap (or Wrap Interface), unlike a WASM Wrap, consists only of an ABI. Wrap Interfaces are still Wraps in the sense that they have are identified by a URI.","sidebar":"docs"},"concepts/invoke":{"id":"concepts/invoke","title":"Invoke","description":"The term \\"invoke\\" (or \\"invocation\\") refers to the act of executing a method exposed by a Wrap. This can be done by using a client library that supports the WRAP Standard.","sidebar":"docs"},"concepts/plugin-wraps":{"id":"concepts/plugin-wraps","title":"Plugin Wraps","description":"Polywrap Plugins, or \\"Plugin Wraps\\", enable existing SDKs implemented in the client\'s language (e.g. JavaScript) to be queried as if they were WASM Wraps.","sidebar":"docs"},"concepts/uris":{"id":"concepts/uris","title":"URIs","description":"Deployed wrappers are identified using custom URIs (Uniform Resource Identifier) called WRAP URIs. For example:","sidebar":"docs"},"concepts/wasm":{"id":"concepts/wasm","title":"WASM","description":"WASM (WebAssembly) is a binary instruction format designed to provide a portable and efficient target for the compilation of high-level programming languages such as C, C++, Rust, and others. It is a low-level, virtual machine-based format that is designed to be executed in web browsers, but can also be used in other contexts.","sidebar":"docs"},"concepts/wasm-wraps":{"id":"concepts/wasm-wraps","title":"WASM Wraps","description":"WASM Wraps are at the core of Polywrap - they are the portable, executable modules that can be called by any client that implements the WRAP Standard.","sidebar":"docs"},"concepts/wrap-standard":{"id":"concepts/wrap-standard","title":"WRAP Standard","description":"The Polywrap Foundation has created and actively maintains a series of standards that all WRAP-compatible clients must adhere to.","sidebar":"docs"},"concepts/wraps":{"id":"concepts/wraps","title":"Wraps","description":"Wraps, in a broad sense, are modules uniquely identifiable by a WRAP URI.","sidebar":"docs"},"demos/uniswapv3/intro":{"id":"demos/uniswapv3/intro","title":"Uniswap v3 Polywrap Documentation","description":"This demo was made with a deprecated version of Polywrap!"},"demos/uniswapv3/mutations/call":{"id":"demos/uniswapv3/mutations/call","title":"Call","description":"approve"},"demos/uniswapv3/mutations/deploy":{"id":"demos/uniswapv3/mutations/deploy","title":"Deploy Pool","description":"deployPool"},"demos/uniswapv3/mutations/swap":{"id":"demos/uniswapv3/mutations/swap","title":"Swap","description":"execSwap"},"demos/uniswapv3/queries/constants":{"id":"demos/uniswapv3/queries/constants","title":"Constants","description":"FACTORY_ADDRESS"},"demos/uniswapv3/queries/encodeUtils":{"id":"demos/uniswapv3/queries/encodeUtils","title":"Encode Utilities","description":"toHex"},"demos/uniswapv3/queries/enumUtils":{"id":"demos/uniswapv3/queries/enumUtils","title":"Enum Utilities","description":"feeAmountToTickSpacing"},"demos/uniswapv3/queries/fetch":{"id":"demos/uniswapv3/queries/fetch","title":"Fetch","description":"fetchToken"},"demos/uniswapv3/queries/mathUtils":{"id":"demos/uniswapv3/queries/mathUtils","title":"Math Utilities","description":"mostSignificantBit"},"demos/uniswapv3/queries/nfpm":{"id":"demos/uniswapv3/queries/nfpm","title":"Nonfungible Position Manager","description":"createCallParameters"},"demos/uniswapv3/queries/pool":{"id":"demos/uniswapv3/queries/pool","title":"Pool","description":"createPool"},"demos/uniswapv3/queries/poolUtils":{"id":"demos/uniswapv3/queries/poolUtils","title":"Pool Utilities","description":"computePoolAddress"},"demos/uniswapv3/queries/position":{"id":"demos/uniswapv3/queries/position","title":"Position","description":"createPosition"},"demos/uniswapv3/queries/positionUtils":{"id":"demos/uniswapv3/queries/positionUtils","title":"Position Utilities","description":"maxLiquidityForAmounts"},"demos/uniswapv3/queries/quoter":{"id":"demos/uniswapv3/queries/quoter","title":"Quoter","description":"quoteCallParameters"},"demos/uniswapv3/queries/route":{"id":"demos/uniswapv3/queries/route","title":"Route","description":"createRoute"},"demos/uniswapv3/queries/router":{"id":"demos/uniswapv3/queries/router","title":"Router","description":"swapCallParameters"},"demos/uniswapv3/queries/staker":{"id":"demos/uniswapv3/queries/staker","title":"Staker","description":"collectRewards"},"demos/uniswapv3/queries/tickProvider":{"id":"demos/uniswapv3/queries/tickProvider","title":"TickList Data Provider","description":"validateTickList"},"demos/uniswapv3/queries/tickUtils":{"id":"demos/uniswapv3/queries/tickUtils","title":"Tick Utilities","description":"nearestUsableTick"},"demos/uniswapv3/queries/token":{"id":"demos/uniswapv3/queries/token","title":"Token","description":"currencyEquals"},"demos/uniswapv3/queries/trade":{"id":"demos/uniswapv3/queries/trade","title":"Trade","description":"createTradeExactIn"},"demos/uniswapv3/types/common-types":{"id":"demos/uniswapv3/types/common-types","title":"Common Types","description":"BestTradeOptions"},"demos/uniswapv3/types/enum-types":{"id":"demos/uniswapv3/types/enum-types","title":"Enum Types","description":"ChainId"},"demos/uniswapv3/types/mutation-types":{"id":"demos/uniswapv3/types/mutation-types","title":"Mutation Types","description":"GasOptions"},"demos/uniswapv3/types/query-types":{"id":"demos/uniswapv3/types/query-types","title":"Query Types","description":"AddLiquidityOptions"},"introduction":{"id":"introduction","title":"Introduction","description":"Polywrap is a framework that enables easy integration of Web3 protocols into any application. It makes it possible for applications on any platform, written in any language, to read and write data to Web3 protocols.","sidebar":"docs"},"quick-start/polywrap-cli":{"id":"quick-start/polywrap-cli","title":"Polywrap CLI","description":"Now that we have a basic understanding of the Polywrap Client, it\'s time to see how we can use the Polywrap CLI to create an amazing experience when working with Wraps.","sidebar":"docs"},"quick-start/polywrap-client":{"id":"quick-start/polywrap-client","title":"Polywrap Client","description":"To use Wraps in your app, all you need is the Polywrap Client!","sidebar":"docs"},"quick-start/what-wraps-are-available":{"id":"quick-start/what-wraps-are-available","title":"What Wraps are available?","description":"The Polywrap ecosystem is continuously growing, so make sure to check this page often for new resources!","sidebar":"docs"},"reference/cli/commands/build":{"id":"reference/cli/commands/build","title":"Build","description":"","sidebar":"docs"},"reference/cli/commands/codegen":{"id":"reference/cli/commands/codegen","title":"Codegen","description":"","sidebar":"docs"},"reference/cli/commands/create":{"id":"reference/cli/commands/create","title":"Create","description":"","sidebar":"docs"},"reference/cli/commands/deploy":{"id":"reference/cli/commands/deploy","title":"Deploy","description":"","sidebar":"docs"},"reference/cli/commands/docgen":{"id":"reference/cli/commands/docgen","title":"Docgen","description":"","sidebar":"docs"},"reference/cli/commands/infra":{"id":"reference/cli/commands/infra","title":"Infra","description":"","sidebar":"docs"},"reference/cli/commands/manifest":{"id":"reference/cli/commands/manifest","title":"Manifest","description":"","sidebar":"docs"},"reference/cli/commands/test":{"id":"reference/cli/commands/test","title":"Test","description":"","sidebar":"docs"},"reference/cli/polywrap-cli":{"id":"reference/cli/polywrap-cli","title":"The Polywrap CLI (polywrap)","description":"A command-line interface for building and deploying Polywrap projects.","sidebar":"docs"},"reference/clients/js/client-config-builder-js":{"id":"reference/clients/js/client-config-builder-js","title":"PolywrapClient Config Builder","description":"A utility class for building the PolywrapClient config.","sidebar":"docs"},"reference/clients/js/client-js":{"id":"reference/clients/js/client-js","title":"@polywrap/client-js","description":"The Polywrap client extends the PolywrapCoreClient to provide UX features, such as an additional constructor and additional configuration options.","sidebar":"docs"},"reference/clients/js/libraries/asyncify-js":{"id":"reference/clients/js/libraries/asyncify-js","title":"@polywrap/asyncify-js","description":"A 0 dependency wrapper around the Node.JS & Browser WebAssembly instance, which adds support for asyncify, enabling the use of async host import functions.","sidebar":"docs"},"reference/clients/js/libraries/core-js":{"id":"reference/clients/js/libraries/core-js","title":"@polywrap/core-js","description":"A TypeScript / JavaScript implementation of the WRAP standard, including all fundamental types & algorithms.","sidebar":"docs"},"reference/clients/js/libraries/msgpack-js":{"id":"reference/clients/js/libraries/msgpack-js","title":"@polywrap/msgpack-js","description":"TypeScript / JavaScript implementation of the WRAP MsgPack encoding standard.","sidebar":"docs"},"reference/clients/js/libraries/result":{"id":"reference/clients/js/libraries/result","title":"@polywrap/result","description":"Description","sidebar":"docs"},"reference/clients/js/libraries/tracing-js":{"id":"reference/clients/js/libraries/tracing-js","title":"@polywrap/tracing-js","description":"Steps to use tracing","sidebar":"docs"},"reference/clients/js/libraries/uri-resolver-extensions-js":{"id":"reference/clients/js/libraries/uri-resolver-extensions-js","title":"@polywrap/uri-resolver-extensions-js","description":"Polywrap URI resolver extensions to customize resolution in the Polywrap Client.","sidebar":"docs"},"reference/clients/js/libraries/uri-resolvers-js":{"id":"reference/clients/js/libraries/uri-resolvers-js","title":"@polywrap/uri-resolvers","description":"URI resolvers to customize URI resolution in the Polywrap Client.","sidebar":"docs"},"reference/clients/js/libraries/wasm-js":{"id":"reference/clients/js/libraries/wasm-js","title":"@polywrap/wasm-js","description":"Description","sidebar":"docs"},"reference/clients/js/libraries/wrap-manifest-types-js":{"id":"reference/clients/js/libraries/wrap-manifest-types-js","title":"@polywrap/wrap-manifest-types-js","description":"TypeScript typings for the @polywrap/wrap-manifest-schemas package.","sidebar":"docs"},"reference/glossary":{"id":"reference/glossary","title":"Glossary","description":"Reference documentation for Polywrap\'s various CLIs, clients, manifests, and underlying specifications.","sidebar":"docs"},"reference/schema/schema-bind":{"id":"reference/schema/schema-bind","title":"@polywrap/schema-bind","description":"Bind WRAP ABIs to a variety of supported languages through codegen.","sidebar":"docs"},"reference/schema/schema-compose":{"id":"reference/schema/schema-compose","title":"Polywrap Schema Compose (@polywrap/schema-compose)","description":"Composes GraphQL schema source and typings for passing to schema-bind.","sidebar":"docs"},"reference/schema/schema-parse":{"id":"reference/schema/schema-parse","title":"@polywrap/schema-parse","description":"Parse & validate WRAP schemas, converting them into a WRAP ABI structure. Optionally perform transformations upon the WRAP ABI.","sidebar":"docs"},"resources/developer-tooling":{"id":"resources/developer-tooling","title":"Developer Tools","description":"Introduction"},"resources/ecosystem-tooling":{"id":"resources/ecosystem-tooling","title":"Ecosystem Tooling","description":"Check out the amazing projects Polywrap DAO contributors have made:","sidebar":"docs"},"resources/talks-podcasts-and-videos":{"id":"resources/talks-podcasts-and-videos","title":"Talks, Podcasts, and Videos","description":"---","sidebar":"docs"},"resources/the-polywrap-technical-standard":{"id":"resources/the-polywrap-technical-standard","title":"The Polywrap Technical Standard","description":"---","sidebar":"docs"},"tutorials/build-and-deploy-wasm-wrappers/build-pipeline":{"id":"tutorials/build-and-deploy-wasm-wrappers/build-pipeline","title":"Configure Polywrap build pipeline","description":"In this section, we\'ll explore the Polywrap\'s build pipeline and how to configure it.","sidebar":"docs"},"tutorials/build-and-deploy-wasm-wrappers/deploy-pipeline":{"id":"tutorials/build-and-deploy-wasm-wrappers/deploy-pipeline","title":"Configure Polywrap deployment pipeline","description":"Polywrap makes it easy to create an automated wrapper deployment pipeline using a Deploy Manifest polywrap.deploy.yaml file and the Polywrap CLI\'s deploy command.","sidebar":"docs"},"tutorials/build-and-deploy-wasm-wrappers/deploy-to-ipfs":{"id":"tutorials/build-and-deploy-wasm-wrappers/deploy-to-ipfs","title":"Deploy to IPFS","description":"There are multiple ways that can be used to deploy your newly created wrapper package","sidebar":"docs"},"tutorials/build-and-deploy-wasm-wrappers/deployment/crust":{"id":"tutorials/build-and-deploy-wasm-wrappers/deployment/crust","title":"Deploying to CRUST Files","description":"Introduction"},"tutorials/build-and-deploy-wasm-wrappers/deployment/fleek":{"id":"tutorials/build-and-deploy-wasm-wrappers/deployment/fleek","title":"Deploying to Fleek","description":"Introduction"},"tutorials/build-and-deploy-wasm-wrappers/deployment/pinata":{"id":"tutorials/build-and-deploy-wasm-wrappers/deployment/pinata","title":"Deploying to Pinata","description":"Introduction"},"tutorials/build-and-deploy-wasm-wrappers/publish-to-ens":{"id":"tutorials/build-and-deploy-wasm-wrappers/publish-to-ens","title":"Publish to ENS","description":"Once a wrapper is published to IPFS, it can optionally be given a domain via ENS. This allows developers integrating your wrapper to rely upon a human-readable & upgradeable URI. For example ens/uniswap.wraps.eth:v3.","sidebar":"docs"},"tutorials/create-plugin-wrappers/create-js-plugin":{"id":"tutorials/create-plugin-wrappers/create-js-plugin","title":"Plugin an existing JS SDK","description":"Introduction","sidebar":"docs"},"tutorials/create-plugin-wrappers/plugin-architecture":{"id":"tutorials/create-plugin-wrappers/plugin-architecture","title":"Plugin Architecture","description":"The architecture of a plugin wrapper\'s code is flexible.","sidebar":"docs"},"tutorials/create-plugin-wrappers/plugin-manifest":{"id":"tutorials/create-plugin-wrappers/plugin-manifest","title":"Configure a Plugin Manifest","description":"Each plugin wrapper project is orchestrated by a Project Manifest polywrap.yaml file.","sidebar":"docs"},"tutorials/create-wasm-wrappers/add-metadata":{"id":"tutorials/create-wasm-wrappers/add-metadata","title":"Add Metadata","description":"Developers can add content, such as a README.md, to their wrap packages. The location of this content must be defined in the project manifest under the resources key."},"tutorials/create-wasm-wrappers/default-plugins":{"id":"tutorials/create-wasm-wrappers/default-plugins","title":"Default plugins","description":"Polywrap plugin wrappers extend the capabilities of Wasm wrappers. Some plugin wrappers come included in the Polywrap client by default:","sidebar":"docs"},"tutorials/create-wasm-wrappers/polywrap-manifest":{"id":"tutorials/create-wasm-wrappers/polywrap-manifest","title":"Configure a Polywrap Manifest","description":"Each Wasm wrapper is orchestrated by a Polywrap Manifest polywrap.yaml file.","sidebar":"docs"},"tutorials/create-wasm-wrappers/tutorial/adding-new-methods":{"id":"tutorials/create-wasm-wrappers/tutorial/adding-new-methods","title":"Adding new Methods","description":"Custom functionality: IPFS SimpleStorage","sidebar":"docs"},"tutorials/create-wasm-wrappers/tutorial/build-deploy-test":{"id":"tutorials/create-wasm-wrappers/tutorial/build-deploy-test","title":"Build, deploy and test","description":"Build","sidebar":"docs"},"tutorials/create-wasm-wrappers/tutorial/deploy-locally-and-test":{"id":"tutorials/create-wasm-wrappers/tutorial/deploy-locally-and-test","title":"Deploy locally & run tests","description":"Deploy","sidebar":"docs"},"tutorials/create-wasm-wrappers/tutorial/project-folder":{"id":"tutorials/create-wasm-wrappers/tutorial/project-folder","title":"The Polywrap project folder","description":"Once you have your project set up, the folder tree should look something like this:","sidebar":"docs"},"tutorials/create-wasm-wrappers/tutorial/project-setup":{"id":"tutorials/create-wasm-wrappers/tutorial/project-setup","title":"Project setup","description":"If you\'re looking to find out what it takes to build a Polywrap Wasm wrapper, you\'ve come to the right place! This guide will help you understand Polywrap\'s core concepts. If you haven\'t checked out our Introduction section yet, we recommend visiting that section first.","sidebar":"docs"},"tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows":{"id":"tutorials/create-wasm-wrappers/tutorial/writing-tests-with-workflows","title":"Writing tests with workflows","description":"Testing","sidebar":"docs"},"tutorials/create-wasm-wrappers/uniswapv3-to-polywrap":{"id":"tutorials/create-wasm-wrappers/uniswapv3-to-polywrap","title":"Case study: Uniswap v3 Wrapper","description":"The Uniswap v3 wrapper provides the same features as Uniswap\'s JavaScript SDK, plus more. The wrapper is written in AssemblyScript and compiled to WebAssembly (WASM). Polywrap\'s JavaScript Client makes interfacing with the wrapper as easy as interfacing with any ordinary JavaScript SDK."},"tutorials/env-variables":{"id":"tutorials/env-variables","title":"Environmental variables","description":"Wrapper developers can declare a map of environmental variables for application developers to provide.","sidebar":"docs"},"tutorials/integrate-wrappers/configure-client":{"id":"tutorials/integrate-wrappers/configure-client","title":"Configuring the Polywrap Client","description":"The Polywrap Client accepts an optional CoreClientConfig argument at construction.","sidebar":"docs"},"tutorials/integrate-wrappers/create-client-instance":{"id":"tutorials/integrate-wrappers/create-client-instance","title":"Creating the Polywrap client instance","description":"Once the Polywrap JS client has been installed, the next step is to create a PolywrapClient instance:","sidebar":"docs"},"tutorials/integrate-wrappers/install-client":{"id":"tutorials/integrate-wrappers/install-client","title":"Installing the Polywrap JS client","description":"Introduction","sidebar":"docs"},"tutorials/integrate-wrappers/react-integration":{"id":"tutorials/integrate-wrappers/react-integration","title":"React integration","description":"To use the Polywrap React integration, you\'ll need to install the @polywrap/react package.","sidebar":"docs"},"tutorials/integrate-wrappers/types-for-app":{"id":"tutorials/integrate-wrappers/types-for-app","title":"Generate types for your app","description":"The polywrap CLI\'s codegen command interacts with","sidebar":"docs"},"tutorials/interfaces/client-config-interfaces":{"id":"tutorials/interfaces/client-config-interfaces","title":"Configure interfaces in the client","description":"The Polywrap Client can be configured to use one or more implementations for","sidebar":"docs"},"tutorials/interfaces/define-implement-interfaces":{"id":"tutorials/interfaces/define-implement-interfaces","title":"Define and implement interfaces","description":"A special type of Polywrap project can be used to define an abstract interface without providing a concrete implementation.","sidebar":"docs"},"tutorials/interfaces/interface-instances":{"id":"tutorials/interfaces/interface-instances","title":"Interface instances","description":"Interface modules can be instantiated in a Wasm wrapper, agnostic to any concrete implementation.","sidebar":"docs"},"tutorials/testing-wrappers/in-typescript":{"id":"tutorials/testing-wrappers/in-typescript","title":"Testing Wrappers In TypeScript","description":"Introduction","sidebar":"docs"},"tutorials/testing-wrappers/infra-pipeline":{"id":"tutorials/testing-wrappers/infra-pipeline","title":"Configure Polywrap infrastructure pipeline","description":"The Polywrap CLI infra command interacts with an Infra Manfiest","sidebar":"docs"},"tutorials/understanding-plugins":{"id":"tutorials/understanding-plugins","title":"Understanding plugins","description":"Polywrap plugins, or \\"plugin wrappers\\", enable existing SDKs implemented in the client\'s language (e.g. JavaScript) to be queried as if they were Wasm wrappers.","sidebar":"docs"},"tutorials/understanding-uri-redirects":{"id":"tutorials/understanding-uri-redirects","title":"URI redirects","description":"Similar to how browsers can redirect from one URI to another, the Polywrap client can have custom URI redirects configured as well.","sidebar":"docs"},"tutorials/workflows/running-workflows":{"id":"tutorials/workflows/running-workflows","title":"Running Workflows","description":"A workflow is a configurable process that will execute one or more Polywrap wrapper invocations.","sidebar":"docs"},"tutorials/workflows/workflow-validation":{"id":"tutorials/workflows/workflow-validation","title":"Workflow Validation","description":"Workflow validation can be used to verify the contents of a workflow output file.","sidebar":"docs"},"tutorials/wrapper-schema":{"id":"tutorials/wrapper-schema","title":"Wrapper Schema","description":"Every wrapper project has a schema.","sidebar":"docs"}}}')}}]);