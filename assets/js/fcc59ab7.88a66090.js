"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[5180],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>d});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),p=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},l=function(e){var r=p(e.components);return t.createElement(i.Provider,{value:r},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,d=m["".concat(i,".").concat(f)]||m[f]||u[f]||o;return n?t.createElement(d,s(s({ref:r},l),{},{components:n})):t.createElement(d,s({ref:r},l))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c[m]="string"==typeof e?e:a,s[1]=c;for(var p=2;p<o;p++)s[p]=n[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},384:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var t=n(7462),a=(n(7294),n(3905));const o={id:"schema-parse",hide_title:!0},s="@polywrap/schema-parse",c={unversionedId:"reference/schema/schema-parse",id:"reference/schema/schema-parse",title:"@polywrap/schema-parse",description:"Parse & validate WRAP schemas, converting them into a WRAP ABI structure. Optionally perform transformations upon the WRAP ABI.",source:"@site/docs/reference/schema/schema-parse.md",sourceDirName:"reference/schema",slug:"/reference/schema/schema-parse",permalink:"/reference/schema/schema-parse",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/reference/schema/schema-parse.md",tags:[],version:"current",frontMatter:{id:"schema-parse",hide_title:!0},sidebar:"docs",previous:{title:"@polywrap/wrap-manifest-types-js",permalink:"/reference/clients/js/libraries/wrap-manifest-types-js"},next:{title:"Polywrap Schema Compose (@polywrap/schema-compose)",permalink:"/reference/schema/schema-compose"}},i={},p=[{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:3},{value:"ABI Transforms",id:"abi-transforms",level:3}],l={toc:p},m="wrapper";function u(e){let{components:r,...n}=e;return(0,a.kt)(m,(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"polywrapschema-parse"},"@polywrap/schema-parse"),(0,a.kt)("p",null,"Parse & validate WRAP schemas, converting them into a WRAP ABI structure. Optionally perform transformations upon the WRAP ABI."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  Abi,\n  parseSchema,\n  ParserOptions\n} from "@polywrap/schema-parse";\n\nconst schema = readFileSync("module.graphql", "utf-8");\nconst options: ParserOptions = { };\n\nconst abi: Abi = parseSchema(schema, options);\n')),(0,a.kt)("h3",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ParserOptions {\n  // Disable schema validation\n  noValidate?: boolean;\n  // Use custom validators\n  validators?: SchemaValidatorBuilder[];\n  // Use custom extractors\n  extractors?: SchemaExtractorBuilder[];\n  // Use custom transformations\n  transforms?: AbiTransforms[];\n}\n")),(0,a.kt)("h3",{id:"abi-transforms"},"ABI Transforms"),(0,a.kt)("p",null,"ABI transformations can be used to modify the ABI structure. A variety of pre-defined transformations can be found in the ./src/transform/ directory."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  Abi,\n  AbiTransforms,\n  GenericDefinition,\n  parseSchema\n} from "@polywrap/schema-parse";\n\nfunction extendType(extension: any): AbiTransforms {\n  return {\n    enter: {\n      Abi: (abi: Abi) => ({\n        ...abi,\n        extension,\n      }),\n      GenericDefinition: (def: GenericDefinition) => ({\n        ...def,\n        ...extension,\n      }),\n    },\n  };\n}\n')),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'parseSchema(schema, {\n  transforms: [\n    extendType({ newProp: "foo" })\n  ]\n});\n')))}u.isMDXComponent=!0}}]);