"use strict";(self.webpackChunk_polywrap_docs=self.webpackChunk_polywrap_docs||[]).push([[1597],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(n),g=i,d=s["".concat(c,".").concat(g)]||s[g]||f[g]||o;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3760:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={id:"configure-client",title:"Configuring the Polywrap Client"},a=void 0,l={unversionedId:"tutorials/integrate-wrappers/configure-client",id:"tutorials/integrate-wrappers/configure-client",title:"Configuring the Polywrap Client",description:"The Polywrap Client accepts an optional CoreClientConfig argument at construction.",source:"@site/docs/tutorials/integrate-wrappers/configure-client.md",sourceDirName:"tutorials/integrate-wrappers",slug:"/tutorials/integrate-wrappers/configure-client",permalink:"/tutorials/integrate-wrappers/configure-client",draft:!1,editUrl:"https://github.com/polywrap/documentation/tree/main/src/docs/tutorials/integrate-wrappers/configure-client.md",tags:[],version:"current",frontMatter:{id:"configure-client",title:"Configuring the Polywrap Client"},sidebar:"docs",previous:{title:"Creating the Polywrap client instance",permalink:"/tutorials/integrate-wrappers/create-client-instance"},next:{title:"Generate types for your app",permalink:"/tutorials/integrate-wrappers/types-for-app"}},c={},p=[{value:"The <code>ClientConfigBuilder</code>",id:"the-clientconfigbuilder",level:2}],u={toc:p},s="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Polywrap Client accepts an optional ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/polywrap/toolchain/blob/origin-0.10/packages/js/core/src/types/CoreClient.ts#L12"},(0,i.kt)("inlineCode",{parentName:"a"},"CoreClientConfig"))," argument at construction."),(0,i.kt)("p",null,"If none is provided, a default configuration is used which should be sufficient for most use-cases."),(0,i.kt)("p",null,"However, if you wish to configure the client, you can supply your own config object by building it using the ",(0,i.kt)("a",{parentName:"p",href:"/reference/clients/js/client-config-builder-js"},"Client Config Builder"),"."),(0,i.kt)("h2",{id:"the-clientconfigbuilder"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"ClientConfigBuilder")),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfigBuilder")," class present in ",(0,i.kt)("inlineCode",{parentName:"p"},"@polywrap/client-config-builder-js")," to easily build the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConfig")," object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const config = new ClientConfigBuilder()\n  .addDefaults()\n  // add or remove configs here using ClientConfigBuilder methods...\n  .build();\n\nconst client = new PolywrapClient(config);\n")))}f.isMDXComponent=!0}}]);